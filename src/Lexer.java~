/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.*;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CONSTCHARSTRING = 2;
  public static final int COMENTARIOUNALINEA = 4;
  public static final int COMENTARIOMULTIPLESLINEAS = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\1\62\1\62\1\7\22\0\1\10\1\36\5\0"+
    "\1\30\1\11\1\12\1\2\1\22\1\27\1\23\1\5\1\1\12\4"+
    "\1\25\1\24\1\35\1\13\1\35\1\26\1\0\1\44\1\60\1\54"+
    "\1\14\1\42\1\43\1\52\1\56\1\16\2\3\1\45\1\20\1\53"+
    "\1\21\1\51\1\3\1\40\1\47\1\37\1\41\1\17\1\55\1\57"+
    "\1\61\1\3\1\31\1\0\1\32\1\50\1\6\1\0\1\44\1\60"+
    "\1\54\1\14\1\42\1\43\1\52\1\56\1\16\2\3\1\45\1\20"+
    "\1\53\1\21\1\51\1\3\1\40\1\47\1\37\1\41\1\17\1\55"+
    "\1\57\1\61\1\3\1\33\1\0\1\34\7\0\1\62\252\0\2\15"+
    "\115\0\1\46\u1ea8\0\1\62\1\62\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\3\0\1\2\2\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\4\1\2\4\4\2\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\2\6\4\1\2\1\4\1\25\6\4\1\26"+
    "\1\27\1\30\4\31\1\32\1\33\1\34\1\0\1\24"+
    "\1\0\1\35\1\36\1\0\1\36\4\4\1\37\1\40"+
    "\1\41\1\42\14\4\1\0\11\4\1\43\1\44\1\45"+
    "\1\46\1\47\1\3\1\4\2\50\1\0\1\4\1\51"+
    "\1\0\11\4\1\0\1\4\1\52\1\53\3\4\1\54"+
    "\1\0\2\4\1\55\1\4\1\0\1\4\1\0\1\4"+
    "\1\56\3\4\1\0\1\4\2\57\2\60\1\61\1\62"+
    "\1\63\1\4\1\64\2\4\1\0\1\4\2\65\1\4"+
    "\1\0\1\4\1\0\3\4\1\66\1\0\1\4\1\0"+
    "\1\4\1\67\1\0\2\4\1\0\4\4\2\70\1\4"+
    "\1\61\1\71\1\0\3\4\2\72\2\73\1\4\2\74"+
    "\1\75\1\0\1\4\1\76\1\77\1\100\1\0\1\4"+
    "\2\101\3\4\2\102\1\0\1\4\1\103\1\4\1\104"+
    "\2\105\1\4\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\314\0\314\0\314\0\u01fe\0\u0231\0\u0264"+
    "\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\314\0\314"+
    "\0\314\0\314\0\314\0\314\0\314\0\314\0\314\0\u01fe"+
    "\0\u01fe\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\314\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660"+
    "\0\314\0\314\0\314\0\314\0\u0693\0\u06c6\0\u06f9\0\314"+
    "\0\314\0\314\0\u072c\0\314\0\u075f\0\u0792\0\314\0\u07c5"+
    "\0\u0165\0\u07f8\0\u082b\0\u085e\0\u0891\0\u0165\0\314\0\314"+
    "\0\u0165\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\314"+
    "\0\314\0\314\0\314\0\u072c\0\314\0\u0d26\0\u0d59\0\u0d8c"+
    "\0\u0dbf\0\u0df2\0\u0165\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u0165"+
    "\0\u0165\0\u1089\0\u10bc\0\u10ef\0\u0165\0\u1122\0\u1155\0\u1188"+
    "\0\u0165\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u0165\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\314\0\u0165\0\314\0\u0165"+
    "\0\u0165\0\u0165\0\u0165\0\u13b9\0\u0165\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\314\0\u0165\0\u14b8\0\u14eb\0\u151e\0\u1551\0\u1584"+
    "\0\u15b7\0\u15ea\0\u0165\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\314\0\u0165\0\u18b4\0\314\0\u0165\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\314\0\u0165\0\314\0\u0165\0\u19b3\0\314\0\u0165"+
    "\0\u0165\0\u19e6\0\u1a19\0\u0165\0\u0165\0\u0165\0\u1a4c\0\u1a7f"+
    "\0\314\0\u0165\0\u1ab2\0\u1ae5\0\u1b18\0\314\0\u0165\0\u1b4b"+
    "\0\u1b7e\0\u0165\0\u1bb1\0\u0165\0\314\0\u0165\0\u1be4\0\u0165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\5\2\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\10\1\50\1\51\1\52"+
    "\1\53\1\10\1\54\1\55\1\56\1\10\1\57\1\60"+
    "\1\10\1\61\7\62\1\61\20\62\1\63\31\62\1\61"+
    "\1\64\1\65\1\66\4\64\1\61\52\64\1\61\1\64"+
    "\1\65\1\67\4\64\1\61\52\64\1\61\64\0\1\70"+
    "\1\71\61\0\1\72\64\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\7\10\1\0\1\10\1\0"+
    "\11\10\5\0\1\11\1\73\62\0\1\52\70\0\1\74"+
    "\52\0\2\10\1\0\1\10\5\0\1\10\1\75\3\10"+
    "\1\76\15\0\7\10\1\0\1\10\1\0\11\10\44\0"+
    "\1\77\7\0\1\100\12\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\4\10\1\101\2\10\1\0"+
    "\1\10\1\0\2\10\1\102\6\10\4\0\2\10\1\0"+
    "\1\10\5\0\1\10\1\0\3\10\1\103\15\0\5\10"+
    "\1\104\1\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\5\10"+
    "\1\105\1\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\1\10"+
    "\1\106\5\10\1\0\1\10\1\0\11\10\23\0\1\107"+
    "\63\0\1\110\42\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\3\10\1\111\15\0\1\10\1\112\5\10\1\0"+
    "\1\10\1\0\5\10\1\113\2\10\1\114\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\3\10"+
    "\1\115\3\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\7\10"+
    "\1\0\1\10\1\0\2\10\1\116\6\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\6\10"+
    "\1\117\1\0\1\10\1\0\2\10\1\120\6\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\3\10\1\121"+
    "\15\0\2\10\1\122\2\10\1\123\1\124\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\7\10\1\0\1\10\1\0\2\10"+
    "\1\125\6\10\40\0\1\126\26\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\1\127\6\10\1\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\1\10\1\130\5\10\1\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\3\10\1\131\15\0\7\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\7\10\1\0\1\10\1\0\5\10"+
    "\1\132\3\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\1\10\1\133\5\10\1\0\1\10"+
    "\1\0\5\10\1\134\3\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\3\10\1\135\15\0\7\10\1\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\3\10\1\136\15\0\3\10\1\137\3\10"+
    "\1\0\1\10\1\0\11\10\2\0\1\140\1\141\61\0"+
    "\1\142\62\0\1\143\65\0\1\144\75\0\1\145\46\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\7\10\1\0\1\10\1\0\4\10\1\146\4\10\40\0"+
    "\1\147\26\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\1\150\6\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\151\1\152"+
    "\3\10\15\0\7\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\1\10\1\153\5\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\154\1\155\3\10"+
    "\15\0\7\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\2\10"+
    "\1\156\4\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\3\10"+
    "\1\157\3\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\7\10"+
    "\1\0\1\10\1\0\1\160\10\10\4\0\2\10\1\0"+
    "\1\10\5\0\1\10\1\0\4\10\15\0\1\161\4\10"+
    "\1\162\1\10\1\0\1\10\1\0\1\163\2\10\1\164"+
    "\5\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\1\165\6\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\0\4\10"+
    "\15\0\7\10\1\166\1\167\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\170\1\0\4\10\15\0\7\10"+
    "\1\0\1\10\1\0\11\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\1\10\1\171\5\10"+
    "\1\0\1\10\1\0\11\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\7\10\1\0\1\10"+
    "\1\0\2\10\1\172\6\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\6\10\1\173\1\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\3\10\1\174\15\0\7\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\175"+
    "\1\0\4\10\15\0\7\10\1\0\1\10\1\0\11\10"+
    "\41\0\1\176\25\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\1\10\1\177\5\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\3\10\1\200\15\0\7\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\1\201\6\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\0\4\10"+
    "\15\0\5\10\1\202\1\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\203\1\204"+
    "\3\10\15\0\7\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\205\1\206\3\10"+
    "\15\0\7\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\1\10"+
    "\1\207\5\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\3\10\1\210\15\0"+
    "\7\10\1\0\1\10\1\0\11\10\4\0\2\10\1\0"+
    "\1\10\5\0\1\10\1\0\4\10\15\0\7\10\1\0"+
    "\1\10\1\0\1\10\1\211\7\10\4\0\2\10\1\0"+
    "\1\10\5\0\1\10\1\0\4\10\15\0\7\10\1\0"+
    "\1\10\1\0\2\10\1\212\6\10\43\0\1\213\23\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\3\10\1\214\3\10\1\0\1\10\1\0\11\10\15\0"+
    "\1\215\51\0\2\10\1\0\1\10\5\0\1\216\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\11\10\54\0"+
    "\1\217\12\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\2\10\1\220"+
    "\6\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\3\10\1\221\3\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\2\10\1\222"+
    "\6\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\3\10\1\223\3\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\2\10\1\224\4\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\225\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\3\10\1\226\3\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\3\10\1\227"+
    "\15\0\7\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\230\1\231\3\10\15\0"+
    "\7\10\1\0\1\10\1\0\11\10\43\0\1\232\23\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\3\10\1\233\3\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\7\10\1\0\1\10\1\0\3\10\1\234\5\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\7\10\1\235\1\156\1\0\11\10\4\0\2\10\1\0"+
    "\1\10\5\0\1\10\1\0\4\10\15\0\5\10\1\236"+
    "\1\10\1\0\1\10\1\0\11\10\16\0\2\237\47\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\237\1\240\3\10"+
    "\15\0\7\10\1\0\1\10\1\0\11\10\4\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\7\10"+
    "\1\0\1\10\1\0\1\10\1\241\1\10\1\242\5\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\0\4\10"+
    "\15\0\1\10\1\243\5\10\1\0\1\10\1\0\11\10"+
    "\40\0\1\244\26\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\1\245\6\10\1\0\1\10\1\0"+
    "\11\10\46\0\1\246\20\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\6\10\1\247\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\6\10\1\250\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\10\1\251"+
    "\1\252\3\10\15\0\7\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\0\4\10"+
    "\15\0\1\253\6\10\1\0\1\10\1\0\11\10\53\0"+
    "\1\254\13\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\1\10\1\255"+
    "\7\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\1\10\1\256\5\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\5\10\1\257\1\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\1\10\1\260\5\10\1\0\1\10\1\0"+
    "\11\10\46\0\1\261\20\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\6\10\1\262\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\1\263\6\10\1\0\1\10\1\0"+
    "\11\10\43\0\1\264\23\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\1\265\6\10\1\0\1\10"+
    "\1\0\11\10\54\0\1\266\12\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\7\10\1\0\1\10"+
    "\1\0\2\10\1\267\6\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\1\10\1\270\5\10"+
    "\1\0\1\10\1\0\11\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\3\10\1\271\3\10"+
    "\1\0\1\10\1\0\11\10\43\0\1\272\23\0\2\10"+
    "\1\0\1\10\5\0\1\10\1\0\4\10\15\0\3\10"+
    "\1\273\3\10\1\0\1\10\1\0\11\10\43\0\1\274"+
    "\23\0\2\10\1\0\1\10\5\0\1\10\1\0\4\10"+
    "\15\0\3\10\1\275\3\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\0\4\10"+
    "\15\0\3\10\1\276\3\10\1\0\1\10\1\0\11\10"+
    "\54\0\1\277\12\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\7\10\1\0\1\10\1\0\2\10"+
    "\1\300\6\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\3\10\1\301\15\0\7\10\1\0\1\10\1\0"+
    "\11\10\43\0\1\302\23\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\3\10\1\303\3\10\1\0"+
    "\1\10\1\0\11\10\4\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\7\10\1\0\1\10\1\0"+
    "\2\10\1\304\6\10\4\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\4\10\15\0\1\305\6\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\306"+
    "\1\0\4\10\15\0\7\10\1\0\1\10\1\0\11\10"+
    "\4\0\2\10\1\0\1\10\5\0\1\10\1\307\1\310"+
    "\3\10\15\0\7\10\1\0\1\10\1\0\11\10\53\0"+
    "\1\311\13\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\1\10\1\312"+
    "\7\10\4\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\5\10\1\313\1\10\1\0\1\10\1\0"+
    "\11\10\4\0\2\10\1\0\1\10\5\0\1\314\1\0"+
    "\4\10\15\0\7\10\1\0\1\10\1\0\11\10\4\0"+
    "\2\10\1\0\1\10\5\0\1\10\1\0\4\10\15\0"+
    "\5\10\1\315\1\10\1\0\1\10\1\0\11\10\41\0"+
    "\1\316\25\0\2\10\1\0\1\10\5\0\1\10\1\0"+
    "\4\10\15\0\1\10\1\317\5\10\1\0\1\10\1\0"+
    "\11\10\22\0\1\320\44\0\2\10\1\0\1\10\5\0"+
    "\1\10\1\0\3\10\1\321\15\0\7\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\2\10\1\322\1\10\15\0\7\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\2\10\1\323\4\10\1\0\1\10"+
    "\1\0\11\10\4\0\2\10\1\0\1\10\5\0\1\10"+
    "\1\0\4\10\15\0\7\10\1\0\1\10\1\0\2\10"+
    "\1\324\6\10\54\0\1\325\12\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\7\10\1\0\1\10"+
    "\1\0\2\10\1\326\6\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\1\10\1\327\5\10"+
    "\1\0\1\10\1\0\11\10\4\0\2\10\1\0\1\10"+
    "\5\0\1\10\1\0\4\10\15\0\3\10\1\330\3\10"+
    "\1\0\1\10\1\0\11\10\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7191];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\3\0\1\11\5\1\3\11\11\1\11\11\12\1"+
    "\1\11\6\1\4\11\3\1\3\11\1\0\1\11\1\0"+
    "\1\1\1\11\1\0\6\1\2\11\15\1\1\0\11\1"+
    "\4\11\1\1\1\11\3\1\1\0\2\1\1\0\11\1"+
    "\1\0\7\1\1\0\4\1\1\0\1\1\1\0\5\1"+
    "\1\0\1\1\1\11\1\1\1\11\10\1\1\0\1\1"+
    "\1\11\2\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\4\1\1\11\2\1"+
    "\1\11\1\1\1\0\3\1\1\11\1\1\1\11\2\1"+
    "\1\11\2\1\1\0\4\1\1\0\1\1\1\11\4\1"+
    "\1\11\1\1\1\0\4\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String entrada = "";  //se usa para revision de strings/characteres
    int longitudentrada = 0;

    public static ArrayList<String> lexical_errors = new ArrayList<String>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.NUM, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 2: 
            { //cualquier otra cosa, agregar a lista de errores
        System.out.println("Error. Este caracter \'" + yytext() + "\' no es permitido.");
        lexical_errors.add("Error. Este caracter \'" + yytext() + "\' no es permitido." + 
        yytext()+ "' en lÃ­nea " + String.valueOf(yyline + 1)+", columna "
        + String.valueOf(yycolumn + 1));
            } 
            // fall through
          case 72: break;
          case 3: 
            { return new Symbol(sym.OPMULT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 4: 
            { return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 5: 
            { return new Symbol(sym.DOT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 6: 
            { //ignorar
            } 
            // fall through
          case 76: break;
          case 7: 
            { return new Symbol(sym.PARIZQ, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 8: 
            { return new Symbol(sym.PARDER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 9: 
            { return new Symbol(sym.EQUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 10: 
            { return new Symbol(sym.OPSUM, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 11: 
            { return new Symbol(sym.PUNTOCOMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 12: 
            { return new Symbol(sym.DECISION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 13: 
            { return new Symbol(sym.QUESTIONMARK, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 14: 
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 15: 
            { entrada =  ""; longitudentrada = 0; yybegin(CONSTCHARSTRING);
            } 
            // fall through
          case 85: break;
          case 16: 
            { return new Symbol(sym.BRACKETIZQ, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 17: 
            { return new Symbol(sym.BRACKETDER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 18: 
            { return new Symbol(sym.CURLYIZQ, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 19: 
            { return new Symbol(sym.CURLYDER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 20: 
            { return new Symbol(sym.OPREL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 21: 
            { return new Symbol(sym.CHARESPECIAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 22: 
            { System.out.print(yytext());
            } 
            // fall through
          case 92: break;
          case 23: 
            { entrada += yytext();
        longitudentrada++;
            } 
            // fall through
          case 93: break;
          case 24: 
            { longitudentrada++;
        if(longitudentrada == 2){
            yybegin(YYINITIAL);
            return new Symbol(sym.CONSTCHAR, yycolumn, yyline, entrada);
        } else{
            yybegin(YYINITIAL);
            return new Symbol(sym.CONSTSTRING, yycolumn, yyline, entrada);
        }
            } 
            // fall through
          case 94: break;
          case 25: 
            { 
            } 
            // fall through
          case 95: break;
          case 26: 
            { yybegin(COMENTARIOUNALINEA);
            } 
            // fall through
          case 96: break;
          case 27: 
            { yybegin(COMENTARIOMULTIPLESLINEAS);
            } 
            // fall through
          case 97: break;
          case 28: 
            { //error
        System.out.println("Error, este caracter no es permitido. Usar '/'* *'/'");
        lexical_errors.add("Error, este caracter no es permitido. Usar '/'* *'/'"+ 
        yytext()+ "' en lÃ­nea " + String.valueOf(yyline + 1)+", columna "
        + String.valueOf(yycolumn + 1));
            } 
            // fall through
          case 98: break;
          case 29: 
            { return new Symbol(sym.DO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 30: 
            { return new Symbol(sym.IF, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 31: 
            { return new Symbol(sym.OR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 32: 
            { return new Symbol(sym.INCREMENTADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 33: 
            { return new Symbol(sym.DECREMENTADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 34: 
            { return new Symbol(sym.TO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 35: 
            { //error
        System.out.println("Error. Este caracter \'" + yytext() + "\' no es permitido adentro de un comentario.");
        System.out.println("Error Lexico en la linea: " + (yyline+1) + " columna: " 
        + (yycolumn + 1) + "\n");
        lexical_errors.add("Error. Este caracter \'" + yytext() + "\' no es permitido adentro de un comentario." + 
        yytext()+ "' en lÃ­nea " + String.valueOf(yyline + 1)+", columna "
        + String.valueOf(yycolumn + 1));
            } 
            // fall through
          case 105: break;
          case 36: 
            { //error
        System.out.println("Error. Este caracter \'" + yytext() + "\' no es permitido adentro de un comentario.");
        System.out.println("Error Lexico en la linea: " + (yyline +1) + " columna: " 
        + (yycolumn + 1) + "\n");
        lexical_errors.add("Error. Este caracter \'" + yytext() + "\' no es permitido adentro de un comentario." + 
        yytext()+ "' en lÃ­nea " + String.valueOf(yyline + 1)+", columna "
        + String.valueOf(yycolumn + 1));
            } 
            // fall through
          case 106: break;
          case 37: 
            { System.out.println("Error. Este caracter \'" + yytext() + "\' no es permitido adentro de un comentario de una sola linea.");
        System.out.println("Error Lexico en la linea: " + (yyline +1) + " columna: " 
        + (yycolumn + 1) + "\n");
        lexical_errors.add("Error. Este caracter \'" + yytext() + "\' no es permitido adentro de un comentario de una sola linea." + 
        yytext()+ "' en lÃ­nea " + String.valueOf(yyline + 1)+", columna "
        + String.valueOf(yycolumn + 1));
            } 
            // fall through
          case 107: break;
          case 38: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 108: break;
          case 39: 
            { return new Symbol(sym.NUMREAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 40: 
            { return new Symbol(sym.INT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 41: 
            { return new Symbol(sym.VAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 42: 
            { return new Symbol(sym.END, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 43: 
            { return new Symbol(sym.FOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 44: 
            { return new Symbol(sym.AND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 45: 
            { return new Symbol(sym.NOT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 46: 
            { return new Symbol(sym.XOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 47: 
            { return new Symbol(sym.VOID, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 48: 
            { return new Symbol(sym.MAIN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 49: 
            { return new Symbol(sym.OPBOOL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 50: 
            { return new Symbol(sym.THEN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 51: 
            { return new Symbol(sym.TYPE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 52: 
            { return new Symbol(sym.READ, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 53: 
            { return new Symbol(sym.ELSE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 54: 
            { return new Symbol(sym.CHAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 55: 
            { return new Symbol(sym.BOOL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 56: 
            { return new Symbol(sym.UNTIL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 57: 
            { return new Symbol(sym.FLOAT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 58: 
            { return new Symbol(sym.WRITE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 59: 
            { return new Symbol(sym.WHILE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 60: 
            { return new Symbol(sym.BEGIN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 61: 
            { return new Symbol(sym.DOWNTO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 62: 
            { return new Symbol(sym.RETURN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 63: 
            { return new Symbol(sym.REPEAT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 64: 
            { return new Symbol(sym.RECORD, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 65: 
            { return new Symbol(sym.STRING1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 66: 
            { return new Symbol(sym.INTEGER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 67: 
            { return new Symbol(sym.PROGRAM, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 68: 
            { return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          case 69: 
            { return new Symbol(sym.FUNCTION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 139: break;
          case 70: 
            { return new Symbol(sym.PROCEDURE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
