
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\006\003\000\002\033\004\000\002\033\004" +
    "\000\002\033\004\000\002\033\002\000\002\034\003\000" +
    "\002\034\004\000\002\040\003\000\002\040\005\000\002" +
    "\040\006\000\002\031\005\000\002\031\006\000\002\012" +
    "\006\000\002\012\010\000\002\012\006\000\002\012\010" +
    "\000\002\012\010\000\002\012\011\000\002\024\003\000" +
    "\002\024\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\042\003\000\002\042\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\043\005\000\002\043\003\000\002\043\003\000" +
    "\002\044\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\015\006\000\002\016\010\000\002\016\010\000\002\017" +
    "\007\000\002\025\005\000\002\025\007\000\002\030\003" +
    "\000\002\030\004\000\002\030\005\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\027\005\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\004\007" +
    "\000\002\004\010\000\002\036\006\000\002\037\005\000" +
    "\002\010\010\000\002\010\010\000\002\010\012\000\002" +
    "\032\004\000\002\032\007\000\002\032\010\000\002\032" +
    "\006\000\002\032\002\000\002\045\006\000\002\046\004" +
    "\000\002\046\005\000\002\046\002\000\002\011\004\000" +
    "\002\011\002\000\002\005\010\000\002\005\002\000\002" +
    "\022\006\000\002\022\010\000\002\021\010\000\002\021" +
    "\010\000\002\021\010\000\002\021\010\000\002\021\006" +
    "\000\002\021\006\000\002\021\010\000\002\021\010\000" +
    "\002\021\010\000\002\021\010\000\002\021\012\000\002" +
    "\021\012\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\032\003\ufffa\006\015\012\ufffa\015\ufffa\016" +
    "\ufffa\021\004\022\007\026\017\047\ufffa\050\ufffa\051\ufffa" +
    "\074\ufffa\001\002\000\006\014\uffec\074\uffea\001\002\000" +
    "\022\003\045\012\034\015\042\016\041\047\035\050\052" +
    "\051\055\074\047\001\002\000\004\014\332\001\002\000" +
    "\006\014\uffeb\074\uffe8\001\002\000\004\074\302\001\002" +
    "\000\036\002\ufffa\003\ufffa\006\015\012\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\021\004\022\007\026\017\047\ufffa\050\ufffa" +
    "\051\ufffa\074\ufffa\001\002\000\036\002\ufffa\003\ufffa\006" +
    "\015\012\ufffa\013\ufffa\015\ufffa\016\ufffa\021\004\022\007" +
    "\026\017\047\ufffa\050\ufffa\051\ufffa\074\ufffa\001\002\000" +
    "\004\002\276\001\002\000\004\002\000\001\002\000\004" +
    "\074\021\001\002\000\036\002\ufffa\003\ufffa\006\015\012" +
    "\ufffa\013\ufffa\015\ufffa\016\ufffa\021\004\022\007\026\017" +
    "\047\ufffa\050\ufffa\051\ufffa\074\ufffa\001\002\000\010\060" +
    "\uffe9\062\uffe9\074\uffe9\001\002\000\026\002\ufffb\003\ufffb" +
    "\012\ufffb\013\ufffb\015\ufffb\016\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\074\ufffb\001\002\000\004\036\022\001\002\000\010" +
    "\021\025\022\024\026\017\001\002\000\004\060\026\001" +
    "\002\000\010\060\uffe8\062\uffe8\074\uffe8\001\002\000\010" +
    "\060\uffea\062\uffea\074\uffea\001\002\000\042\002\uffaa\003" +
    "\uffaa\004\uffa8\006\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa" +
    "\021\uffaa\022\uffaa\024\027\026\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\074\uffaa\001\002\000\004\074\265\001\002\000\004" +
    "\004\033\001\002\000\036\002\uffb7\003\uffb7\006\uffb7\012" +
    "\uffb7\013\uffb7\015\uffb7\016\uffb7\021\uffb7\022\uffb7\026\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\074\uffb7\001\002\000\040\002" +
    "\uffab\003\uffab\006\uffab\012\uffab\013\uffab\015\uffab\016\uffab" +
    "\021\uffab\022\uffab\026\uffab\047\uffab\050\uffab\051\uffab\067" +
    "\uffab\074\uffab\001\002\000\022\003\045\012\034\015\042" +
    "\016\041\047\035\050\052\051\055\074\047\001\002\000" +
    "\004\063\256\001\002\000\010\074\064\075\063\077\065" +
    "\001\002\000\044\003\uffd8\005\uffd8\006\uffd8\012\uffd8\013" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\026\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\054\uffd8\060\uffd8\074\uffd8\001" +
    "\002\000\044\003\uffd7\005\uffd7\006\uffd7\012\uffd7\013\uffd7" +
    "\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\026\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\054\uffd7\060\uffd7\074\uffd7\001\002" +
    "\000\044\003\uffd6\005\uffd6\006\uffd6\012\uffd6\013\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\026\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\054\uffd6\060\uffd6\074\uffd6\001\002\000" +
    "\012\063\222\074\064\075\063\077\065\001\002\000\004" +
    "\063\163\001\002\000\040\003\ufff9\005\ufff9\006\ufff9\012" +
    "\ufff9\013\ufff9\015\ufff9\016\ufff9\021\ufff9\022\ufff9\026\ufff9" +
    "\047\ufff9\050\ufff9\051\ufff9\054\ufff9\074\ufff9\001\002\000" +
    "\024\003\045\005\161\012\034\015\042\016\041\047\035" +
    "\050\052\051\055\074\047\001\002\000\004\060\160\001" +
    "\002\000\004\060\157\001\002\000\010\043\105\056\106" +
    "\063\124\001\002\000\044\003\uffd4\005\uffd4\006\uffd4\012" +
    "\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4" +
    "\026\uffd4\047\uffd4\050\uffd4\051\uffd4\054\uffd4\060\uffd4\074" +
    "\uffd4\001\002\000\004\060\156\001\002\000\004\074\104" +
    "\001\002\000\044\003\uffd5\005\uffd5\006\uffd5\012\uffd5\013" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\026\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\054\uffd5\060\uffd5\074\uffd5\001" +
    "\002\000\004\060\102\001\002\000\022\003\045\012\034" +
    "\015\042\016\041\047\035\050\052\051\055\074\047\001" +
    "\002\000\004\060\057\001\002\000\044\003\uffd0\005\uffd0" +
    "\006\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0\021" +
    "\uffd0\022\uffd0\026\uffd0\047\uffd0\050\uffd0\051\uffd0\054\uffd0" +
    "\060\uffd0\074\uffd0\001\002\000\024\003\045\012\034\015" +
    "\042\016\041\047\035\050\052\051\055\054\062\074\047" +
    "\001\002\000\040\003\ufff8\005\ufff8\006\ufff8\012\ufff8\013" +
    "\ufff8\015\ufff8\016\ufff8\021\ufff8\022\ufff8\026\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\054\ufff8\074\ufff8\001\002\000\010\074" +
    "\064\075\063\077\065\001\002\000\006\043\071\044\070" +
    "\001\002\000\006\043\071\044\070\001\002\000\006\043" +
    "\071\044\070\001\002\000\004\060\067\001\002\000\044" +
    "\003\uffcb\005\uffcb\006\uffcb\012\uffcb\013\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\022\uffcb\026\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\054\uffcb\060\uffcb\074\uffcb\001\002\000\010\074" +
    "\uffe6\075\uffe6\077\uffe6\001\002\000\010\074\uffe7\075\uffe7" +
    "\077\uffe7\001\002\000\004\074\073\001\002\000\022\020" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\052\uffda\060\uffda" +
    "\062\uffda\001\002\000\010\074\076\075\075\077\077\001" +
    "\002\000\022\020\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\052\uffdd\060\uffdd\062\uffdd\001\002\000\022\020\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\052\uffd9\060\uffd9\062\uffd9" +
    "\001\002\000\022\020\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\052\uffdc\060\uffdc\062\uffdc\001\002\000\004\075\101" +
    "\001\002\000\022\020\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\052\uffdb\060\uffdb\062\uffdb\001\002\000\044\003\uffd2" +
    "\005\uffd2\006\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\026\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\054\uffd2\060\uffd2\074\uffd2\001\002\000\006\053\146\055" +
    "\147\001\002\000\006\043\105\056\106\001\002\000\020" +
    "\034\115\045\114\063\116\074\123\075\111\077\113\100" +
    "\122\001\002\000\004\074\107\001\002\000\004\035\110" +
    "\001\002\000\020\034\115\045\114\063\116\074\123\075" +
    "\111\077\113\100\122\001\002\000\034\034\uffc0\045\uffc0" +
    "\046\uffc0\053\uffc0\055\uffc0\057\uffc0\060\uffc0\062\uffc0\063" +
    "\uffc0\074\uffc0\075\uffc0\077\uffc0\100\uffc0\001\002\000\016" +
    "\045\uffc8\046\140\053\uffc8\055\uffc8\060\uffc8\062\uffc8\001" +
    "\002\000\034\034\uffbe\045\uffbe\046\uffbe\053\uffbe\055\uffbe" +
    "\057\uffbe\060\uffbe\062\uffbe\063\uffbe\074\uffbe\075\uffbe\077" +
    "\uffbe\100\uffbe\001\002\000\016\034\115\063\116\074\123" +
    "\075\111\077\113\100\122\001\002\000\034\034\uffbd\045" +
    "\uffbd\046\uffbd\053\uffbd\055\uffbd\057\uffbd\060\uffbd\062\uffbd" +
    "\063\uffbd\074\uffbd\075\uffbd\077\uffbd\100\uffbd\001\002\000" +
    "\020\034\115\045\114\063\116\074\123\075\111\077\113" +
    "\100\122\001\002\000\012\045\136\053\uffc9\055\uffc9\060" +
    "\uffc9\001\002\000\016\045\uffc5\046\uffc5\053\uffc5\055\uffc5" +
    "\060\uffc5\062\uffc5\001\002\000\034\034\uffc1\045\uffc1\046" +
    "\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1\062\uffc1\063\uffc1" +
    "\074\uffc1\075\uffc1\077\uffc1\100\uffc1\001\002\000\034\034" +
    "\uffbf\045\uffbf\046\uffbf\053\uffbf\055\uffbf\057\uffbf\060\uffbf" +
    "\062\uffbf\063\uffbf\074\uffbf\075\uffbf\077\uffbf\100\uffbf\001" +
    "\002\000\036\034\uffc3\045\uffc3\046\uffc3\053\uffc3\055\uffc3" +
    "\056\125\057\uffc3\060\uffc3\062\uffc3\063\124\074\uffc3\075" +
    "\uffc3\077\uffc3\100\uffc3\001\002\000\022\034\115\057\127" +
    "\062\uffac\063\116\074\123\075\111\077\113\100\122\001" +
    "\002\000\004\074\126\001\002\000\034\034\uffc2\045\uffc2" +
    "\046\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\062\uffc2\063" +
    "\uffc2\074\uffc2\075\uffc2\077\uffc2\100\uffc2\001\002\000\016" +
    "\034\115\063\116\074\123\075\111\077\113\100\122\001" +
    "\002\000\022\034\115\057\127\062\uffac\063\116\074\123" +
    "\075\111\077\113\100\122\001\002\000\004\062\132\001" +
    "\002\000\072\003\uffaf\005\uffaf\006\uffaf\012\uffaf\013\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\026\uffaf\034" +
    "\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf\053\uffaf" +
    "\054\uffaf\055\uffaf\057\uffaf\060\uffaf\062\uffaf\063\uffaf\074" +
    "\uffaf\075\uffaf\077\uffaf\100\uffaf\001\002\000\004\062\uffae" +
    "\001\002\000\022\034\115\057\127\062\uffac\063\116\074" +
    "\123\075\111\077\113\100\122\001\002\000\004\062\uffad" +
    "\001\002\000\016\034\115\063\116\074\123\075\111\077" +
    "\113\100\122\001\002\000\016\045\uffc6\046\140\053\uffc6" +
    "\055\uffc6\060\uffc6\062\uffc6\001\002\000\016\034\115\063" +
    "\116\074\123\075\111\077\113\100\122\001\002\000\016" +
    "\045\uffc4\046\uffc4\053\uffc4\055\uffc4\060\uffc4\062\uffc4\001" +
    "\002\000\006\045\136\062\143\001\002\000\034\034\uffbc" +
    "\045\uffbc\046\uffbc\053\uffbc\055\uffbc\057\uffbc\060\uffbc\062" +
    "\uffbc\063\uffbc\074\uffbc\075\uffbc\077\uffbc\100\uffbc\001\002" +
    "\000\016\045\uffc7\046\140\053\uffc7\055\uffc7\060\uffc7\062" +
    "\uffc7\001\002\000\012\045\136\053\uffca\055\uffca\060\uffca" +
    "\001\002\000\004\075\153\001\002\000\004\075\150\001" +
    "\002\000\004\052\151\001\002\000\004\004\033\001\002" +
    "\000\044\003\uffcc\005\uffcc\006\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\026\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\054\uffcc\060\uffcc\074\uffcc\001\002\000" +
    "\004\052\154\001\002\000\004\004\033\001\002\000\044" +
    "\003\uffcd\005\uffcd\006\uffcd\012\uffcd\013\uffcd\015\uffcd\016" +
    "\uffcd\017\uffcd\021\uffcd\022\uffcd\026\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\054\uffcd\060\uffcd\074\uffcd\001\002\000\044\003" +
    "\uffd3\005\uffd3\006\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\021\uffd3\022\uffd3\026\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\054\uffd3\060\uffd3\074\uffd3\001\002\000\044\003\uffd1" +
    "\005\uffd1\006\uffd1\012\uffd1\013\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\026\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\054\uffd1\060\uffd1\074\uffd1\001\002\000\044\003\uffcf\005" +
    "\uffcf\006\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\022\uffcf\026\uffcf\047\uffcf\050\uffcf\051\uffcf\054" +
    "\uffcf\060\uffcf\074\uffcf\001\002\000\004\060\162\001\002" +
    "\000\050\002\uffb9\003\uffb9\005\uffb9\006\uffb9\012\uffb9\013" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\026\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\054\uffb9\060\uffb9\067\uffb9\074" +
    "\uffb9\001\002\000\010\062\165\074\166\100\164\001\002" +
    "\000\006\057\204\062\205\001\002\000\004\060\uff99\001" +
    "\002\000\006\057\167\062\170\001\002\000\012\074\173" +
    "\075\171\077\174\100\172\001\002\000\004\060\uffa0\001" +
    "\002\000\004\062\203\001\002\000\004\062\202\001\002" +
    "\000\006\056\177\062\176\001\002\000\004\062\175\001" +
    "\002\000\004\060\uff9d\001\002\000\004\060\uff9f\001\002" +
    "\000\004\074\200\001\002\000\004\062\201\001\002\000" +
    "\004\060\uff9b\001\002\000\004\060\uff9c\001\002\000\004" +
    "\060\uff9e\001\002\000\012\074\210\075\206\077\211\100" +
    "\207\001\002\000\004\060\uffa1\001\002\000\004\062\220" +
    "\001\002\000\004\062\217\001\002\000\006\056\214\062" +
    "\213\001\002\000\004\062\212\001\002\000\004\060\uffa4" +
    "\001\002\000\004\060\uffa5\001\002\000\004\074\215\001" +
    "\002\000\004\062\216\001\002\000\004\060\uff9a\001\002" +
    "\000\004\060\uffa3\001\002\000\004\060\uffa2\001\002\000" +
    "\016\020\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\062\uffe0" +
    "\001\002\000\012\063\222\074\064\075\063\077\065\001" +
    "\002\000\016\020\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf" +
    "\062\uffdf\001\002\000\014\020\227\037\230\040\231\041" +
    "\232\042\226\001\002\000\012\063\222\074\064\075\063" +
    "\077\065\001\002\000\012\063\uffe4\074\uffe4\075\uffe4\077" +
    "\uffe4\001\002\000\024\003\045\004\233\012\034\015\042" +
    "\016\041\047\035\050\052\051\055\074\047\001\002\000" +
    "\012\063\uffe5\074\uffe5\075\uffe5\077\uffe5\001\002\000\012" +
    "\063\uffe3\074\uffe3\075\uffe3\077\uffe3\001\002\000\012\063" +
    "\uffe2\074\uffe2\075\uffe2\077\uffe2\001\002\000\022\003\045" +
    "\012\034\015\042\016\041\047\035\050\052\051\055\074" +
    "\047\001\002\000\044\003\ufff2\005\ufff2\006\ufff2\012\ufff2" +
    "\013\ufff2\015\ufff2\016\ufff2\017\243\021\ufff2\022\ufff2\026" +
    "\ufff2\047\ufff2\050\ufff2\051\ufff2\054\ufff2\060\ufff2\074\ufff2" +
    "\001\002\000\044\003\ufff0\005\ufff0\006\ufff0\012\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\026\ufff0" +
    "\047\ufff0\050\ufff0\051\ufff0\054\ufff0\060\ufff0\074\ufff0\001" +
    "\002\000\004\017\237\001\002\000\024\003\045\004\033" +
    "\012\034\015\042\016\041\047\035\050\052\051\055\074" +
    "\047\001\002\000\004\060\242\001\002\000\044\003\uffef" +
    "\005\uffef\006\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017" +
    "\uffef\021\uffef\022\uffef\026\uffef\047\uffef\050\uffef\051\uffef" +
    "\054\uffef\060\uffef\074\uffef\001\002\000\044\003\uffed\005" +
    "\uffed\006\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed" +
    "\021\uffed\022\uffed\026\uffed\047\uffed\050\uffed\051\uffed\054" +
    "\uffed\060\uffed\074\uffed\001\002\000\024\003\045\004\033" +
    "\012\034\015\042\016\041\047\035\050\052\051\055\074" +
    "\047\001\002\000\044\003\ufff1\005\ufff1\006\ufff1\012\ufff1" +
    "\013\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\026" +
    "\ufff1\047\ufff1\050\ufff1\051\ufff1\054\ufff1\060\ufff1\074\ufff1" +
    "\001\002\000\044\003\uffee\005\uffee\006\uffee\012\uffee\013" +
    "\uffee\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee\026\uffee" +
    "\047\uffee\050\uffee\051\uffee\054\uffee\060\uffee\074\uffee\001" +
    "\002\000\024\003\045\005\247\012\034\015\042\016\041" +
    "\047\035\050\052\051\055\074\047\001\002\000\006\017" +
    "\uffb8\060\162\001\002\000\016\020\uffe1\037\230\040\231" +
    "\041\232\042\226\062\uffe1\001\002\000\014\037\230\040" +
    "\231\041\232\042\226\062\252\001\002\000\016\020\uffde" +
    "\037\uffde\040\uffde\041\uffde\042\uffde\062\uffde\001\002\000" +
    "\004\052\254\001\002\000\004\004\033\001\002\000\044" +
    "\003\uffce\005\uffce\006\uffce\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\022\uffce\026\uffce\047\uffce\050\uffce" +
    "\051\uffce\054\uffce\060\uffce\074\uffce\001\002\000\004\074" +
    "\257\001\002\000\006\056\261\062\260\001\002\000\004" +
    "\060\uffa7\001\002\000\004\074\262\001\002\000\004\062" +
    "\263\001\002\000\004\060\uffa6\001\002\000\006\036\267" +
    "\057\266\001\002\000\010\036\ufff7\057\ufff7\062\ufff7\001" +
    "\002\000\012\021\025\022\024\026\017\074\273\001\002" +
    "\000\010\021\025\022\024\026\017\001\002\000\004\060" +
    "\271\001\002\000\006\004\uffa8\024\027\001\002\000\004" +
    "\004\uffa9\001\002\000\014\036\ufff6\057\ufff6\060\ufff6\062" +
    "\ufff6\074\ufff6\001\002\000\004\074\275\001\002\000\014" +
    "\036\ufff5\057\ufff5\060\ufff5\062\ufff5\074\ufff5\001\002\000" +
    "\004\002\001\001\002\000\026\002\ufffd\003\ufffd\012\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\047\ufffd\050\ufffd\051\ufffd\074" +
    "\ufffd\001\002\000\026\002\ufffc\003\ufffc\012\ufffc\013\ufffc" +
    "\015\ufffc\016\ufffc\047\ufffc\050\ufffc\051\ufffc\074\ufffc\001" +
    "\002\000\010\057\266\060\330\074\104\001\002\000\012" +
    "\057\ufff7\060\ufff7\063\303\074\ufff7\001\002\000\016\021" +
    "\025\022\024\024\304\026\017\062\uffb0\074\265\001\002" +
    "\000\004\074\265\001\002\000\004\062\315\001\002\000" +
    "\006\036\311\057\266\001\002\000\004\074\265\001\002" +
    "\000\006\057\266\062\uffb4\001\002\000\010\021\025\022" +
    "\024\026\017\001\002\000\004\060\313\001\002\000\016" +
    "\021\025\022\024\024\304\026\017\062\uffb0\074\265\001" +
    "\002\000\004\062\uffb3\001\002\000\006\060\317\066\316" +
    "\001\002\000\010\004\uffa8\024\027\067\uffaa\001\002\000" +
    "\036\002\uffb6\003\uffb6\006\uffb6\012\uffb6\013\uffb6\015\uffb6" +
    "\016\uffb6\021\uffb6\022\uffb6\026\uffb6\047\uffb6\050\uffb6\051" +
    "\uffb6\074\uffb6\001\002\000\004\067\321\001\002\000\036" +
    "\002\uffb5\003\uffb5\006\uffb5\012\uffb5\013\uffb5\015\uffb5\016" +
    "\uffb5\021\uffb5\022\uffb5\026\uffb5\047\uffb5\050\uffb5\051\uffb5" +
    "\074\uffb5\001\002\000\006\036\323\057\266\001\002\000" +
    "\010\021\025\022\024\026\017\001\002\000\006\060\325" +
    "\062\uffb1\001\002\000\016\021\025\022\024\024\304\026" +
    "\017\062\uffb0\074\265\001\002\000\004\062\uffb2\001\002" +
    "\000\004\060\331\001\002\000\036\002\ufff4\003\ufff4\006" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4" +
    "\026\ufff4\047\ufff4\050\ufff4\051\ufff4\074\ufff4\001\002\000" +
    "\036\002\ufff3\003\ufff3\006\ufff3\012\ufff3\013\ufff3\015\ufff3" +
    "\016\ufff3\021\ufff3\022\ufff3\026\ufff3\047\ufff3\050\ufff3\051" +
    "\ufff3\074\ufff3\001\002\000\004\063\333\001\002\000\006" +
    "\062\335\074\265\001\002\000\006\057\266\062\337\001" +
    "\002\000\004\066\336\001\002\000\036\002\uffbb\003\uffbb" +
    "\006\uffbb\012\uffbb\013\uffbb\015\uffbb\016\uffbb\021\uffbb\022" +
    "\uffbb\026\uffbb\047\uffbb\050\uffbb\051\uffbb\074\uffbb\001\002" +
    "\000\004\066\340\001\002\000\036\002\uffba\003\uffba\006" +
    "\uffba\012\uffba\013\uffba\015\uffba\016\uffba\021\uffba\022\uffba" +
    "\026\uffba\047\uffba\050\uffba\051\uffba\074\uffba\001\002\000" +
    "\034\003\045\006\ufffe\012\034\013\ufffe\015\042\016\041" +
    "\021\ufffe\022\ufffe\026\ufffe\047\035\050\052\051\055\074" +
    "\047\001\002\000\014\006\015\013\ufffa\021\004\022\007" +
    "\026\017\001\002\000\004\013\344\001\002\000\004\060" +
    "\345\001\002\000\004\067\346\001\002\000\014\002\ufffa" +
    "\006\015\021\004\022\007\026\017\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\022\002\012\003\013\004\011\010\015\023" +
    "\007\024\005\031\010\033\004\001\001\000\002\001\001" +
    "\000\032\006\341\012\035\014\042\015\036\016\037\017" +
    "\052\020\050\021\053\022\045\025\055\034\340\045\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\300\001\001\000\016\004\011\010\015\023\007\024\005" +
    "\031\010\033\277\001\001\000\016\004\011\010\015\023" +
    "\007\024\005\031\010\033\276\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\011\010" +
    "\015\023\007\024\005\031\010\033\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\027\011\030\001\001\000\004\040" +
    "\263\001\001\000\004\036\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\035\014\042\015\036\016" +
    "\037\017\052\020\050\021\053\022\045\025\055\034\043" +
    "\045\047\001\001\000\002\001\001\000\004\013\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\222\043\223\044\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\035\014\060\015\036" +
    "\016\037\017\052\020\050\021\053\022\045\025\055\045" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\035\014\042\015\036\016\037\017\052\020\050\021" +
    "\053\022\045\025\055\034\057\045\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\012\035\014\060\015" +
    "\036\016\037\017\052\020\050\021\053\022\045\025\055" +
    "\045\047\001\001\000\002\001\001\000\004\013\065\001" +
    "\001\000\004\042\077\001\001\000\004\042\073\001\001" +
    "\000\004\042\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\111\027\117\030\144\045\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\111\027" +
    "\117\030\116\045\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\143\027\117\045" +
    "\120\001\001\000\002\001\001\000\012\026\111\027\117" +
    "\030\141\045\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\127\045\120\046\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\133\045\120\001\001" +
    "\000\010\027\127\045\120\046\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\027\127" +
    "\045\120\046\134\001\001\000\002\001\001\000\010\026" +
    "\136\027\117\045\120\001\001\000\002\001\001\000\006" +
    "\027\140\045\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\222\043\250\044\220\001\001\000\002\001\001\000" +
    "\004\041\224\001\001\000\010\013\222\043\247\044\220" +
    "\001\001\000\002\001\001\000\032\012\035\014\233\015" +
    "\036\016\037\017\052\020\050\021\053\022\045\025\055" +
    "\036\234\037\235\045\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\035\014\042" +
    "\015\036\016\037\017\052\020\050\021\053\022\045\025" +
    "\055\034\245\045\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\012\035\014\237\015" +
    "\036\016\037\017\052\020\050\021\053\022\045\025\055" +
    "\036\240\045\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\035\014\243\015\036" +
    "\016\037\017\052\020\050\021\053\022\045\025\055\036" +
    "\244\045\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\012\035\014\060\015\036\016\037\017\052\020" +
    "\050\021\053\022\045\025\055\045\047\001\001\000\002" +
    "\001\001\000\004\041\224\001\001\000\004\041\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\273\001\001\000\004\023\267\001\001\000\002" +
    "\001\001\000\004\005\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\326\001\001\000\002\001\001\000\010\023\306\032\304" +
    "\040\305\001\001\000\004\040\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\307\001\001\000\002" +
    "\001\001\000\004\023\311\001\001\000\002\001\001\000" +
    "\010\023\306\032\313\040\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\027\011\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\323\001\001\000\002\001\001\000" +
    "\010\023\306\032\325\040\305\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\035\014\060\015\036\016\037" +
    "\017\052\020\050\021\053\022\045\025\055\045\047\001" +
    "\001\000\016\004\011\010\015\023\007\024\005\031\010" +
    "\033\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\011\010\015\023\007\024\005" +
    "\031\010\033\346\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public static Nodo padre;
        public int cont  = 0;
        public String ambitoActual = "%Global";

        //manejo de ambitos
        ArrayList<ElementoTS> elementosNoEncontrado = new ArrayList<ElementoTS>();
        ArrayList<ElementoTS> elementosEncontrado = new ArrayList<ElementoTS>();
        ArrayList<Nodo> CheckNodes = new ArrayList<Nodo>();

        public void buscarEnStandby(ElementoTS funcion){
                        for(ElementoTS elemStandby : elementosStandby){
                                boolean found = false;
                                for(ElementoTS elemFuncion : funcion.getParametros()){
                                        if( elemStandby.getID().equals(elemFuncion.getID()) ){
                                                found = true;
                                        }
                                }
                                if(found){

                                                elemStandby.setAmbito(funcion.getAmbito());
                                                elementosEncontrado.add(elemStandby);


                                } else{


                                               elementosNoEncontrado.add(elemStandby);

                                }

                        }
        }



        //deteccion y recuperacion de errores
        public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();

        public static ArrayList<ElementoTS> ArregloSimbolos = new ArrayList<ElementoTS>();
        public static ArrayList<ElementoTS> ArregloFunciones = new ArrayList<ElementoTS>(); //arreglo para funciones

        public static ArrayList<ElementoTS> elementosStandby = new ArrayList<ElementoTS>();

        public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        report_expected_token_ids();
        //System.out.println(ErroresSintacticos);
        expected_token_ids();
        }

        /*public void unrecovered_syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        }*/

        //gen deberia retornar un string o una lista? Depende del contexto en el que se use

        public static boolean BuscaTipo(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID()) &&
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean buscarExistenciaID(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID())) {
                                return true;
                        }
                }
                return false;
        }


           public static boolean BuscaTipoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(element.getID().equals(elemento.getID()) &&
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean BuscaAmbito(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getAmbito().equals(elemento.getAmbito())){
                                return true;
                        }
                }
                return false;
        }

        public static boolean BuscaAmbitoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(elemento.getAmbito()))){
                                return true;
                        }
                }
                return false;
        }

        public static String returnTipo(String id){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnTipoFuncion(String id){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getID().equals(id))) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnAmbitoFuncion(String ambito){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(ambito))) {
                                return element.getAmbito();
                        }
                }
                return "Error";
        }

        public static ElementoTS returnElementoTS(String ID, String tipo){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(ID) &&
                                element.getTipo().equals(tipo)) {
                                return element;
                        }
                }
                return null;
        }

        public static String returnTipoRecord(String id){
                String retorno = "";
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {


                                switch(element.getTipo()){
                                        case "STRING":
                                        case "INTEGER":
                                        case "REAL":
                                        case "BOOLEAN":
                                        case "RECORD":
                                                break;
                                        default:
                                                retorno = element.getTipo();
                                                break;
                                }
                                break;
                        }
                }
                if(retorno.equals("")){
                        return "Error";
                } else{
                        return retorno;
                }
        }

        public static void printRecord(ElementoTS record){
                for(ElementoTS element : record.getRecordVars()) {
                        System.out.println("ID: "  +  element.getID() + ", Tipo: " + element.getTipo() + ", Ambito: " + element.getAmbito());
                }
        }

        public static boolean checkRecordVar(ElementoTS record, ElementoTS elemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(elemento.getID()) &&
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean checkRecordVarConID(ElementoTS record, String IDElemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(IDElemento)) {
                                return false;
                        }
                }
                return true;
        }

        public static String returnTipoVariableRecord(ElementoTS record, String id){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static ElementoTS recursivaRecord(ElementoTS tipoRecord, Nodo nodo){


                if(nodo.getHijos().get(2).getValor() == "vacio"){ //fin de recursion
                        //agregar los ids que puedan faltar (mismo codigo de abajo)
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }

                                }



                        }

                        return tipoRecord;
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }

                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));


                        }
                }

        }

        public static ElementoTS convertirVariableARecord(ElementoTS elemento, String ID){
                //primero buscar el tipo record
                ElementoTS record  = new ElementoTS();
                for(ElementoTS element : ArregloSimbolos){
                        if(element.getID().equals(ID) && element.getTipo().equals("RECORD")){
                                record = element;
                                break;
                        }
                }

                //convertir el elemento mandado a Record
                elemento.setRecordVars(record.getRecordVars());

                return elemento;
        }

        public static ArrayList<ElementoTS> recorrerDeclaracionesFuncion(ArrayList<ElementoTS> arreglo, Nodo nodo, String ambito){

                int tam = 0;

                try{
                        tam = nodo.getHijos().get(2).getHijos().size();
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){

                }

                if(tam == 0){
                        /*llego al fondo de la  recursion, osea no existe un tercer nodo en el padre, entonces
                        significa que es el final de la recursion. */
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //en caso que solo sea un ID que se esta declarando
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                return arreglo;

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }

                                }


                        }

                        return arreglo;

                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //revisar si el nodo de la mas izquierda tiene NULL o no
                                //si tiene NULL significa que tiene una lista de IDs.
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }

                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);

                        }
                }
        }

       public static boolean revisarArreglo(ElementoTS element, ArrayList<ElementoTS> arreglo){
               //esta funcion simplemente revisa que el arreglo mandado contenga un elemento mandado
               //si el arreglo esta vacio, regresar verdadero para que el elemento se agregue
               //si no, recorrer en busca del elemento en el arreglo. es falso cuando si hay un match

               if(arreglo.size()  == 0){
                       return true;
               } else{
                    for(ElementoTS elem : arreglo){
                        if(element.getID().equals(elem.getID())){
                                return false;

                        }
                    }
                    return true;
               }
       }



       public void revisarArregloStanby_Global(){ //al final revisa que variables extras quedan que no se encontraron
                elementosNoEncontrado.clear();
                elementosEncontrado.clear();

                for(ElementoTS elementoStanby : elementosStandby){

                        boolean found =  false;
                        for(ElementoTS elementoTablaSimbolo : ArregloSimbolos){
                                if( elementoStanby.getID().equals(elementoTablaSimbolo.getID()) ){
                                        found = true;
                                }
                        }

                        if(found){
                                        elementosEncontrado.add(elementoStanby);
                        } else{
                                        elementosNoEncontrado.add(elementoStanby);
                        }
                }

       }

//        public void addErrores(Nodo node){
//                for(Nodo nodoFOR: node.getHijos()){
//                        addErrores(nodoFOR);
//                        if(nodoFOR.getEtiqueta().equals("expresion_matematica") &&
//                        (nodoFOR.getValor().equals("Error") || nodoFOR.getValor().equals("Error de Tipos.")) ){
//                                int size = nodoFOR.getHijos().size();

//                                switch(size){
//                                        case 1:{
//                                                Nodo nodoTermino = nodoFOR.getHijos().get(0);
//                                                Nodo hijoTermino = nodoTermino.getHijos().get(0);
//                                                Nodo hijoFinal = hijoTermino.getHijos().get(0);

//                                                if(hijoTermino.getEtiqueta().equals("expresion_matematica")){
//                                                        addErrores(hijoFinal);
//                                                } else{
//                                                        CheckNodes.add(nodoFOR);
//                                                        //hay que revisar que ese elmento existe en algun lado.

//                                                }



//                                                break;
//                                        }
//                                        case 3:{
//                                                break;
//                                        }
//                                }
//                        }
//                }
//        }

//        public void revisarErrorExprMatematica(Nodo nodo, ElementoTS funcion){
//                System.out.println("Size: " + nodo.getHijos().size());
//                if(nodo.getHijos().size() == 3){

//                }
//        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root ::= encabezado 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("root");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo) hijo1);

        parser.padre = (Nodo) nodo;

        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= declaraciones_principales cuerpo_main declaraciones_principales RETURN PUNTOCOMA CURLYDER declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque principal, bloque = 0

                    //NODO PADRE
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("encabezado");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    //TERMINALES
                    //AGREGAR NO TERMINALES
                    //nodo.addHijos(nProcedure);
                    //nodo.addHijos(nid);
                    nodo.addHijos((Nodo)hijo1);
                    //nodo.addHijos(nIS);
                    nodo.addHijos((Nodo)hijo2);
                    nodo.addHijos((Nodo)hijo3);
                    nodo.addHijos((Nodo)hijo4);


                //     System.out.println("Size del arreglo global: " + elementosStandby.size());
                //     //RECORRER ESE ARREGLO EN BUSQUEDA DE VARIABLES QUE NO SE ENCONTRARON.

                //         revisarArregloStanby_Global();

                //         if(elementosEncontrado.size() > 0){ //imprimir los que encontro
                //                 for(ElementoTS elem : elementosEncontrado){
                //                         System.out.println("ID: "  + elem.getID() + ", Ambito: " + elem.getAmbito());
                //                 }
                //                         elementosEncontrado.clear();
                //         }

                //         if(elementosNoEncontrado.size() > 0){ //imrpimir los que no encontro
                //         //error
                //                 for(ElementoTS elem : elementosNoEncontrado){
                //                         System.out.println("No se encontro el ID declarado: "  + elem.getID() + " en el Ambito: " + elem.getAmbito());
                //                 }

                //                 elementosNoEncontrado.clear();
                //         }




                    RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_main ::= listaProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("cuerpo_main");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    nodo.addHijos((Nodo)hijo1);

                    RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_principales ::= inicioProgram declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones_principales ::= declaracionesVAR declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor(" : ");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones_principales ::= inicioFunction declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor("FUNCTION");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones_principales ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaProposiciones ::= proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijito1 = ((Nodo)hijo1);
                nodo.setValor(hijito1.getValor());

                for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                }

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaProposiciones ::= listaProposiciones proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaProposiciones");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaIdentificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaIdentificadores ::= listaIdentificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t2.toString());
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();
                        nid2.setEtiqueta("ID");
                        nid2.setValor(hijo.getValor());
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }


                nodo.addHijos(nid);

                RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaIdentificadores ::= listaIdentificadores COMA tipovar IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t2.toString());
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();
                        nid2.setEtiqueta("ID");
                        nid2.setValor(hijo.getValor());
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }


                nodo.addHijos(nid);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesVAR ::= tipovar listaIdentificadores PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque en 0

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING":
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                //System.out.println("Esto es: " + hijo.getValor());

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global");
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo

                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global");
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }



                                                }
                                }
                                break;

                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesVAR ::= tipovar listaIdentificadores asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

           //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING":
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global");
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);
                                                        System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo

                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global");
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);
                                                                System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }



                                                }
                                }
                                break;

                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicionIF ::= IF expresion THEN proposicion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicionIF ::= IF expresion THEN proposicion ELSE proposicion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicionIF ::= IF expresion THEN cuerpoProposiciones 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicionIF ::= IF expresion THEN cuerpoProposiciones_sinpuntocoma ELSE cuerpoProposiciones 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		


                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicionIF ::= IF expresion THEN proposicion ELSE cuerpoProposiciones 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicionIF ::= IF expresion THEN cuerpoProposiciones_sinpuntocoma ELSE proposicion PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipomain ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("INT");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipomain ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovar ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipovar ::= CHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("CHAR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipovar ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_rel_completos ::= EQUAL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString());
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_rel_completos ::= OPREL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString());
                }

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_condicional ::= AND 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nAND = new Nodo();
                nAND.setEtiqueta("AND");
                nAND.setValor(t1.toString());
                nAND.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString());
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_condicional ::= NOT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nNOT = new Nodo();
                nNOT.setEtiqueta("NOT");
                nNOT.setValor(t1.toString());
                nNOT.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString());
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // op_condicional ::= XOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nXOR = new Nodo();
                nXOR.setEtiqueta("XOR");
                nXOR.setValor(t1.toString());
                nXOR.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString());
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op_condicional ::= OR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nOR = new Nodo();
                nOR.setEtiqueta("OR");
                nOR.setValor(t1.toString());
                nOR.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString());
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion op_condicional expresion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion_parentesis 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

        //        for(int i = 0; i < hijo.getHijos().size() ; i++){
        //                 nodo.addHijos(hijo.getHijos().get(i));
        //         }
                nodo.addHijos(hijo);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= condicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion_parentesis ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_parentesis");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES

                nodo.addHijos(hijo);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_parentesis",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= IDENTIFICADOR op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");

                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nNUM = new Nodo();
                nNUM.setEtiqueta("INTEGER");
                nNUM.setValor(t2.toString());
                nNUM.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nNUM);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= IDENTIFICADOR op_rel_completos CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("CHAR");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= NUM op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("INTEGER");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("INTEGER");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // condicion ::= CONSTCHAR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("CHAR");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // condicion ::= IDENTIFICADOR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proposicion ::= condicionIF 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor("IF");

                nodo.setId(parser.cont);
                parser.cont++;

                // for(int i = 0; i < hijo.getHijos().size() ; i++){
                //         nodo.addHijos(hijo.getHijos().get(i));
                // }

                nodo.addHijos(hijo);


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // proposicion ::= cicloWHILE 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("WHILE");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                //TERMINALES

                //AGREGAR NO TERMINALES

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // proposicion ::= cicloFOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("FOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // proposicion ::= cicloREPEAT 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("REPEAT");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // proposicion ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // proposicion ::= write PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // proposicion ::= printf PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // proposicion ::= read PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // proposicion ::= asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // proposicion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cicloWHILE ::= WHILE condicion DO cuerpoProposiciones 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloWhile");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cicloFOR ::= FOR asignacionVAR TO NUM DO cuerpoProposiciones 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cicloFOR ::= FOR asignacionVAR DOWNTO NUM DO cuerpoProposiciones 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cicloREPEAT ::= REPEAT listaProposiciones UNTIL condicion PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloREPEAT");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloREPEAT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignacionVAR ::= IDENTIFICADOR EQUAL expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor("=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                //comprobacion de tipos
                //revisar que T1 sea el mismo tipo de expresion_matematica
                String tipo = returnTipo(t1.toString());
                // String tipo1 = returnAmbitoFuncion(t1.toString());
                // if(tipo.equals("Error")){

                //         //retorna error si no la encontro, entonces subir el valor para comprobar si existe en
                //         //la gramatica de FUNCTION.
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         element.setAmbito("Global");
                //         elementosStandby.add(element);



                // }else{
                //         if(hijo.getError()){ //si expr_mat es un error
                //                 System.out.println("Error: "  + hijo.getMensaje());
                //                 hijo.setValor("Error de Tipos.");
                //         }else{ //si todo esta bien, revisar si son iguales.
                //                 if(tipo.equals(hijo.getValor()) ||
                //                 (tipo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //                 }else{
                //                         System.out.println("Error: " + "El tipo de " +
                //                         t1.toString()  + " es diferente que el valor asignado. Se esperaba " + tipo);
                //                 }
                //         }
                // }
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignacionVAR ::= IDENTIFICADOR DOT IDENTIFICADOR ASIGNACION expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor(":=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                Nodo hijo = ((Nodo)hijo1);


                //ahora a revisar si ese id.id realmente existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());

                // String tipoAtributo = ""; //es el tipo del atributo id.x (tipo de x)

                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);

                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 tipoAtributo = returnTipoVariableRecord(elemento, t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //                 tipoAtributo = "Error";
                //         }

                // }

                //comprobacion de otros tipos


                // if(hijo.getError()){ //si expr_mat es un error
                //         System.out.println("Error: "  + hijo.getMensaje());
                //         hijo.setValor("Error de Tipos.");
                // } else{ //si todo esta bien, revisar si son iguales.
                //         if(tipoAtributo.equals(hijo.getValor()) ||
                //         (tipoAtributo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //         } else{
                //                         System.out.println("Error: " + "El tipo de " +
                //                         t2.toString()  + " es diferente que el valor asignado. Se esperaba " + tipoAtributo + " y se encontro un " + hijo.getValor());
                //         }
                // }

                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion_matematica ::= termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //por ejemplo 2x+a, el termino es 2x y a Y los factores serian "2 y x"

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                nodo.addHijos((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                if(hijo.getError()){ //subir error y mensaje
                        nodo.setError(true);
                        hijo.setValor("Error de tipos.");
                        nodo.setMensaje(hijo.getMensaje());
                        CheckNodes.add(nodo);
                }

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion_matematica ::= OPSUM termino 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //en que caso se usa esto?

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion_matematica ::= expresion_matematica OPSUM termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                Nodo hijoMAT = ((Nodo)hijo1);
                Nodo hijoTER = ((Nodo)hijo2);

                // if(!(hijoMAT.getValor().equals(hijoTER.getValor())) ){ //si los valores no son iguales, hay inconsistencia de tipos
                //         nodo.setError(true);
                //         if(hijoMAT.getError() || hijoTER.getError()){ //revisar si alguno de los hijos tiene errores
                //                 nodo.setMensaje(hijoMAT.getMensaje());  //asignar el error de la izquierda
                //                 nodo.setValor("Error de Tipos");

                //                 // CheckNodes.add(nodo);

                //                 // // //comprobacion de ambito y de tipos:
                //                 // // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         }
                //         else{ //si todo esta bien, asignar error de inconsistencia a nodo padre
                //                 nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //         "Se esta operando un tipo " + hijoMAT.getValor() + " y un tipo " + hijoTER.getValor());
                //                 nodo.setValor("Error de Tipos.");

                //                 // //comprobacion de ambito y de tipos:
                //                 // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         }

                // } else{ //setear el valor si todo esta bien
                //         nodo.setValor(hijoMAT.getValor());
                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // termino ::= factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //este

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("termino");

                Nodo hijo = ((Nodo)hijo1);

                // if(hijo.getEtiqueta().equals("expresion_matematica")){
                //         nodo.setValor(hijo.getValor());
                // } else{
                //         nodo.setValor(hijo.getEtiqueta());
                // }

                // if(hijo.getError()){ //quitar valor y subir mensaje
                //         nodo.setMensaje(hijo.getMensaje());
                //         hijo.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(hijo);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // termino ::= termino OPMULT factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("termino");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo opmult = new Nodo();
                opmult.setEtiqueta("OPMULT");
                opmult.setValor(t1.toString());
                opmult.setId(parser.cont);
                parser.cont++;

                // Nodo hijoTER = ((Nodo)hijo1);
                // Nodo hijoFAC = ((Nodo)hijo2);

                // if(hijoFAC.getEtiqueta().equals("expresion_matematica")){
                //         if(!(hijoTER.getValor().equals(hijoFAC.getValor())) ){
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 }
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // } else{
                //         if(!(hijoTER.getValor().equals(hijoFAC.getEtiqueta())) ){

                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 }
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)opmult);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                //buscar en TS ese Identificador y retornar tipo
                // String tipo = returnTipo(t1.toString());

                // if(tipo.equals("Error")){

                //         //no lo encontro globalmente, ahora revisar en la funcion

                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         elementosStandby.add(element);

                //         nodo.setEtiqueta("Error");
                // }else{
                //         if(tipo == "INTEGER"){
                //                 tipo = "NUM";
                //         }
                //         nodo.setEtiqueta(tipo);
                //         nodo.setValor(t1.toString());
                // }

                nodo.addHijos(nid);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= IDENTIFICADOR DOT IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                //buscar si esa variable record existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());



                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);

                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 String tipo2 = returnTipoVariableRecord(elemento, t2.toString());
                //                 nodo.setEtiqueta(tipo2);
                //                 nodo.setValor(t1.toString() + "." + t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //         }

                // }


                nodo.addHijos(nid);
                nodo.addHijos(nid2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("llamada_procedure_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nod = ((Nodo)hijo1);

                for(Nodo node : nod.getHijos()){
                        nodo.addHijos(node);
                }

                // nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INTEGER");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= CONSTSTRING 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STRING");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CHAR");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= OPBOOL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPBOOL");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= PARIZQ expresion_matematica PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");


                Nodo hijito1 = ((Nodo)hijo1);

                nodo.setValor(hijito1.getValor());

                // if(hijito1.getError()){
                //         nodo.setError(true);
                //         hijito1.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;


                nodo.addHijos(hijito1);

                // for(int i = 0; i < hijito1.getHijos().size(); i++){
                //        nodo.addHijos(hijito1.getHijos().get(i));
                // }
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicioProgram ::= tipomain MAIN PARIZQ PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioProgram");
              nodo.setId(parser.cont);
              //nodo.setValor(t1.toString());
              parser.cont++;

              Nodo tipo = ((Nodo)hijo1);

              //TERMINALES
              nodo.addHijos(tipo);
              //nodo.setValor(tipo.getValor());

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicioProgram ::= tipomain MAIN PARIZQ listaIdentificadores PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("NombreProgram");
              nodo.setValor(t2.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              nodo.addHijos((Nodo)hijo1);
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpoProposiciones ::= BEGIN listaProposiciones END PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoProposiciones");
              nodo.setValor("listaProposiciones");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo hijo = ((Nodo)hijo1);


              if(hijo.getHijos().size() > 2){
                        for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                        }
              } else{
                      nodo.setEtiqueta(hijo.getEtiqueta());
                      nodo.setValor(hijo.getValor());
                      for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                      }
              }

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProposiciones",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpoProposiciones_sinpuntocoma ::= BEGIN listaProposiciones END 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoProposiciones_sinpuntocoma");
              nodo.setId(parser.cont);
              parser.cont++;

              nodo.addHijos((Nodo)hijo1);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProposiciones_sinpuntocoma",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // inicioFunction ::= FUNCTION IDENTIFICADOR OPDECLARACION tipovar PUNTOCOMA cuerpoprocedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //Si encuentra esto, es un error.
              //No pueden haber funciones con cero parametros:

              //se agrega al arreglo para que el comprobador de tipos/ambito trate esta funcion como un procedure.

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString());

              ambitoActual = t2.toString();

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){

                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                                break;
                        }
                }


                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{

                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              System.out.println("La funcion " +  t2.toString() + " necesita parametros declarados.");

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //este segundo permite la declaracion de funciones

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString());

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0;


                try{
                        tam = hijo.getHijos().get(2).getHijos().size();
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){

                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString());

                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString());
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }
                                }
                        }

                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva

                                }
                }


                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){

                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;
                        }
                }


                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{

                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              //nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER CURLYIZQ cuerpoprocedure_funcion CURLYDER 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString());

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0;


                try{
                        tam = hijo.getHijos().get(2).getHijos().size();
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){

                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString());

                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString());
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }
                                }
                        }

                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva

                                }
                }


                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){

                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;
                        }
                }


                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{

                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionesVAR_procedure_funcion ::= tipovar listaIdentificadores 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR_pro");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                int size = hijo.getHijos().size();

                if(hijo.getValor() != null){
                        if(size == 0){ //si es solo unico, solo un ID
                                ElementoTS elemento = new ElementoTS();
                                elemento.setID(hijo.getValor());
                                System.out.println("ID del elemento: " + elemento.getID());
                                elemento.setTipo(tipo);
                                elemento.setAmbito("");
                                        if(BuscaTipoFuncion(elemento)){
                                                ArregloFunciones.add(elemento);
                                                System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                        } else {  //error, ya existe ese simbolo
                                                System.out.println("Ya existe ese elemento con ese id, tipo y ambito");
                                        }
                        }

                } else{ //es null cuando son varios
                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo

                                        ElementoTS elemento = new ElementoTS();
                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                        elemento.setTipo(tipo);
                                        elemento.setAmbito("");
                                                if(BuscaTipoFuncion(elemento)){
                                                        ArregloFunciones.add(elemento);
                                                        System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                } else {  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo() + " y con el ambito: " + elemento.getAmbito());
                                                }
                        }
                }

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // declaracionesVAR_procedure_funcion ::= listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		


              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionesVAR_procedure_funcion ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // llamada_procedure_funcion ::= IDENTIFICADOR PARIZQ lista_parametros PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("llamada_procedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t1.toString());
              nid.setId(parser.cont);
              parser.cont+=1;//id, parizq, parder

              nodo.addHijos(nid);

              Nodo hijito1 = ((Nodo)hijo1);

              for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));

                      }
              //nodo.setValor("(" + hijito1.getValor() + ")");

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_procedure_funcion",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lista_parametros ::= factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("lista_parametros");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

                // Nodo nid = new Nodo();
                // nid.setEtiqueta("NUM");
                // nid.setValor(t1.toString());
                // nid.setId(parser.cont);
                // parser.cont+=1;

                Nodo node1 = ((Nodo)hijo1);

                Nodo node = ((Nodo)hijo2);


                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));

                }

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lista_parametros ::= COMA factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("lista_parametros");
                nodo.setId(parser.cont);
                parser.cont++;


                Nodo node1 = ((Nodo)hijo1);
                Nodo node = ((Nodo)hijo2);



                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));

                }

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lista_parametros ::= 
            {
              Object RESULT =null;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpoprocedure_funcion ::= declaracionesVARAdentroFunctionProcedure cuerpoProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoprocedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo node = ((Nodo)hijo1);

              if(node != null){
                nodo.addHijos((Nodo)hijo1);

              }

              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoprocedure_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpoprocedure_funcion ::= 
            {
              Object RESULT =null;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoprocedure_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // declaracionesVARAdentroFunctionProcedure ::= VAR listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVARAdentroFunctionProcedure 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVARAdentroFunctionProcedure");
              nodo.setId(parser.cont);
              parser.cont++;

               nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);

              RESULT = nodo;

 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // declaracionesVARAdentroFunctionProcedure ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // read ::= READ PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nid);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // read ::= READ PARIZQ IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              Nodo nid2 = new Nodo();
              nid2.setEtiqueta("ID");
              nid2.setValor(t4.toString());
              nid2.setId(parser.cont);
              parser.cont+=1;


              nodo.addHijos(nid);
              nodo.addHijos(nid2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // printf ::= PRINTF PARIZQ CONSTSTRING COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t5.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nid);

              String tipoId = returnTipo(t5.toString());
              int index = t3.toString().indexOf("%d");
              if (index != -1 && tipoId != "INTEGER") {
                System.out.println("se esperaba un INTEGER [linea: " + t5right + ", columna: " + t5left + "]");
              }
              index = t3.toString().indexOf("%c");
              if (index != -1 && tipoId != "CHAR") {
                System.out.println("se esperaba un CHAR [linea: " + t5right + ", columna: " + t5left + "]");
              }
              index = t3.toString().indexOf("%p");
              if (index != -1 && tipoId != "POINTER") {
                System.out.println("se esperaba un POINTER [linea: " + t5right + ", columna: " + t5left + "]");
              }

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // printf ::= PRINTF PARIZQ CONSTSTRING COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nCONSTCHAR = new Nodo();
              nCONSTCHAR.setEtiqueta("CONSTCHAR");
              nCONSTCHAR.setValor(t5.toString());
              nCONSTCHAR.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTCHAR);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // printf ::= PRINTF PARIZQ CONSTSTRING COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont++;//string

              Nodo nCONSTSTRING2 = new Nodo();
              nCONSTSTRING2.setEtiqueta("CONSTSTRING");
              nCONSTSTRING2.setValor(t5.toString());
              nCONSTSTRING2.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTSTRING2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // printf ::= PRINTF PARIZQ CONSTSTRING COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // printf ::= PRINTF PARIZQ CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // printf ::= PRINTF PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTCHAR");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTSTRING");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // printf ::= PRINTF PARIZQ CONSTSTRING COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // printf ::= PRINTF PARIZQ PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor("printf");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
