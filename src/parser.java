
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\006\003\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\002\000\002\037\003\000" +
    "\002\037\004\000\002\043\003\000\002\043\005\000\002" +
    "\043\006\000\002\034\005\000\002\034\006\000\002\012" +
    "\011\000\002\012\014\000\002\012\013\000\002\012\015" +
    "\000\002\025\003\000\002\025\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\045\003\000\002" +
    "\045\003\000\002\044\003\000\002\046\005\000\002\046" +
    "\003\000\002\046\003\000\002\047\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\015\011\000\002\016\015\000" +
    "\002\016\015\000\002\016\012\000\002\032\004\000\002" +
    "\033\004\000\002\026\005\000\002\026\007\000\002\031" +
    "\003\000\002\031\004\000\002\031\005\000\002\027\003" +
    "\000\002\027\005\000\002\030\003\000\002\030\005\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\005\000\002\004" +
    "\007\000\002\004\010\000\002\041\006\000\002\010\010" +
    "\000\002\010\010\000\002\010\016\000\002\035\004\000" +
    "\002\035\007\000\002\035\010\000\002\035\006\000\002" +
    "\035\002\000\002\050\006\000\002\051\004\000\002\051" +
    "\005\000\002\051\002\000\002\011\004\000\002\005\006" +
    "\000\002\005\002\000\002\022\006\000\002\022\010\000" +
    "\002\021\010\000\002\021\010\000\002\021\010\000\002" +
    "\021\010\000\002\021\006\000\002\021\006\000\002\021" +
    "\010\000\002\021\010\000\002\021\010\000\002\021\010" +
    "\000\002\021\012\000\002\021\012\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\030\003\ufffa\006\015\015\ufffa\016\ufffa\017" +
    "\ufffa\022\004\023\007\027\017\051\ufffa\052\ufffa\077\ufffa" +
    "\001\002\000\006\014\uffee\077\uffec\001\002\000\020\003" +
    "\057\015\052\016\046\017\051\051\045\052\063\077\060" +
    "\001\002\000\004\014\353\001\002\000\006\014\uffed\077" +
    "\uffea\001\002\000\004\077\317\001\002\000\034\002\ufffa" +
    "\003\ufffa\006\015\013\ufffa\015\ufffa\016\ufffa\017\ufffa\022" +
    "\004\023\007\027\017\051\ufffa\052\ufffa\077\ufffa\001\002" +
    "\000\034\002\ufffa\003\ufffa\006\015\013\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\022\004\023\007\027\017\051\ufffa\052\ufffa" +
    "\077\ufffa\001\002\000\004\002\313\001\002\000\004\002" +
    "\000\001\002\000\004\077\021\001\002\000\034\002\ufffa" +
    "\003\ufffa\006\015\013\ufffa\015\ufffa\016\ufffa\017\ufffa\022" +
    "\004\023\007\027\017\051\ufffa\052\ufffa\077\ufffa\001\002" +
    "\000\010\062\uffeb\065\uffeb\077\uffeb\001\002\000\024\002" +
    "\ufffb\003\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb\051\ufffb" +
    "\052\ufffb\077\ufffb\001\002\000\004\037\022\001\002\000" +
    "\010\022\025\023\024\027\017\001\002\000\004\062\026" +
    "\001\002\000\010\062\uffea\065\uffea\077\uffea\001\002\000" +
    "\010\062\uffec\065\uffec\077\uffec\001\002\000\012\004\uffad" +
    "\022\025\023\024\027\017\001\002\000\004\004\043\001" +
    "\002\000\004\077\033\001\002\000\034\002\uffbb\003\uffbb" +
    "\006\uffbb\013\uffbb\015\uffbb\016\uffbb\017\uffbb\022\uffbb\023" +
    "\uffbb\027\uffbb\051\uffbb\052\uffbb\077\uffbb\001\002\000\006" +
    "\061\034\062\035\001\002\000\012\037\ufff7\061\ufff7\062" +
    "\ufff7\065\ufff7\001\002\000\012\022\025\023\024\027\017" +
    "\077\037\001\002\000\030\003\uffad\004\uffad\015\uffad\016" +
    "\uffad\017\uffad\022\025\023\024\027\017\051\uffad\052\uffad" +
    "\077\uffad\001\002\000\022\003\uffae\004\uffae\015\uffae\016" +
    "\uffae\017\uffae\051\uffae\052\uffae\077\uffae\001\002\000\014" +
    "\037\ufff6\061\ufff6\062\ufff6\065\ufff6\077\ufff6\001\002\000" +
    "\004\077\041\001\002\000\014\037\ufff5\061\ufff5\062\ufff5" +
    "\065\ufff5\077\ufff5\001\002\000\034\002\uffaf\003\uffaf\006" +
    "\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\022\uffaf\023\uffaf" +
    "\027\uffaf\051\uffaf\052\uffaf\077\uffaf\001\002\000\020\003" +
    "\057\015\052\016\046\017\051\051\045\052\063\077\060" +
    "\001\002\000\036\003\uffdd\005\uffdd\006\uffdd\013\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\022\uffdd\023\uffdd\027\uffdd\051\uffdd" +
    "\052\uffdd\072\uffdd\077\uffdd\001\002\000\004\066\305\001" +
    "\002\000\004\066\277\001\002\000\036\003\uffdc\005\uffdc" +
    "\006\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\022\uffdc\023" +
    "\uffdc\027\uffdc\051\uffdc\052\uffdc\072\uffdc\077\uffdc\001\002" +
    "\000\036\003\uffdb\005\uffdb\006\uffdb\013\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\022\uffdb\023\uffdb\027\uffdb\051\uffdb\052\uffdb" +
    "\072\uffdb\077\uffdb\001\002\000\004\066\245\001\002\000" +
    "\004\066\207\001\002\000\004\062\206\001\002\000\036" +
    "\003\ufff9\005\ufff9\006\ufff9\013\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\022\ufff9\023\ufff9\027\ufff9\051\ufff9\052\ufff9\072\ufff9" +
    "\077\ufff9\001\002\000\022\003\057\005\204\015\052\016" +
    "\046\017\051\051\045\052\063\077\060\001\002\000\004" +
    "\062\203\001\002\000\004\062\202\001\002\000\014\044" +
    "\115\060\116\066\134\075\171\076\172\001\002\000\004" +
    "\062\201\001\002\000\036\003\uffda\005\uffda\006\uffda\013" +
    "\uffda\015\uffda\016\uffda\017\uffda\022\uffda\023\uffda\027\uffda" +
    "\051\uffda\052\uffda\072\uffda\077\uffda\001\002\000\012\066" +
    "\071\077\072\100\070\102\073\001\002\000\004\062\067" +
    "\001\002\000\004\062\066\001\002\000\036\003\uffd7\005" +
    "\uffd7\006\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7" +
    "\023\uffd7\027\uffd7\051\uffd7\052\uffd7\072\uffd7\077\uffd7\001" +
    "\002\000\036\003\uffd9\005\uffd9\006\uffd9\013\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\022\uffd9\023\uffd9\027\uffd9\051\uffd9\052" +
    "\uffd9\072\uffd9\077\uffd9\001\002\000\006\044\104\045\103" +
    "\001\002\000\004\077\114\001\002\000\006\044\104\045" +
    "\103\001\002\000\006\044\104\045\103\001\002\000\004" +
    "\073\075\001\002\000\004\100\076\001\002\000\004\074" +
    "\077\001\002\000\004\100\100\001\002\000\004\062\101" +
    "\001\002\000\020\003\057\015\052\016\046\017\051\051" +
    "\045\052\063\077\060\001\002\000\036\003\uffd0\005\uffd0" +
    "\006\uffd0\013\uffd0\015\uffd0\016\uffd0\017\uffd0\022\uffd0\023" +
    "\uffd0\027\uffd0\051\uffd0\052\uffd0\072\uffd0\077\uffd0\001\002" +
    "\000\010\077\uffe8\100\uffe8\102\uffe8\001\002\000\010\077" +
    "\uffe9\100\uffe9\102\uffe9\001\002\000\004\077\106\001\002" +
    "\000\012\050\uffdf\062\uffdf\065\uffdf\073\uffdf\001\002\000" +
    "\010\077\111\100\110\102\112\001\002\000\012\050\uffe2" +
    "\062\uffe2\065\uffe2\073\uffe2\001\002\000\012\050\uffde\062" +
    "\uffde\065\uffde\073\uffde\001\002\000\012\050\uffe1\062\uffe1" +
    "\065\uffe1\073\uffe1\001\002\000\004\062\156\001\002\000" +
    "\006\044\115\060\116\001\002\000\020\035\125\046\124" +
    "\066\127\077\133\100\121\102\122\103\132\001\002\000" +
    "\004\077\117\001\002\000\004\036\120\001\002\000\020" +
    "\035\125\046\124\066\127\077\133\100\121\102\122\103" +
    "\132\001\002\000\030\035\uffc3\046\uffc3\047\uffc3\061\uffc3" +
    "\062\uffc3\065\uffc3\066\uffc3\077\uffc3\100\uffc3\102\uffc3\103" +
    "\uffc3\001\002\000\030\035\uffc1\046\uffc1\047\uffc1\061\uffc1" +
    "\062\uffc1\065\uffc1\066\uffc1\077\uffc1\100\uffc1\102\uffc1\103" +
    "\uffc1\001\002\000\012\046\uffcb\047\152\062\uffcb\065\uffcb" +
    "\001\002\000\016\035\125\066\127\077\133\100\121\102" +
    "\122\103\132\001\002\000\030\035\uffc0\046\uffc0\047\uffc0" +
    "\061\uffc0\062\uffc0\065\uffc0\066\uffc0\077\uffc0\100\uffc0\102" +
    "\uffc0\103\uffc0\001\002\000\006\046\150\062\uffcc\001\002" +
    "\000\020\035\125\046\124\066\127\077\133\100\121\102" +
    "\122\103\132\001\002\000\012\046\uffc8\047\uffc8\062\uffc8" +
    "\065\uffc8\001\002\000\030\035\uffc4\046\uffc4\047\uffc4\061" +
    "\uffc4\062\uffc4\065\uffc4\066\uffc4\077\uffc4\100\uffc4\102\uffc4" +
    "\103\uffc4\001\002\000\030\035\uffc2\046\uffc2\047\uffc2\061" +
    "\uffc2\062\uffc2\065\uffc2\066\uffc2\077\uffc2\100\uffc2\102\uffc2" +
    "\103\uffc2\001\002\000\032\035\uffc6\046\uffc6\047\uffc6\060" +
    "\135\061\uffc6\062\uffc6\065\uffc6\066\134\077\uffc6\100\uffc6" +
    "\102\uffc6\103\uffc6\001\002\000\022\035\125\061\137\065" +
    "\uffb0\066\127\077\133\100\121\102\122\103\132\001\002" +
    "\000\004\077\136\001\002\000\030\035\uffc5\046\uffc5\047" +
    "\uffc5\061\uffc5\062\uffc5\065\uffc5\066\uffc5\077\uffc5\100\uffc5" +
    "\102\uffc5\103\uffc5\001\002\000\016\035\125\066\127\077" +
    "\133\100\121\102\122\103\132\001\002\000\022\035\125" +
    "\061\137\065\uffb0\066\127\077\133\100\121\102\122\103" +
    "\132\001\002\000\004\065\142\001\002\000\062\003\uffb3" +
    "\005\uffb3\006\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\022" +
    "\uffb3\023\uffb3\027\uffb3\035\uffb3\046\uffb3\047\uffb3\051\uffb3" +
    "\052\uffb3\061\uffb3\062\uffb3\065\uffb3\066\uffb3\072\uffb3\077" +
    "\uffb3\100\uffb3\102\uffb3\103\uffb3\001\002\000\004\065\uffb2" +
    "\001\002\000\022\035\125\061\137\065\uffb0\066\127\077" +
    "\133\100\121\102\122\103\132\001\002\000\004\065\uffb1" +
    "\001\002\000\006\046\150\065\147\001\002\000\030\035" +
    "\uffbf\046\uffbf\047\uffbf\061\uffbf\062\uffbf\065\uffbf\066\uffbf" +
    "\077\uffbf\100\uffbf\102\uffbf\103\uffbf\001\002\000\016\035" +
    "\125\066\127\077\133\100\121\102\122\103\132\001\002" +
    "\000\012\046\uffc9\047\152\062\uffc9\065\uffc9\001\002\000" +
    "\016\035\125\066\127\077\133\100\121\102\122\103\132" +
    "\001\002\000\012\046\uffc7\047\uffc7\062\uffc7\065\uffc7\001" +
    "\002\000\012\046\uffca\047\152\062\uffca\065\uffca\001\002" +
    "\000\006\046\150\062\uffcd\001\002\000\010\077\072\100" +
    "\070\102\073\001\002\000\004\062\160\001\002\000\004" +
    "\077\162\001\002\000\004\065\173\001\002\000\006\075" +
    "\171\076\172\001\002\000\004\065\164\001\002\000\004" +
    "\071\165\001\002\000\020\003\057\015\052\016\046\017" +
    "\051\051\045\052\063\077\060\001\002\000\022\003\057" +
    "\015\052\016\046\017\051\051\045\052\063\072\167\077" +
    "\060\001\002\000\036\003\uffd2\005\uffd2\006\uffd2\013\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\022\uffd2\023\uffd2\027\uffd2\051" +
    "\uffd2\052\uffd2\072\uffd2\077\uffd2\001\002\000\036\003\ufff8" +
    "\005\ufff8\006\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\022" +
    "\ufff8\023\ufff8\027\ufff8\051\ufff8\052\ufff8\072\ufff8\077\ufff8" +
    "\001\002\000\006\062\uffcf\065\uffcf\001\002\000\006\062" +
    "\uffce\065\uffce\001\002\000\004\071\174\001\002\000\020" +
    "\003\057\015\052\016\046\017\051\051\045\052\063\077" +
    "\060\001\002\000\022\003\057\015\052\016\046\017\051" +
    "\051\045\052\063\072\176\077\060\001\002\000\036\003" +
    "\uffd1\005\uffd1\006\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\022\uffd1\023\uffd1\027\uffd1\051\uffd1\052\uffd1\072\uffd1\077" +
    "\uffd1\001\002\000\004\100\200\001\002\000\012\050\uffe0" +
    "\062\uffe0\065\uffe0\073\uffe0\001\002\000\036\003\uffd6\005" +
    "\uffd6\006\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\022\uffd6" +
    "\023\uffd6\027\uffd6\051\uffd6\052\uffd6\072\uffd6\077\uffd6\001" +
    "\002\000\036\003\uffd4\005\uffd4\006\uffd4\013\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\022\uffd4\023\uffd4\027\uffd4\051\uffd4\052" +
    "\uffd4\072\uffd4\077\uffd4\001\002\000\036\003\uffd8\005\uffd8" +
    "\006\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\023" +
    "\uffd8\027\uffd8\051\uffd8\052\uffd8\072\uffd8\077\uffd8\001\002" +
    "\000\004\062\205\001\002\000\034\002\uffbc\003\uffbc\006" +
    "\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\022\uffbc\023\uffbc" +
    "\027\uffbc\051\uffbc\052\uffbc\077\uffbc\001\002\000\036\003" +
    "\uffd5\005\uffd5\006\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\022\uffd5\023\uffd5\027\uffd5\051\uffd5\052\uffd5\072\uffd5\077" +
    "\uffd5\001\002\000\010\065\211\077\212\103\210\001\002" +
    "\000\006\061\230\065\231\001\002\000\004\062\uff9e\001" +
    "\002\000\006\061\213\065\214\001\002\000\012\077\217" +
    "\100\215\102\220\103\216\001\002\000\004\062\uffa5\001" +
    "\002\000\004\065\227\001\002\000\004\065\226\001\002" +
    "\000\006\060\223\065\222\001\002\000\004\065\221\001" +
    "\002\000\004\062\uffa2\001\002\000\004\062\uffa4\001\002" +
    "\000\004\077\224\001\002\000\004\065\225\001\002\000" +
    "\004\062\uffa0\001\002\000\004\062\uffa1\001\002\000\004" +
    "\062\uffa3\001\002\000\012\077\234\100\232\102\235\103" +
    "\233\001\002\000\004\062\uffa6\001\002\000\004\065\244" +
    "\001\002\000\004\065\243\001\002\000\006\060\240\065" +
    "\237\001\002\000\004\065\236\001\002\000\004\062\uffa9" +
    "\001\002\000\004\062\uffaa\001\002\000\004\077\241\001" +
    "\002\000\004\065\242\001\002\000\004\062\uff9f\001\002" +
    "\000\004\062\uffa8\001\002\000\004\062\uffa7\001\002\000" +
    "\012\066\247\077\072\100\070\102\073\001\002\000\006" +
    "\050\uffe5\065\uffe5\001\002\000\012\066\247\077\072\100" +
    "\070\102\073\001\002\000\006\050\uffe4\065\uffe4\001\002" +
    "\000\006\050\254\065\253\001\002\000\012\066\247\077" +
    "\072\100\070\102\073\001\002\000\004\071\255\001\002" +
    "\000\012\066\uffe7\077\uffe7\100\uffe7\102\uffe7\001\002\000" +
    "\022\003\057\013\256\015\052\016\046\017\051\051\045" +
    "\052\063\077\060\001\002\000\020\035\125\046\124\066" +
    "\127\077\133\100\121\102\122\103\132\001\002\000\024" +
    "\003\057\013\260\015\052\016\046\017\051\051\045\052" +
    "\063\072\261\077\060\001\002\000\020\035\125\046\124" +
    "\066\127\077\133\100\121\102\122\103\132\001\002\000" +
    "\040\003\ufff2\005\ufff2\006\ufff2\013\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\262\022\ufff2\023\ufff2\027\ufff2\051\ufff2\052" +
    "\ufff2\072\ufff2\077\ufff2\001\002\000\004\071\263\001\002" +
    "\000\020\003\057\015\052\016\046\017\051\051\045\052" +
    "\063\077\060\001\002\000\022\003\057\015\052\016\046" +
    "\017\051\051\045\052\063\072\265\077\060\001\002\000" +
    "\036\003\uffef\005\uffef\006\uffef\013\uffef\015\uffef\016\uffef" +
    "\017\uffef\022\uffef\023\uffef\027\uffef\051\uffef\052\uffef\072" +
    "\uffef\077\uffef\001\002\000\006\046\150\062\267\001\002" +
    "\000\004\072\270\001\002\000\036\003\ufff1\005\ufff1\006" +
    "\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1\022\ufff1\023\ufff1" +
    "\027\ufff1\051\ufff1\052\ufff1\072\ufff1\077\ufff1\001\002\000" +
    "\006\046\150\062\272\001\002\000\004\072\273\001\002" +
    "\000\036\003\ufff0\005\ufff0\006\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\022\ufff0\023\ufff0\027\ufff0\051\ufff0\052\ufff0" +
    "\072\ufff0\077\ufff0\001\002\000\006\050\254\065\uffe6\001" +
    "\002\000\006\050\254\065\276\001\002\000\006\050\uffe3" +
    "\065\uffe3\001\002\000\004\077\300\001\002\000\006\060" +
    "\302\065\301\001\002\000\004\062\uffac\001\002\000\004" +
    "\077\303\001\002\000\004\065\304\001\002\000\004\062" +
    "\uffab\001\002\000\010\077\072\100\070\102\073\001\002" +
    "\000\004\065\307\001\002\000\004\071\310\001\002\000" +
    "\020\003\057\015\052\016\046\017\051\051\045\052\063" +
    "\077\060\001\002\000\022\003\057\015\052\016\046\017" +
    "\051\051\045\052\063\072\312\077\060\001\002\000\036" +
    "\003\uffd3\005\uffd3\006\uffd3\013\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\022\uffd3\023\uffd3\027\uffd3\051\uffd3\052\uffd3\072\uffd3" +
    "\077\uffd3\001\002\000\004\002\001\001\002\000\024\002" +
    "\ufffd\003\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\051\ufffd" +
    "\052\ufffd\077\ufffd\001\002\000\024\002\ufffc\003\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\051\ufffc\052\ufffc\077\ufffc" +
    "\001\002\000\010\061\034\062\351\077\114\001\002\000" +
    "\012\061\ufff7\062\ufff7\066\320\077\ufff7\001\002\000\016" +
    "\022\025\023\024\025\321\027\017\065\uffb4\077\033\001" +
    "\002\000\004\077\033\001\002\000\004\065\332\001\002" +
    "\000\006\037\326\061\034\001\002\000\004\077\033\001" +
    "\002\000\006\061\034\065\uffb8\001\002\000\010\022\025" +
    "\023\024\027\017\001\002\000\004\062\330\001\002\000" +
    "\016\022\025\023\024\025\321\027\017\065\uffb4\077\033" +
    "\001\002\000\004\065\uffb7\001\002\000\006\062\334\071" +
    "\333\001\002\000\026\003\uffad\015\uffad\016\uffad\017\uffad" +
    "\022\025\023\024\027\017\051\uffad\052\uffad\077\uffad\001" +
    "\002\000\034\002\uffba\003\uffba\006\uffba\013\uffba\015\uffba" +
    "\016\uffba\017\uffba\022\uffba\023\uffba\027\uffba\051\uffba\052" +
    "\uffba\077\uffba\001\002\000\020\003\057\015\052\016\046" +
    "\017\051\051\045\052\063\077\060\001\002\000\022\003" +
    "\057\013\337\015\052\016\046\017\051\051\045\052\063" +
    "\077\060\001\002\000\020\035\125\046\124\066\127\077" +
    "\133\100\121\102\122\103\132\001\002\000\006\046\150" +
    "\062\341\001\002\000\004\072\342\001\002\000\034\002" +
    "\uffb9\003\uffb9\006\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\022\uffb9\023\uffb9\027\uffb9\051\uffb9\052\uffb9\077\uffb9\001" +
    "\002\000\006\037\344\061\034\001\002\000\010\022\025" +
    "\023\024\027\017\001\002\000\006\062\346\065\uffb5\001" +
    "\002\000\016\022\025\023\024\025\321\027\017\065\uffb4" +
    "\077\033\001\002\000\004\065\uffb6\001\002\000\004\062" +
    "\352\001\002\000\034\002\ufff4\003\ufff4\006\ufff4\013\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\022\ufff4\023\ufff4\027\ufff4\051" +
    "\ufff4\052\ufff4\077\ufff4\001\002\000\034\002\ufff3\003\ufff3" +
    "\006\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\022\ufff3\023" +
    "\ufff3\027\ufff3\051\ufff3\052\ufff3\077\ufff3\001\002\000\004" +
    "\066\354\001\002\000\006\065\356\077\033\001\002\000" +
    "\006\061\034\065\360\001\002\000\004\071\357\001\002" +
    "\000\034\002\uffbe\003\uffbe\006\uffbe\013\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\022\uffbe\023\uffbe\027\uffbe\051\uffbe\052\uffbe" +
    "\077\uffbe\001\002\000\004\071\361\001\002\000\034\002" +
    "\uffbd\003\uffbd\006\uffbd\013\uffbd\015\uffbd\016\uffbd\017\uffbd" +
    "\022\uffbd\023\uffbd\027\uffbd\051\uffbd\052\uffbd\077\uffbd\001" +
    "\002\000\032\003\057\006\ufffe\013\ufffe\015\052\016\046" +
    "\017\051\022\ufffe\023\ufffe\027\ufffe\051\045\052\063\077" +
    "\060\001\002\000\014\006\015\013\ufffa\022\004\023\007" +
    "\027\017\001\002\000\004\013\365\001\002\000\004\100" +
    "\366\001\002\000\004\062\367\001\002\000\004\072\370" +
    "\001\002\000\014\002\ufffa\006\015\022\004\023\007\027" +
    "\017\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\367\000\022\002\012\003\013\004\011\010\015\024" +
    "\007\025\005\034\010\036\004\001\001\000\002\001\001" +
    "\000\032\006\362\012\043\014\053\015\046\016\047\021" +
    "\063\022\055\026\064\032\060\033\052\037\361\050\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\315\001\001\000\016\004\011\010\015\024\007\025\005" +
    "\034\010\036\314\001\001\000\016\004\011\010\015\024" +
    "\007\025\005\034\010\036\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\011\010" +
    "\015\024\007\025\005\034\010\036\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\026\011\030\024\027\001\001\000" +
    "\004\041\041\001\001\000\004\043\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\037\001\001\000\006\005\035\024\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\043\014\053\015\046" +
    "\016\047\021\063\022\055\026\064\032\060\033\052\037" +
    "\054\050\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\043\014\167\015\046\016\047\021" +
    "\063\022\055\026\064\032\060\033\052\050\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\176\001\001\000\004\026\112" +
    "\001\001\000\004\045\106\001\001\000\004\045\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\043\014" +
    "\101\015\046\016\047\021\063\022\055\026\064\032\060" +
    "\033\052\050\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\027\122\030\127\031\154\050\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\027\122\030\127\031\125" +
    "\050\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\153\030\127\050\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\027\122\030" +
    "\127\031\145\050\130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\030" +
    "\137\050\130\051\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\030\143\050\130\001\001\000\010\030" +
    "\137\050\130\051\142\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\137\050\130\051" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\150\030\127\050\130\001\001\000" +
    "\002\001\001\000\006\030\152\050\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\156\001\001\000\002\001\001\000\006\032\162\033\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\043\014\053\015\046" +
    "\016\047\021\063\022\055\026\064\032\060\033\052\037" +
    "\165\050\061\001\001\000\026\012\043\014\167\015\046" +
    "\016\047\021\063\022\055\026\064\032\060\033\052\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\043\014\053\015\046\016\047\021\063\022\055\026\064" +
    "\032\060\033\052\037\174\050\061\001\001\000\026\012" +
    "\043\014\167\015\046\016\047\021\063\022\055\026\064" +
    "\032\060\033\052\050\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\247\046" +
    "\250\047\245\001\001\000\002\001\001\000\010\013\247" +
    "\046\274\047\245\001\001\000\002\001\001\000\004\044" +
    "\251\001\001\000\010\013\247\046\273\047\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\043\014" +
    "\053\015\046\016\047\021\063\022\055\026\064\032\060" +
    "\033\052\037\256\050\061\001\001\000\012\027\122\030" +
    "\127\031\270\050\130\001\001\000\026\012\043\014\167" +
    "\015\046\016\047\021\063\022\055\026\064\032\060\033" +
    "\052\050\061\001\001\000\012\027\122\030\127\031\265" +
    "\050\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\043\014\053\015\046\016\047\021\063\022\055" +
    "\026\064\032\060\033\052\037\263\050\061\001\001\000" +
    "\026\012\043\014\167\015\046\016\047\021\063\022\055" +
    "\026\064\032\060\033\052\050\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\251\001\001\000\004\044\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\012\043\014\053\015\046\016\047\021\063" +
    "\022\055\026\064\032\060\033\052\037\310\050\061\001" +
    "\001\000\026\012\043\014\167\015\046\016\047\021\063" +
    "\022\055\026\064\032\060\033\052\050\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\347\001\001\000\002\001\001\000" +
    "\010\024\323\035\321\043\322\001\001\000\004\043\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\324\001\001\000\002\001\001\000\004\024\326\001\001" +
    "\000\002\001\001\000\010\024\323\035\330\043\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\334" +
    "\024\027\001\001\000\002\001\001\000\030\012\043\014" +
    "\053\015\046\016\047\021\063\022\055\026\064\032\060" +
    "\033\052\037\335\050\061\001\001\000\026\012\043\014" +
    "\167\015\046\016\047\021\063\022\055\026\064\032\060" +
    "\033\052\050\061\001\001\000\012\027\122\030\127\031" +
    "\337\050\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\344\001" +
    "\001\000\002\001\001\000\010\024\323\035\346\043\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\043" +
    "\014\167\015\046\016\047\021\063\022\055\026\064\032" +
    "\060\033\052\050\061\001\001\000\016\004\011\010\015" +
    "\024\007\025\005\034\010\036\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\011\010\015\024\007\025\005\034\010\036" +
    "\370\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public static Nodo padre;
        public int cont  = 0;
        public String ambitoActual = "%Global";

        //manejo de ambitos
        ArrayList<ElementoTS> elementosNoEncontrado = new ArrayList<ElementoTS>();
        ArrayList<ElementoTS> elementosEncontrado = new ArrayList<ElementoTS>();
        ArrayList<Nodo> CheckNodes = new ArrayList<Nodo>();

        public void buscarEnStandby(ElementoTS funcion){
                        for(ElementoTS elemStandby : elementosStandby){
                                boolean found = false;
                                for(ElementoTS elemFuncion : funcion.getParametros()){
                                        if( elemStandby.getID().equals(elemFuncion.getID()) ){
                                                found = true;
                                        }
                                }
                                if(found){

                                                elemStandby.setAmbito(funcion.getAmbito());
                                                elementosEncontrado.add(elemStandby);


                                } else{


                                               elementosNoEncontrado.add(elemStandby);

                                }

                        }
        }



        //deteccion y recuperacion de errores
        public static ArrayList<String> ErroresSintacticos = new ArrayList<String>();

        public static ArrayList<ElementoTS> ArregloSimbolos = new ArrayList<ElementoTS>();
        public static ArrayList<ElementoTS> ArregloFunciones = new ArrayList<ElementoTS>(); //arreglo para funciones

        public static ArrayList<ElementoTS> elementosStandby = new ArrayList<ElementoTS>();

        public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        report_expected_token_ids();
        //System.out.println(ErroresSintacticos);
        expected_token_ids();
        }

        /*public void unrecovered_syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        }*/

        //gen deberia retornar un string o una lista? Depende del contexto en el que se use

        public static boolean BuscaTipo(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID()) &&
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean buscarExistenciaID(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID())) {
                                return true;
                        }
                }
                return false;
        }


           public static boolean BuscaTipoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(element.getID().equals(elemento.getID()) &&
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean BuscaAmbito(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getAmbito().equals(elemento.getAmbito())){
                                return true;
                        }
                }
                return false;
        }

        public static boolean BuscaAmbitoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(elemento.getAmbito()))){
                                return true;
                        }
                }
                return false;
        }

        public static String returnTipo(String id){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnTipoFuncion(String id){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getID().equals(id))) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnAmbitoFuncion(String ambito){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(ambito))) {
                                return element.getAmbito();
                        }
                }
                return "Error";
        }

        public static ElementoTS returnElementoTS(String ID, String tipo){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(ID) &&
                                element.getTipo().equals(tipo)) {
                                return element;
                        }
                }
                return null;
        }

        public static String returnTipoRecord(String id){
                String retorno = "";
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {


                                switch(element.getTipo()){
                                        case "STRING":
                                        case "INTEGER":
                                        case "REAL":
                                        case "BOOLEAN":
                                        case "RECORD":
                                                break;
                                        default:
                                                retorno = element.getTipo();
                                                break;
                                }
                                break;
                        }
                }
                if(retorno.equals("")){
                        return "Error";
                } else{
                        return retorno;
                }
        }

        public static void printRecord(ElementoTS record){
                for(ElementoTS element : record.getRecordVars()) {
                        System.out.println("ID: "  +  element.getID() + ", Tipo: " + element.getTipo() + ", Ambito: " + element.getAmbito());
                }
        }

        public static boolean checkRecordVar(ElementoTS record, ElementoTS elemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(elemento.getID()) &&
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean checkRecordVarConID(ElementoTS record, String IDElemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(IDElemento)) {
                                return false;
                        }
                }
                return true;
        }

        public static String returnTipoVariableRecord(ElementoTS record, String id){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static ElementoTS recursivaRecord(ElementoTS tipoRecord, Nodo nodo){


                if(nodo.getHijos().get(2).getValor() == "vacio"){ //fin de recursion
                        //agregar los ids que puedan faltar (mismo codigo de abajo)
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }

                                }



                        }

                        return tipoRecord;
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }

                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));


                        }
                }

        }

        public static ElementoTS convertirVariableARecord(ElementoTS elemento, String ID){
                //primero buscar el tipo record
                ElementoTS record  = new ElementoTS();
                for(ElementoTS element : ArregloSimbolos){
                        if(element.getID().equals(ID) && element.getTipo().equals("RECORD")){
                                record = element;
                                break;
                        }
                }

                //convertir el elemento mandado a Record
                elemento.setRecordVars(record.getRecordVars());

                return elemento;
        }

        public static ArrayList<ElementoTS> recorrerDeclaracionesFuncion(ArrayList<ElementoTS> arreglo, Nodo nodo, String ambito){

                int tam = 0;

                try{
                        tam = nodo.getHijos().get(2).getHijos().size();
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){

                }

                if(tam == 0){
                        /*llego al fondo de la  recursion, osea no existe un tercer nodo en el padre, entonces
                        significa que es el final de la recursion. */
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //en caso que solo sea un ID que se esta declarando
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                return arreglo;

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }

                                }


                        }

                        return arreglo;

                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //revisar si el nodo de la mas izquierda tiene NULL o no
                                //si tiene NULL significa que tiene una lista de IDs.
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);

                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }

                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);

                        }
                }
        }

       public static boolean revisarArreglo(ElementoTS element, ArrayList<ElementoTS> arreglo){
               //esta funcion simplemente revisa que el arreglo mandado contenga un elemento mandado
               //si el arreglo esta vacio, regresar verdadero para que el elemento se agregue
               //si no, recorrer en busca del elemento en el arreglo. es falso cuando si hay un match

               if(arreglo.size()  == 0){
                       return true;
               } else{
                    for(ElementoTS elem : arreglo){
                        if(element.getID().equals(elem.getID())){
                                return false;

                        }
                    }
                    return true;
               }
       }



       public void revisarArregloStanby_Global(){ //al final revisa que variables extras quedan que no se encontraron
                elementosNoEncontrado.clear();
                elementosEncontrado.clear();

                for(ElementoTS elementoStanby : elementosStandby){

                        boolean found =  false;
                        for(ElementoTS elementoTablaSimbolo : ArregloSimbolos){
                                if( elementoStanby.getID().equals(elementoTablaSimbolo.getID()) ){
                                        found = true;
                                }
                        }

                        if(found){
                                        elementosEncontrado.add(elementoStanby);
                        } else{
                                        elementosNoEncontrado.add(elementoStanby);
                        }
                }

       }

//        public void addErrores(Nodo node){
//                for(Nodo nodoFOR: node.getHijos()){
//                        addErrores(nodoFOR);
//                        if(nodoFOR.getEtiqueta().equals("expresion_matematica") &&
//                        (nodoFOR.getValor().equals("Error") || nodoFOR.getValor().equals("Error de Tipos.")) ){
//                                int size = nodoFOR.getHijos().size();

//                                switch(size){
//                                        case 1:{
//                                                Nodo nodoTermino = nodoFOR.getHijos().get(0);
//                                                Nodo hijoTermino = nodoTermino.getHijos().get(0);
//                                                Nodo hijoFinal = hijoTermino.getHijos().get(0);

//                                                if(hijoTermino.getEtiqueta().equals("expresion_matematica")){
//                                                        addErrores(hijoFinal);
//                                                } else{
//                                                        CheckNodes.add(nodoFOR);
//                                                        //hay que revisar que ese elmento existe en algun lado.

//                                                }



//                                                break;
//                                        }
//                                        case 3:{
//                                                break;
//                                        }
//                                }
//                        }
//                }
//        }

//        public void revisarErrorExprMatematica(Nodo nodo, ElementoTS funcion){
//                System.out.println("Size: " + nodo.getHijos().size());
//                if(nodo.getHijos().size() == 3){

//                }
//        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root ::= encabezado 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("root");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo) hijo1);

        parser.padre = (Nodo) nodo;

        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= declaraciones_principales cuerpo_main declaraciones_principales RETURN NUM PUNTOCOMA CURLYDER declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque principal, bloque = 0

                    //NODO PADRE
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("encabezado");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    //TERMINALES
                    //AGREGAR NO TERMINALES
                    //nodo.addHijos(nProcedure);
                    //nodo.addHijos(nid);
                    nodo.addHijos((Nodo)hijo1);
                    //nodo.addHijos(nIS);
                    nodo.addHijos((Nodo)hijo2);
                    nodo.addHijos((Nodo)hijo3);
                    nodo.addHijos((Nodo)hijo4);


                //     System.out.println("Size del arreglo global: " + elementosStandby.size());
                //     //RECORRER ESE ARREGLO EN BUSQUEDA DE VARIABLES QUE NO SE ENCONTRARON.

                //         revisarArregloStanby_Global();

                //         if(elementosEncontrado.size() > 0){ //imprimir los que encontro
                //                 for(ElementoTS elem : elementosEncontrado){
                //                         System.out.println("ID: "  + elem.getID() + ", Ambito: " + elem.getAmbito());
                //                 }
                //                         elementosEncontrado.clear();
                //         }

                //         if(elementosNoEncontrado.size() > 0){ //imrpimir los que no encontro
                //         //error
                //                 for(ElementoTS elem : elementosNoEncontrado){
                //                         System.out.println("No se encontro el ID declarado: "  + elem.getID() + " en el Ambito: " + elem.getAmbito());
                //                 }

                //                 elementosNoEncontrado.clear();
                //         }




                    RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_main ::= listaProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("cuerpo_main");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    nodo.addHijos((Nodo)hijo1);

                    RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_principales ::= inicioProgram declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones_principales ::= declaracionesVAR declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor(" : ");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones_principales ::= inicioFunction declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor("FUNCTION");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones_principales ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaProposiciones ::= proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijito1 = ((Nodo)hijo1);
                nodo.setValor(hijito1.getValor());

                for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                }

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaProposiciones ::= listaProposiciones proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaProposiciones");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaIdentificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaIdentificadores ::= listaIdentificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t2.toString());
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();
                        nid2.setEtiqueta("ID");
                        nid2.setValor(hijo.getValor());
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }


                nodo.addHijos(nid);

                RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaIdentificadores ::= listaIdentificadores COMA tipovar IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t2.toString());
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();
                        nid2.setEtiqueta("ID");
                        nid2.setValor(hijo.getValor());
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }


                nodo.addHijos(nid);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesVAR ::= tipovar listaIdentificadores PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque en 0

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING":
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                //System.out.println("Esto es: " + hijo.getValor());

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global");
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo

                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global");
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }



                                                }
                                }
                                break;

                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesVAR ::= tipovar listaIdentificadores asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

           //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING":
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global");
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo

                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global");
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }



                                                }
                                }
                                break;

                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones RETURN expresion_matematica PUNTOCOMA CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3); 
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ RETURN expresion_matematica PUNTOCOMA CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2); 
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones CURLYDER ELSE CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF-ELSE");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipomain ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("INT");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipomain ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipovar ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovar ::= CHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("CHAR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovar ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_rel_completos ::= EQUAL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_rel_completos ::= OPREL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_condicional ::= OPCONDICIONALES 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion op_condicional expresion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = (Nodo)hijo2;
                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo3);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion_parentesis 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                RESULT = (Nodo)hijo1;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= condicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = (Nodo)hijo1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_parentesis ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_parentesis");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES

                nodo.addHijos(hijo);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_parentesis",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= IDENTIFICADOR op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE

                Nodo nodo = (Nodo)hijo1;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nNUM = new Nodo();
                nNUM.setEtiqueta("INTEGER");
                nNUM.setValor(t2.toString());
                nNUM.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos(nNUM);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= IDENTIFICADOR op_rel_completos CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = (Nodo)hijo1;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("CHAR");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos(nodo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= NUM op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = (Nodo)hijo1;

                Nodo nid = new Nodo();
                nid.setEtiqueta("INTEGER");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("INTEGER");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos(nodo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= CONSTCHAR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = (Nodo)hijo1;

                Nodo nid = new Nodo();
                nid.setEtiqueta("CHAR");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos(nodo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= IDENTIFICADOR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = (Nodo)hijo1;
                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos(nodo2);


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proposicion ::= condicionIF 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor("IF");

                nodo.setId(parser.cont);
                parser.cont++;

                // for(int i = 0; i < hijo.getHijos().size() ; i++){
                //         nodo.addHijos(hijo.getHijos().get(i));
                // }

                nodo.addHijos(hijo);


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // proposicion ::= cicloWHILE 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("WHILE");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                //TERMINALES

                //AGREGAR NO TERMINALES

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // proposicion ::= cicloFOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("FOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // proposicion ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("LLAMADA");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // proposicion ::= printf PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proposicion ::= scanf PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // proposicion ::= asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // proposicion ::= incrementando PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("INCREMENTADOR");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // proposicion ::= decrementando PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("DECREMENTADOR");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // proposicion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cicloWHILE ::= WHILE PARIZQ condicion PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloWhile");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cicloFOR ::= FOR PARIZQ asignacionVAR PUNTOCOMA condicion PUNTOCOMA incrementando PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cicloFOR ::= FOR PARIZQ asignacionVAR PUNTOCOMA condicion PUNTOCOMA decrementando PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cicloFOR ::= FOR condicion QUESTIONMARK NUM DECISION NUM PUNTOCOMA proposicion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // incrementando ::= IDENTIFICADOR INCREMENTADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "++");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementando",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // decrementando ::= IDENTIFICADOR DECREMENTADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "--");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementando",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignacionVAR ::= IDENTIFICADOR EQUAL expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor("=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                //comprobacion de tipos
                //revisar que T1 sea el mismo tipo de expresion_matematica
                String tipo = returnTipo(t1.toString());
                // String tipo1 = returnAmbitoFuncion(t1.toString());
                // if(tipo.equals("Error")){

                //         //retorna error si no la encontro, entonces subir el valor para comprobar si existe en
                //         //la gramatica de FUNCTION.
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         element.setAmbito("Global");
                //         elementosStandby.add(element);



                // }else{
                //         if(hijo.getError()){ //si expr_mat es un error
                //                 System.out.println("Error: "  + hijo.getMensaje());
                //                 hijo.setValor("Error de Tipos.");
                //         }else{ //si todo esta bien, revisar si son iguales.
                //                 if(tipo.equals(hijo.getValor()) ||
                //                 (tipo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //                 }else{
                //                         System.out.println("Error: " + "El tipo de " +
                //                         t1.toString()  + " es diferente que el valor asignado. Se esperaba " + tipo);
                //                 }
                //         }
                // }
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignacionVAR ::= IDENTIFICADOR DOT IDENTIFICADOR ASIGNACION expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor(":=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                Nodo hijo = ((Nodo)hijo1);


                //ahora a revisar si ese id.id realmente existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());

                // String tipoAtributo = ""; //es el tipo del atributo id.x (tipo de x)

                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);

                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 tipoAtributo = returnTipoVariableRecord(elemento, t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //                 tipoAtributo = "Error";
                //         }

                // }

                //comprobacion de otros tipos


                // if(hijo.getError()){ //si expr_mat es un error
                //         System.out.println("Error: "  + hijo.getMensaje());
                //         hijo.setValor("Error de Tipos.");
                // } else{ //si todo esta bien, revisar si son iguales.
                //         if(tipoAtributo.equals(hijo.getValor()) ||
                //         (tipoAtributo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //         } else{
                //                         System.out.println("Error: " + "El tipo de " +
                //                         t2.toString()  + " es diferente que el valor asignado. Se esperaba " + tipoAtributo + " y se encontro un " + hijo.getValor());
                //         }
                // }

                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_matematica ::= termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //por ejemplo 2x+a, el termino es 2x y a Y los factores serian "2 y x"

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                nodo.addHijos((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

               /*
               if(hijo.getError()){ //subir error y mensaje
                        nodo.setError(true);
                        hijo.setValor("Error de tipos.");
                        nodo.setMensaje(hijo.getMensaje());
                        CheckNodes.add(nodo);
                }
               */

                RESULT = (Nodo)hijo1;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion_matematica ::= OPSUM termino 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //en que caso se usa esto?

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo1);

                RESULT = (Nodo)hijo1;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion_matematica ::= expresion_matematica OPSUM termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPSUM");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;


                Nodo hijoMAT = ((Nodo)hijo1);
                Nodo hijoTER = ((Nodo)hijo2);
                if(returnTipo(hijoMAT.getValor()) == "INTEGER" || returnTipo(hijoMAT.getValor()) == "Error"){
                  if(hijoMAT.getEtiqueta() != "INTEGER" && hijoMAT.getEtiqueta() != "OPMULT" && hijoMAT.getEtiqueta() != "OPSUM") {
                    nodo.setError(true);
                    nodo.setMensaje("ERROR DE TIPOS "+"TOKEN [valor: "+hijoMAT.getValor()+", tipo: "+hijoMAT.getEtiqueta()+"] " +" [line: " + (hijo1left-1) + " columna: " + hijo1right + "]");
                }
                } else {
                    nodo.setError(true);
                    nodo.setMensaje("ERROR DE TIPOS "+"TOKEN [ID: "+hijoMAT.getValor()+", tipo: "+returnTipo(hijoMAT.getValor())+"] " +" [line: " + (hijo1left-1) + " columna: " + hijo1right + "]");
                }

                if(returnTipo(hijoTER.getValor()) == "INTEGER" || returnTipo(hijoTER.getValor()) == "Error"){
                  if(hijoTER.getEtiqueta() != "INTEGER" && hijoTER.getEtiqueta() != "OPMULT" && hijoTER.getEtiqueta() != "OPSUM") {
                   nodo.setError(true);
                   nodo.setMensaje("ERROR DE TIPOS "+"TOKEN [valor: "+hijoTER.getValor()+", tipo: "+hijoTER.getEtiqueta()+"] " +" [line: " + (hijo2left-1) + " columna: " + hijo2right + "]");
                  }
                } else {
                    nodo.setError(true);
                    nodo.setMensaje("ERROR DE TIPOS "+"TOKEN [ID: "+hijoTER.getValor()+", tipo: "+returnTipo(hijoTER.getValor())+"] " +" [line: " + (hijo1left-1) + " columna: " + hijo1right + "]");
                }
        System.out.println(nodo.getMensaje());

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //este

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("termino");

                Nodo hijo = ((Nodo)hijo1);

                // if(hijo.getEtiqueta().equals("expresion_matematica")){
                //         nodo.setValor(hijo.getValor());
                // } else{
                //         nodo.setValor(hijo.getEtiqueta());
                // }

                // if(hijo.getError()){ //quitar valor y subir mensaje
                //         nodo.setMensaje(hijo.getMensaje());
                //         hijo.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(hijo);

                RESULT = (Nodo)hijo1;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termino ::= termino OPMULT factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPMULT");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;
                Nodo nHijo1 = (Nodo)hijo1;
                Nodo nHijo2 = (Nodo)hijo2;
                if(nHijo1.getEtiqueta() != "INTEGER" && nHijo1.getEtiqueta() != "OPMULT" && nHijo1.getEtiqueta() != "OPSUM") {
                  nodo.setError(true);
                  nodo.setMensaje("ERROR DE TIPOS "+"TOKEN [valor: "+nHijo1.getValor()+" tipo: "+nHijo1.getEtiqueta()+"] " +" [line: " + (hijo1left-1) + " columna: " + hijo1right + "]");
                  System.out.println(nodo.getMensaje());
                }
                if(nHijo2.getEtiqueta() != "INTEGER" && nHijo2.getEtiqueta() != "OPMULT" && nHijo2.getEtiqueta() != "OPSUM") {
                  nodo.setError(true);
                  nodo.setMensaje("ERROR DE TIPOS "+"TOKEN [valor: "+nHijo2.getValor()+" tipo: "+nHijo2.getEtiqueta()+"] " +" [line: " + (hijo2left-1) + " columna: " + hijo2right + "]");
                  System.out.println(nodo.getMensaje());
                }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                //buscar en TS ese Identificador y retornar tipo
                // String tipo = returnTipo(t1.toString());

                // if(tipo.equals("Error")){

                //         //no lo encontro globalmente, ahora revisar en la funcion

                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         elementosStandby.add(element);

                //         nodo.setEtiqueta("Error");
                // }else{
                //         if(tipo == "INTEGER"){
                //                 tipo = "NUM";
                //         }
                //         nodo.setEtiqueta(tipo);
                //         nodo.setValor(t1.toString());
                // }

                nodo.addHijos(nid);

                RESULT = nid;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= IDENTIFICADOR DOT IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                //buscar si esa variable record existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());



                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);

                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 String tipo2 = returnTipoVariableRecord(elemento, t2.toString());
                //                 nodo.setEtiqueta(tipo2);
                //                 nodo.setValor(t1.toString() + "." + t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //         }

                // }


                nodo.addHijos(nid);
                nodo.addHijos(nid2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("llamada_procedure_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nod = ((Nodo)hijo1);

                for(Nodo node : nodo.getHijos()){
                        nodo.addHijos(node);
                }

                // nodo.addHijos((Nodo)hijo1);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INTEGER");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= CONSTSTRING 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STRING");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CHAR");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= OPBOOL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPBOOL");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= PARIZQ expresion_matematica PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");


                Nodo hijito1 = ((Nodo)hijo1);

                nodo.setValor(hijito1.getValor());

                // if(hijito1.getError()){
                //         nodo.setError(true);
                //         hijito1.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;


                nodo.addHijos(hijito1);

                // for(int i = 0; i < hijito1.getHijos().size(); i++){
                //        nodo.addHijos(hijito1.getHijos().get(i));
                // }
                RESULT = (Nodo)hijo1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // inicioProgram ::= tipomain MAIN PARIZQ PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioProgram");
              nodo.setId(parser.cont);
              //nodo.setValor(t1.toString());
              parser.cont++;

              Nodo tipo = ((Nodo)hijo1);

              //TERMINALES
              nodo.addHijos(tipo);
              //nodo.setValor(tipo.getValor());

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicioProgram ::= tipomain MAIN PARIZQ listaIdentificadores PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("NombreProgram");
              nodo.setValor(t2.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              nodo.addHijos((Nodo)hijo1);
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpoProposiciones ::= BEGIN listaProposiciones END PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoProposiciones");
              nodo.setValor("listaProposiciones");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo hijo = ((Nodo)hijo1);


              if(hijo.getHijos().size() > 2){
                        for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                        }
              } else{
                      nodo.setEtiqueta(hijo.getEtiqueta());
                      nodo.setValor(hijo.getValor());
                      for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                      }
              }

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProposiciones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicioFunction ::= FUNCTION IDENTIFICADOR OPDECLARACION tipovar PUNTOCOMA cuerpoprocedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //Si encuentra esto, es un error.
              //No pueden haber funciones con cero parametros:

              //se agrega al arreglo para que el comprobador de tipos/ambito trate esta funcion como un procedure.

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString());

              ambitoActual = t2.toString();

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){

                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                                break;
                        }
                }


                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{

                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              System.out.println("La funcion " +  t2.toString() + " necesita parametros declarados.");

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //este segundo permite la declaracion de funciones

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString());

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0;


                try{
                        tam = hijo.getHijos().get(2).getHijos().size();
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){

                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString());

                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString());
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }
                                }
                        }

                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva

                                }
                }


                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){

                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;
                        }
                }


                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{

                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              //nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER CURLYIZQ declaracionesVARAdentroFunctionProcedure listaProposiciones RETURN expresion_matematica PUNTOCOMA CURLYDER 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString());

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0;


                try{
                        tam = hijo.getHijos().get(2).getHijos().size();
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){

                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString());

                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString());
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }
                                }
                        }

                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva

                                }
                }


                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){

                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;
                        }
                }


                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{

                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              nodo.addHijos((Nodo)hijo4);
              nodo.addHijos((Nodo)hijo5);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionesVAR_procedure_funcion ::= tipovar listaIdentificadores 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR_pro");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                int size = hijo.getHijos().size();

                if(hijo.getValor() != null){
                        if(size == 0){ //si es solo unico, solo un ID
                                ElementoTS elemento = new ElementoTS();
                                elemento.setID(hijo.getValor());
                                System.out.println("ID del elemento: " + elemento.getID());
                                elemento.setTipo(tipo);
                                elemento.setAmbito("");
                                        if(BuscaTipoFuncion(elemento)){
                                                ArregloFunciones.add(elemento);
                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                        } else {  //error, ya existe ese simbolo
                                                System.out.println("Ya existe ese elemento con ese id, tipo y ambito");
                                        }
                        }

                } else{ //es null cuando son varios
                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo

                                        ElementoTS elemento = new ElementoTS();
                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                        elemento.setTipo(tipo);
                                        elemento.setAmbito("");
                                                if(BuscaTipoFuncion(elemento)){
                                                        ArregloFunciones.add(elemento);
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                } else {  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo() + " y con el ambito: " + elemento.getAmbito());
                                                }
                        }
                }

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionesVAR_procedure_funcion ::= listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		


              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // declaracionesVAR_procedure_funcion ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // llamada_procedure_funcion ::= IDENTIFICADOR PARIZQ lista_parametros PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("llamada_procedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t1.toString());
              nid.setId(parser.cont);
              parser.cont+=1;//id, parizq, parder

              nodo.addHijos(nid);

              Nodo hijito1 = ((Nodo)hijo1);

              for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));

                      }
              //nodo.setValor("(" + hijito1.getValor() + ")");

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_procedure_funcion",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_parametros ::= factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("lista_parametros");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

                // Nodo nid = new Nodo();
                // nid.setEtiqueta("NUM");
                // nid.setValor(t1.toString());
                // nid.setId(parser.cont);
                // parser.cont+=1;

                Nodo node1 = ((Nodo)hijo1);

                Nodo node = ((Nodo)hijo2);


                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));

                }

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lista_parametros ::= COMA factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("lista_parametros");
                nodo.setId(parser.cont);
                parser.cont++;


                Nodo node1 = ((Nodo)hijo1);
                Nodo node = ((Nodo)hijo2);



                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));

                }

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lista_parametros ::= 
            {
              Object RESULT =null;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cuerpoprocedure_funcion ::= declaracionesVARAdentroFunctionProcedure cuerpoProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoprocedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo node = ((Nodo)hijo1);

              if(node != null){
                nodo.addHijos((Nodo)hijo1);

              }

              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoprocedure_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // declaracionesVARAdentroFunctionProcedure ::= tipovar listaIdentificadores PUNTOCOMA declaracionesVARAdentroFunctionProcedure 
            {
              Object RESULT =null;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("declaracionesVARAdentroFunctionProcedure");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo)hijo1);
        nodo.addHijos((Nodo)hijo2);
        nodo.addHijos((Nodo)hijo3);

              RESULT = nodo;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // declaracionesVARAdentroFunctionProcedure ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // scanf ::= SCANF PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("scanf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nid);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // scanf ::= SCANF PARIZQ IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("scanf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              Nodo nid2 = new Nodo();
              nid2.setEtiqueta("ID");
              nid2.setValor(t4.toString());
              nid2.setId(parser.cont);
              parser.cont+=1;


              nodo.addHijos(nid);
              nodo.addHijos(nid2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("scanf",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // printf ::= PRINTF PARIZQ CONSTSTRING COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t5.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nid);

              String tipoId = returnTipo(t5.toString());
              int index = t3.toString().indexOf("%d");
              if (index != -1 && tipoId != "INTEGER") {
                System.out.println("se esperaba un INTEGER [linea: " + t5right + ", columna: " + t5left + "]");
              }
              index = t3.toString().indexOf("%c");
              if (index != -1 && tipoId != "CHAR") {
                System.out.println("se esperaba un CHAR [linea: " + t5right + ", columna: " + t5left + "]");
              }
              index = t3.toString().indexOf("%p");
              if (index != -1 && tipoId != "POINTER") {
                System.out.println("se esperaba un POINTER [linea: " + t5right + ", columna: " + t5left + "]");
              }

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // printf ::= PRINTF PARIZQ CONSTSTRING COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nCONSTCHAR = new Nodo();
              nCONSTCHAR.setEtiqueta("CONSTCHAR");
              nCONSTCHAR.setValor(t5.toString());
              nCONSTCHAR.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTCHAR);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // printf ::= PRINTF PARIZQ CONSTSTRING COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont++;//string

              Nodo nCONSTSTRING2 = new Nodo();
              nCONSTSTRING2.setEtiqueta("CONSTSTRING");
              nCONSTSTRING2.setValor(t5.toString());
              nCONSTSTRING2.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTSTRING2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // printf ::= PRINTF PARIZQ CONSTSTRING COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // printf ::= PRINTF PARIZQ CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // printf ::= PRINTF PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTCHAR");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTSTRING");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // printf ::= PRINTF PARIZQ IDENTIFICADOR COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // printf ::= PRINTF PARIZQ CONSTSTRING COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // printf ::= PRINTF PARIZQ PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("printf");
              nodo.setValor("printf");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("printf",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
