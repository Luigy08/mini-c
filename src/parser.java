
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\006\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\002\000\002\035\003\000" +
    "\002\035\004\000\002\041\003\000\002\041\005\000\002" +
    "\041\006\000\002\032\005\000\002\032\006\000\002\012" +
    "\011\000\002\012\015\000\002\023\003\000\002\023\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\004\000\002\022\004\000\002\043\003\000\002" +
    "\043\003\000\002\042\003\000\002\044\005\000\002\044" +
    "\003\000\002\044\003\000\002\045\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\015\011" +
    "\000\002\016\015\000\002\016\015\000\002\016\012\000" +
    "\002\030\004\000\002\031\004\000\002\024\005\000\002" +
    "\024\007\000\002\027\003\000\002\027\004\000\002\027" +
    "\005\000\002\025\003\000\002\025\005\000\002\026\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\004\007\000\002\004\010\000\002\037" +
    "\006\000\002\010\010\000\002\010\010\000\002\010\016" +
    "\000\002\033\004\000\002\033\007\000\002\033\010\000" +
    "\002\033\006\000\002\033\002\000\002\046\006\000\002" +
    "\047\004\000\002\047\005\000\002\047\002\000\002\011" +
    "\004\000\002\005\006\000\002\005\002\000\002\021\006" +
    "\000\002\021\010\000\002\020\010\000\002\020\010\000" +
    "\002\020\010\000\002\020\010\000\002\020\006\000\002" +
    "\020\006\000\002\020\010\000\002\020\010\000\002\020" +
    "\010\000\002\020\010\000\002\020\012\000\002\020\012" +
    "\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\032\003\ufffa\006\016\011\ufffa\012\ufffa\015" +
    "\ufffa\020\004\021\010\023\005\026\020\044\ufffa\045\ufffa" +
    "\064\ufffa\001\002\000\006\014\ufff0\064\uffee\001\002\000" +
    "\006\020\360\026\357\001\002\000\020\003\057\011\060" +
    "\012\045\015\056\044\046\045\052\064\063\001\002\000" +
    "\004\014\340\001\002\000\006\014\uffef\064\uffec\001\002" +
    "\000\004\064\304\001\002\000\036\002\ufffa\003\ufffa\006" +
    "\016\011\ufffa\012\ufffa\013\ufffa\015\ufffa\020\004\021\010" +
    "\023\005\026\020\044\ufffa\045\ufffa\064\ufffa\001\002\000" +
    "\036\002\ufffa\003\ufffa\006\016\011\ufffa\012\ufffa\013\ufffa" +
    "\015\ufffa\020\004\021\010\023\005\026\020\044\ufffa\045" +
    "\ufffa\064\ufffa\001\002\000\004\002\300\001\002\000\004" +
    "\002\000\001\002\000\004\064\022\001\002\000\036\002" +
    "\ufffa\003\ufffa\006\016\011\ufffa\012\ufffa\013\ufffa\015\ufffa" +
    "\020\004\021\010\023\005\026\020\044\ufffa\045\ufffa\064" +
    "\ufffa\001\002\000\010\050\uffed\052\uffed\064\uffed\001\002" +
    "\000\024\002\ufffb\003\ufffb\011\ufffb\012\ufffb\013\ufffb\015" +
    "\ufffb\044\ufffb\045\ufffb\064\ufffb\001\002\000\004\036\023" +
    "\001\002\000\012\020\026\021\025\023\005\026\020\001" +
    "\002\000\004\050\027\001\002\000\010\050\uffec\052\uffec" +
    "\064\uffec\001\002\000\010\050\uffee\052\uffee\064\uffee\001" +
    "\002\000\014\004\uffaf\020\026\021\025\023\005\026\020" +
    "\001\002\000\004\004\044\001\002\000\004\064\034\001" +
    "\002\000\036\002\uffbd\003\uffbd\006\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\015\uffbd\020\uffbd\021\uffbd\023\uffbd\026\uffbd\044" +
    "\uffbd\045\uffbd\064\uffbd\001\002\000\006\047\035\050\036" +
    "\001\002\000\012\036\ufff7\047\ufff7\050\ufff7\052\ufff7\001" +
    "\002\000\014\020\026\021\025\023\005\026\020\064\040" +
    "\001\002\000\032\003\uffaf\004\uffaf\011\uffaf\012\uffaf\015" +
    "\uffaf\020\026\021\025\023\005\026\020\044\uffaf\045\uffaf" +
    "\064\uffaf\001\002\000\022\003\uffb0\004\uffb0\011\uffb0\012" +
    "\uffb0\015\uffb0\044\uffb0\045\uffb0\064\uffb0\001\002\000\014" +
    "\036\ufff6\047\ufff6\050\ufff6\052\ufff6\064\ufff6\001\002\000" +
    "\004\064\042\001\002\000\014\036\ufff5\047\ufff5\050\ufff5" +
    "\052\ufff5\064\ufff5\001\002\000\036\002\uffb1\003\uffb1\006" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\020\uffb1\021\uffb1" +
    "\023\uffb1\026\uffb1\044\uffb1\045\uffb1\064\uffb1\001\002\000" +
    "\020\003\057\011\060\012\045\015\056\044\046\045\052" +
    "\064\063\001\002\000\004\053\272\001\002\000\004\053" +
    "\264\001\002\000\040\003\uffdd\005\uffdd\006\uffdd\011\uffdd" +
    "\012\uffdd\013\uffdd\015\uffdd\020\uffdd\021\uffdd\023\uffdd\026" +
    "\uffdd\044\uffdd\045\uffdd\057\uffdd\064\uffdd\001\002\000\004" +
    "\050\263\001\002\000\040\003\uffdc\005\uffdc\006\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\015\uffdc\020\uffdc\021\uffdc\023\uffdc" +
    "\026\uffdc\044\uffdc\045\uffdc\057\uffdc\064\uffdc\001\002\000" +
    "\012\053\231\064\173\065\170\067\174\001\002\000\040" +
    "\003\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\020\ufff9\021\ufff9\023\ufff9\026\ufff9\044\ufff9\045\ufff9" +
    "\057\ufff9\064\ufff9\001\002\000\022\003\057\005\227\011" +
    "\060\012\045\015\056\044\046\045\052\064\063\001\002" +
    "\000\040\003\uffdb\005\uffdb\006\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\015\uffdb\020\uffdb\021\uffdb\023\uffdb\026\uffdb\044\uffdb" +
    "\045\uffdb\057\uffdb\064\uffdb\001\002\000\004\053\167\001" +
    "\002\000\004\050\166\001\002\000\004\053\130\001\002" +
    "\000\004\050\127\001\002\000\040\003\uffda\005\uffda\006" +
    "\uffda\011\uffda\012\uffda\013\uffda\015\uffda\020\uffda\021\uffda" +
    "\023\uffda\026\uffda\044\uffda\045\uffda\057\uffda\064\uffda\001" +
    "\002\000\010\037\067\046\070\053\066\001\002\000\004" +
    "\050\065\001\002\000\040\003\uffd9\005\uffd9\006\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\015\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\026\uffd9\044\uffd9\045\uffd9\057\uffd9\064\uffd9\001\002\000" +
    "\022\034\077\047\120\052\uffb2\053\100\064\105\065\073" +
    "\067\075\070\103\001\002\000\020\034\077\041\076\053" +
    "\100\064\105\065\073\067\075\070\103\001\002\000\004" +
    "\064\071\001\002\000\004\035\072\001\002\000\020\034" +
    "\077\041\076\053\100\064\105\065\073\067\075\070\103" +
    "\001\002\000\030\034\uffc5\041\uffc5\042\uffc5\047\uffc5\050" +
    "\uffc5\052\uffc5\053\uffc5\064\uffc5\065\uffc5\067\uffc5\070\uffc5" +
    "\001\002\000\012\041\uffcd\042\112\050\uffcd\052\uffcd\001" +
    "\002\000\030\034\uffc3\041\uffc3\042\uffc3\047\uffc3\050\uffc3" +
    "\052\uffc3\053\uffc3\064\uffc3\065\uffc3\067\uffc3\070\uffc3\001" +
    "\002\000\016\034\077\053\100\064\105\065\073\067\075" +
    "\070\103\001\002\000\030\034\uffc2\041\uffc2\042\uffc2\047" +
    "\uffc2\050\uffc2\052\uffc2\053\uffc2\064\uffc2\065\uffc2\067\uffc2" +
    "\070\uffc2\001\002\000\020\034\077\041\076\053\100\064" +
    "\105\065\073\067\075\070\103\001\002\000\006\041\110" +
    "\050\uffce\001\002\000\012\041\uffca\042\uffca\050\uffca\052" +
    "\uffca\001\002\000\030\034\uffc4\041\uffc4\042\uffc4\047\uffc4" +
    "\050\uffc4\052\uffc4\053\uffc4\064\uffc4\065\uffc4\067\uffc4\070" +
    "\uffc4\001\002\000\030\034\uffc6\041\uffc6\042\uffc6\047\uffc6" +
    "\050\uffc6\052\uffc6\053\uffc6\064\uffc6\065\uffc6\067\uffc6\070" +
    "\uffc6\001\002\000\032\034\uffc8\041\uffc8\042\uffc8\046\106" +
    "\047\uffc8\050\uffc8\052\uffc8\053\066\064\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\001\002\000\004\064\107\001\002\000\030" +
    "\034\uffc7\041\uffc7\042\uffc7\047\uffc7\050\uffc7\052\uffc7\053" +
    "\uffc7\064\uffc7\065\uffc7\067\uffc7\070\uffc7\001\002\000\016" +
    "\034\077\053\100\064\105\065\073\067\075\070\103\001" +
    "\002\000\012\041\uffcb\042\112\050\uffcb\052\uffcb\001\002" +
    "\000\016\034\077\053\100\064\105\065\073\067\075\070" +
    "\103\001\002\000\012\041\uffc9\042\uffc9\050\uffc9\052\uffc9" +
    "\001\002\000\006\041\110\052\115\001\002\000\030\034" +
    "\uffc1\041\uffc1\042\uffc1\047\uffc1\050\uffc1\052\uffc1\053\uffc1" +
    "\064\uffc1\065\uffc1\067\uffc1\070\uffc1\001\002\000\012\041" +
    "\uffcc\042\112\050\uffcc\052\uffcc\001\002\000\006\041\110" +
    "\050\uffcf\001\002\000\016\034\077\053\100\064\105\065" +
    "\073\067\075\070\103\001\002\000\022\034\077\047\120" +
    "\052\uffb2\053\100\064\105\065\073\067\075\070\103\001" +
    "\002\000\004\052\123\001\002\000\064\003\uffb5\005\uffb5" +
    "\006\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\020\uffb5\021" +
    "\uffb5\023\uffb5\026\uffb5\034\uffb5\041\uffb5\042\uffb5\044\uffb5" +
    "\045\uffb5\047\uffb5\050\uffb5\052\uffb5\053\uffb5\057\uffb5\064" +
    "\uffb5\065\uffb5\067\uffb5\070\uffb5\001\002\000\004\052\uffb4" +
    "\001\002\000\022\034\077\047\120\052\uffb2\053\100\064" +
    "\105\065\073\067\075\070\103\001\002\000\004\052\uffb3" +
    "\001\002\000\040\003\uffd7\005\uffd7\006\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\015\uffd7\020\uffd7\021\uffd7\023\uffd7\026\uffd7" +
    "\044\uffd7\045\uffd7\057\uffd7\064\uffd7\001\002\000\010\052" +
    "\132\064\133\070\131\001\002\000\006\047\151\052\152" +
    "\001\002\000\004\050\uffa0\001\002\000\006\047\134\052" +
    "\135\001\002\000\012\064\140\065\136\067\141\070\137" +
    "\001\002\000\004\050\uffa7\001\002\000\004\052\150\001" +
    "\002\000\004\052\147\001\002\000\006\046\144\052\143" +
    "\001\002\000\004\052\142\001\002\000\004\050\uffa4\001" +
    "\002\000\004\050\uffa6\001\002\000\004\064\145\001\002" +
    "\000\004\052\146\001\002\000\004\050\uffa2\001\002\000" +
    "\004\050\uffa3\001\002\000\004\050\uffa5\001\002\000\012" +
    "\064\155\065\153\067\156\070\154\001\002\000\004\050" +
    "\uffa8\001\002\000\004\052\165\001\002\000\004\052\164" +
    "\001\002\000\006\046\161\052\160\001\002\000\004\052" +
    "\157\001\002\000\004\050\uffab\001\002\000\004\050\uffac" +
    "\001\002\000\004\064\162\001\002\000\004\052\163\001" +
    "\002\000\004\050\uffa1\001\002\000\004\050\uffaa\001\002" +
    "\000\004\050\uffa9\001\002\000\040\003\uffd6\005\uffd6\006" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\015\uffd6\020\uffd6\021\uffd6" +
    "\023\uffd6\026\uffd6\044\uffd6\045\uffd6\057\uffd6\064\uffd6\001" +
    "\002\000\012\053\172\064\173\065\170\067\174\001\002" +
    "\000\006\037\214\040\213\001\002\000\006\043\uffe5\052" +
    "\uffe5\001\002\000\012\053\172\064\173\065\170\067\174" +
    "\001\002\000\006\037\214\040\213\001\002\000\006\037" +
    "\214\040\213\001\002\000\006\043\uffe4\052\uffe4\001\002" +
    "\000\006\043\201\052\200\001\002\000\012\053\172\064" +
    "\173\065\170\067\174\001\002\000\004\056\202\001\002" +
    "\000\012\053\uffe7\064\uffe7\065\uffe7\067\uffe7\001\002\000" +
    "\020\003\057\011\060\012\045\015\056\044\046\045\052" +
    "\064\063\001\002\000\022\003\057\011\060\012\045\015" +
    "\056\044\046\045\052\057\205\064\063\001\002\000\040" +
    "\003\ufff8\005\ufff8\006\ufff8\011\ufff8\012\ufff8\013\ufff8\015" +
    "\ufff8\020\ufff8\021\ufff8\023\ufff8\026\ufff8\044\ufff8\045\ufff8" +
    "\057\ufff8\064\ufff8\001\002\000\042\003\ufff2\005\ufff2\006" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\015\ufff2\016\206\020\ufff2" +
    "\021\ufff2\023\ufff2\026\ufff2\044\ufff2\045\ufff2\057\ufff2\064" +
    "\ufff2\001\002\000\004\056\207\001\002\000\020\003\057" +
    "\011\060\012\045\015\056\044\046\045\052\064\063\001" +
    "\002\000\022\003\057\011\060\012\045\015\056\044\046" +
    "\045\052\057\211\064\063\001\002\000\040\003\ufff1\005" +
    "\ufff1\006\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\020\ufff1" +
    "\021\ufff1\023\ufff1\026\ufff1\044\ufff1\045\ufff1\057\ufff1\064" +
    "\ufff1\001\002\000\006\043\201\052\uffe6\001\002\000\010" +
    "\064\uffe8\065\uffe8\067\uffe8\001\002\000\010\064\uffe9\065" +
    "\uffe9\067\uffe9\001\002\000\004\064\216\001\002\000\012" +
    "\043\uffdf\050\uffdf\052\uffdf\060\uffdf\001\002\000\010\064" +
    "\221\065\220\067\222\001\002\000\012\043\uffe2\050\uffe2" +
    "\052\uffe2\060\uffe2\001\002\000\012\043\uffde\050\uffde\052" +
    "\uffde\060\uffde\001\002\000\012\043\uffe1\050\uffe1\052\uffe1" +
    "\060\uffe1\001\002\000\006\043\201\052\224\001\002\000" +
    "\006\043\uffe3\052\uffe3\001\002\000\004\065\226\001\002" +
    "\000\012\043\uffe0\050\uffe0\052\uffe0\060\uffe0\001\002\000" +
    "\004\050\230\001\002\000\036\002\uffbe\003\uffbe\006\uffbe" +
    "\011\uffbe\012\uffbe\013\uffbe\015\uffbe\020\uffbe\021\uffbe\023" +
    "\uffbe\026\uffbe\044\uffbe\045\uffbe\064\uffbe\001\002\000\004" +
    "\064\242\001\002\000\004\060\233\001\002\000\004\065" +
    "\234\001\002\000\004\061\235\001\002\000\004\065\236" +
    "\001\002\000\004\050\237\001\002\000\020\003\057\011" +
    "\060\012\045\015\056\044\046\045\052\064\063\001\002" +
    "\000\040\003\uffd2\005\uffd2\006\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\015\uffd2\020\uffd2\021\uffd2\023\uffd2\026\uffd2\044\uffd2" +
    "\045\uffd2\057\uffd2\064\uffd2\001\002\000\004\050\243\001" +
    "\002\000\006\037\067\046\070\001\002\000\010\064\173" +
    "\065\170\067\174\001\002\000\004\050\245\001\002\000" +
    "\004\064\247\001\002\000\004\052\257\001\002\000\006" +
    "\062\255\063\256\001\002\000\004\052\251\001\002\000" +
    "\004\056\252\001\002\000\020\003\057\011\060\012\045" +
    "\015\056\044\046\045\052\064\063\001\002\000\022\003" +
    "\057\011\060\012\045\015\056\044\046\045\052\057\254" +
    "\064\063\001\002\000\040\003\uffd4\005\uffd4\006\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\015\uffd4\020\uffd4\021\uffd4\023\uffd4" +
    "\026\uffd4\044\uffd4\045\uffd4\057\uffd4\064\uffd4\001\002\000" +
    "\004\052\uffd1\001\002\000\004\052\uffd0\001\002\000\004" +
    "\056\260\001\002\000\020\003\057\011\060\012\045\015" +
    "\056\044\046\045\052\064\063\001\002\000\022\003\057" +
    "\011\060\012\045\015\056\044\046\045\052\057\262\064" +
    "\063\001\002\000\040\003\uffd3\005\uffd3\006\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\015\uffd3\020\uffd3\021\uffd3\023\uffd3\026" +
    "\uffd3\044\uffd3\045\uffd3\057\uffd3\064\uffd3\001\002\000\040" +
    "\003\uffd8\005\uffd8\006\uffd8\011\uffd8\012\uffd8\013\uffd8\015" +
    "\uffd8\020\uffd8\021\uffd8\023\uffd8\026\uffd8\044\uffd8\045\uffd8" +
    "\057\uffd8\064\uffd8\001\002\000\010\064\173\065\170\067" +
    "\174\001\002\000\004\052\266\001\002\000\004\056\267" +
    "\001\002\000\020\003\057\011\060\012\045\015\056\044" +
    "\046\045\052\064\063\001\002\000\022\003\057\011\060" +
    "\012\045\015\056\044\046\045\052\057\271\064\063\001" +
    "\002\000\040\003\uffd5\005\uffd5\006\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\015\uffd5\020\uffd5\021\uffd5\023\uffd5\026\uffd5\044" +
    "\uffd5\045\uffd5\057\uffd5\064\uffd5\001\002\000\004\064\273" +
    "\001\002\000\006\046\275\052\274\001\002\000\004\050" +
    "\uffae\001\002\000\004\064\276\001\002\000\004\052\277" +
    "\001\002\000\004\050\uffad\001\002\000\004\002\001\001" +
    "\002\000\024\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\015\ufffd\044\ufffd\045\ufffd\064\ufffd\001\002\000\024\002" +
    "\ufffc\003\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\044\ufffc" +
    "\045\ufffc\064\ufffc\001\002\000\010\047\035\050\336\064" +
    "\242\001\002\000\012\047\ufff7\050\ufff7\053\305\064\ufff7" +
    "\001\002\000\020\020\026\021\025\023\005\024\311\026" +
    "\020\052\uffb6\064\034\001\002\000\006\036\331\047\035" +
    "\001\002\000\004\064\034\001\002\000\004\052\317\001" +
    "\002\000\004\064\034\001\002\000\006\036\313\047\035" +
    "\001\002\000\012\020\026\021\025\023\005\026\020\001" +
    "\002\000\006\050\315\052\uffb7\001\002\000\020\020\026" +
    "\021\025\023\005\024\311\026\020\052\uffb6\064\034\001" +
    "\002\000\004\052\uffb8\001\002\000\006\050\321\056\320" +
    "\001\002\000\030\003\uffaf\011\uffaf\012\uffaf\015\uffaf\020" +
    "\026\021\025\023\005\026\020\044\uffaf\045\uffaf\064\uffaf" +
    "\001\002\000\036\002\uffbc\003\uffbc\006\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\015\uffbc\020\uffbc\021\uffbc\023\uffbc\026\uffbc" +
    "\044\uffbc\045\uffbc\064\uffbc\001\002\000\020\003\057\011" +
    "\060\012\045\015\056\044\046\045\052\064\063\001\002" +
    "\000\022\003\057\011\060\012\045\013\324\015\056\044" +
    "\046\045\052\064\063\001\002\000\004\064\325\001\002" +
    "\000\004\050\326\001\002\000\004\057\327\001\002\000" +
    "\036\002\uffbb\003\uffbb\006\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\015\uffbb\020\uffbb\021\uffbb\023\uffbb\026\uffbb\044\uffbb\045" +
    "\uffbb\064\uffbb\001\002\000\006\047\035\052\uffba\001\002" +
    "\000\012\020\026\021\025\023\005\026\020\001\002\000" +
    "\004\050\333\001\002\000\020\020\026\021\025\023\005" +
    "\024\311\026\020\052\uffb6\064\034\001\002\000\004\052" +
    "\uffb9\001\002\000\004\050\337\001\002\000\036\002\ufff4" +
    "\003\ufff4\006\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\020" +
    "\ufff4\021\ufff4\023\ufff4\026\ufff4\044\ufff4\045\ufff4\064\ufff4" +
    "\001\002\000\036\002\ufff3\003\ufff3\006\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\015\ufff3\020\ufff3\021\ufff3\023\ufff3\026\ufff3" +
    "\044\ufff3\045\ufff3\064\ufff3\001\002\000\004\053\341\001" +
    "\002\000\006\052\343\064\034\001\002\000\006\047\035" +
    "\052\345\001\002\000\004\056\344\001\002\000\036\002" +
    "\uffc0\003\uffc0\006\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0" +
    "\020\uffc0\021\uffc0\023\uffc0\026\uffc0\044\uffc0\045\uffc0\064" +
    "\uffc0\001\002\000\004\056\346\001\002\000\036\002\uffbf" +
    "\003\uffbf\006\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\020" +
    "\uffbf\021\uffbf\023\uffbf\026\uffbf\044\uffbf\045\uffbf\064\uffbf" +
    "\001\002\000\016\006\016\013\ufffa\020\004\021\010\023" +
    "\005\026\020\001\002\000\034\003\057\006\ufffe\011\060" +
    "\012\045\013\ufffe\015\056\020\ufffe\021\ufffe\023\ufffe\026" +
    "\ufffe\044\046\045\052\064\063\001\002\000\004\013\352" +
    "\001\002\000\004\065\353\001\002\000\004\050\354\001" +
    "\002\000\004\057\355\001\002\000\016\002\ufffa\006\016" +
    "\020\004\021\010\023\005\026\020\001\002\000\004\002" +
    "\uffff\001\002\000\010\050\uffea\052\uffea\064\uffea\001\002" +
    "\000\010\050\uffeb\052\uffeb\064\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\022\002\013\003\014\004\012\010\016\022" +
    "\010\023\006\032\011\034\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\346\012\046\014\052\015" +
    "\050\016\054\020\063\021\047\024\060\035\347\046\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\302\001\001\000\016\004\012\010\016\022\010\023\006" +
    "\032\011\034\301\001\001\000\016\004\012\010\016\022" +
    "\010\023\006\032\011\034\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\012\010" +
    "\016\022\010\023\006\032\011\034\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\027\011\031\022\030\001\001\000" +
    "\004\037\042\001\001\000\004\041\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\040\001\001\000\006\005\036\022\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\046\014\052\015\050" +
    "\016\054\020\063\021\047\024\060\035\053\046\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\231\001" +
    "\001\000\002\001\001\000\022\012\046\014\203\015\050" +
    "\016\054\020\063\021\047\024\060\046\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\026\120" +
    "\046\103\047\121\001\001\000\012\025\073\026\101\027" +
    "\116\046\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\073\026\101\027\100\046\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\115\026\101\046\103\001\001\000\002\001\001\000" +
    "\012\025\073\026\101\027\113\046\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\110\026\101\046\103\001\001\000\002\001" +
    "\001\000\006\026\112\046\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\124\046\103\001\001\000\010" +
    "\026\120\046\103\047\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\120\046\103" +
    "\047\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\174\044\175\045" +
    "\170\001\001\000\004\043\224\001\001\000\002\001\001" +
    "\000\010\013\174\044\222\045\170\001\001\000\004\043" +
    "\216\001\001\000\004\043\214\001\001\000\002\001\001" +
    "\000\004\042\176\001\001\000\010\013\174\044\211\045" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\046\014\052\015\050\016\054\020\063\021\047\024" +
    "\060\035\202\046\061\001\001\000\022\012\046\014\203" +
    "\015\050\016\054\020\063\021\047\024\060\046\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\046\014\052\015\050\016\054\020\063\021" +
    "\047\024\060\035\207\046\061\001\001\000\022\012\046" +
    "\014\203\015\050\016\054\020\063\021\047\024\060\046" +
    "\061\001\001\000\002\001\001\000\004\042\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\046\014\237\015" +
    "\050\016\054\020\063\021\047\024\060\046\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\243\001\001\000\002\001\001\000\006\030\247" +
    "\031\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\012\046\014\052" +
    "\015\050\016\054\020\063\021\047\024\060\035\252\046" +
    "\061\001\001\000\022\012\046\014\203\015\050\016\054" +
    "\020\063\021\047\024\060\046\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\046\014\052\015\050\016\054\020\063\021" +
    "\047\024\060\035\260\046\061\001\001\000\022\012\046" +
    "\014\203\015\050\016\054\020\063\021\047\024\060\046" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\046\014\052\015\050\016\054\020\063\021\047" +
    "\024\060\035\267\046\061\001\001\000\022\012\046\014" +
    "\203\015\050\016\054\020\063\021\047\024\060\046\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\334\001\001\000\002\001\001" +
    "\000\010\022\306\033\307\041\305\001\001\000\002\001" +
    "\001\000\004\041\327\001\001\000\002\001\001\000\004" +
    "\041\311\001\001\000\002\001\001\000\004\022\313\001" +
    "\001\000\002\001\001\000\010\022\306\033\315\041\305" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\321\022\030\001\001\000\002\001\001\000\024\012\046" +
    "\014\052\015\050\016\054\020\063\021\047\024\060\035" +
    "\322\046\061\001\001\000\022\012\046\014\203\015\050" +
    "\016\054\020\063\021\047\024\060\046\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\331\001\001\000" +
    "\002\001\001\000\010\022\306\033\333\041\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\012\010\016" +
    "\022\010\023\006\032\011\034\350\001\001\000\022\012" +
    "\046\014\203\015\050\016\054\020\063\021\047\024\060" +
    "\046\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\012\010\016" +
    "\022\010\023\006\032\011\034\355\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public static Nodo padre;
        public int cont  = 0;
        public String ambitoActual = "%Global"; 

        //manejo de ambitos
        ArrayList<ElementoTS> elementosNoEncontrado = new ArrayList<ElementoTS>();
        ArrayList<ElementoTS> elementosEncontrado = new ArrayList<ElementoTS>();
        ArrayList<Nodo> CheckNodes = new ArrayList<Nodo>();

        public void buscarEnStandby(ElementoTS funcion){
                        for(ElementoTS elemStandby : elementosStandby){
                                boolean found = false;
                                for(ElementoTS elemFuncion : funcion.getParametros()){
                                        if( elemStandby.getID().equals(elemFuncion.getID()) ){
                                                found = true;
                                        } 
                                }
                                if(found){
                                       
                                                elemStandby.setAmbito(funcion.getAmbito());
                                                elementosEncontrado.add(elemStandby);
                                        
                                        
                                } else{
                                        
                                       
                                               elementosNoEncontrado.add(elemStandby); 
                                        
                                }

                        }
        }

                

        //deteccion y recuperacion de errores
        public static ArrayList<String> ErroresSintacticos = new ArrayList<String>(); 

        public static ArrayList<ElementoTS> ArregloSimbolos = new ArrayList<ElementoTS>(); 
        public static ArrayList<ElementoTS> ArregloFunciones = new ArrayList<ElementoTS>(); //arreglo para funciones

        public static ArrayList<ElementoTS> elementosStandby = new ArrayList<ElementoTS>();

        public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        report_expected_token_ids(); 
        //System.out.println(ErroresSintacticos); 
        expected_token_ids(); 
        }

        /*public void unrecovered_syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        }*/

        //gen deberia retornar un string o una lista? Depende del contexto en el que se use 

        public static boolean BuscaTipo(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean buscarExistenciaID(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID())) {
                                return true;
                        }
                }
                return false;
        }
        

           public static boolean BuscaTipoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }
     
        public static boolean BuscaAmbito(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getAmbito().equals(elemento.getAmbito())){
                                return true;
                        }
                }
                return false;
        }

        public static boolean BuscaAmbitoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(elemento.getAmbito()))){
                                return true;
                        }
                }
                return false;
        }

        public static String returnTipo(String id){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnTipoFuncion(String id){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getID().equals(id))) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnAmbitoFuncion(String ambito){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(ambito))) {
                                return element.getAmbito();
                        }
                }
                return "Error";
        }

        public static ElementoTS returnElementoTS(String ID, String tipo){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(ID) && 
                                element.getTipo().equals(tipo)) {
                                return element;
                        }
                }
                return null;
        }

        public static String returnTipoRecord(String id){
                String retorno = "";
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {


                                switch(element.getTipo()){
                                        case "STRING": 
                                        case "INTEGER":
                                        case "REAL":
                                        case "BOOLEAN":
                                        case "RECORD":
                                                break;
                                        default:
                                                retorno = element.getTipo();
                                                break;
                                }
                                break;
                        }
                }
                if(retorno.equals("")){
                        return "Error";
                } else{
                        return retorno;
                }
        }

        public static void printRecord(ElementoTS record){
                for(ElementoTS element : record.getRecordVars()) {
                        System.out.println("ID: "  +  element.getID() + ", Tipo: " + element.getTipo() + ", Ambito: " + element.getAmbito());
                }
        }

        public static boolean checkRecordVar(ElementoTS record, ElementoTS elemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean checkRecordVarConID(ElementoTS record, String IDElemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(IDElemento)) {
                                return false;
                        }
                }
                return true;
        }

        public static String returnTipoVariableRecord(ElementoTS record, String id){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static ElementoTS recursivaRecord(ElementoTS tipoRecord, Nodo nodo){


                if(nodo.getHijos().get(2).getValor() == "vacio"){ //fin de recursion
                        //agregar los ids que puedan faltar (mismo codigo de abajo)
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }
                                        
                                }

                                
                                
                        }

                        return tipoRecord;
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }
                                        
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));
                                
                                
                        }
                }

        }

        public static ElementoTS convertirVariableARecord(ElementoTS elemento, String ID){
                //primero buscar el tipo record
                ElementoTS record  = new ElementoTS();
                for(ElementoTS element : ArregloSimbolos){
                        if(element.getID().equals(ID) && element.getTipo().equals("RECORD")){
                                record = element;
                                break;
                        }
                }

                //convertir el elemento mandado a Record
                elemento.setRecordVars(record.getRecordVars());

                return elemento;
        }

        public static ArrayList<ElementoTS> recorrerDeclaracionesFuncion(ArrayList<ElementoTS> arreglo, Nodo nodo, String ambito){

                int tam = 0; 

                try{
                        tam = nodo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam == 0){ 
                        /*llego al fondo de la  recursion, osea no existe un tercer nodo en el padre, entonces
                        significa que es el final de la recursion. */
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){ 
                                //en caso que solo sea un ID que se esta declarando
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                return arreglo;
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }
                                        
                                }

                                
                        }

                        return arreglo;
                
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //revisar si el nodo de la mas izquierda tiene NULL o no
                                //si tiene NULL significa que tiene una lista de IDs.
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                        
                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }
                                        
                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);
                                
                        }
                }
        }

       public static boolean revisarArreglo(ElementoTS element, ArrayList<ElementoTS> arreglo){
               //esta funcion simplemente revisa que el arreglo mandado contenga un elemento mandado
               //si el arreglo esta vacio, regresar verdadero para que el elemento se agregue
               //si no, recorrer en busca del elemento en el arreglo. es falso cuando si hay un match

               if(arreglo.size()  == 0){
                       return true;
               } else{
                    for(ElementoTS elem : arreglo){
                        if(element.getID().equals(elem.getID())){ 
                                return false;
                                                        
                        }
                    }  
                    return true; 
               }
       }
       
       

       public void revisarArregloStanby_Global(){ //al final revisa que variables extras quedan que no se encontraron
                elementosNoEncontrado.clear();
                elementosEncontrado.clear();

                for(ElementoTS elementoStanby : elementosStandby){

                        boolean found =  false;
                        for(ElementoTS elementoTablaSimbolo : ArregloSimbolos){
                                if( elementoStanby.getID().equals(elementoTablaSimbolo.getID()) ){
                                        found = true;
                                } 
                        }

                        if(found){
                                        elementosEncontrado.add(elementoStanby);
                        } else{
                                        elementosNoEncontrado.add(elementoStanby);
                        }
                }
               
       }

//        public void addErrores(Nodo node){
//                for(Nodo nodoFOR: node.getHijos()){
//                        addErrores(nodoFOR);
//                        if(nodoFOR.getEtiqueta().equals("expresion_matematica") && 
//                        (nodoFOR.getValor().equals("Error") || nodoFOR.getValor().equals("Error de Tipos.")) ){
//                                int size = nodoFOR.getHijos().size();

//                                switch(size){
//                                        case 1:{
//                                                Nodo nodoTermino = nodoFOR.getHijos().get(0);
//                                                Nodo hijoTermino = nodoTermino.getHijos().get(0);
//                                                Nodo hijoFinal = hijoTermino.getHijos().get(0);

//                                                if(hijoTermino.getEtiqueta().equals("expresion_matematica")){
//                                                        addErrores(hijoFinal);
//                                                } else{
//                                                        CheckNodes.add(nodoFOR);
//                                                        //hay que revisar que ese elmento existe en algun lado.

//                                                }
                                               


//                                                break;
//                                        } 
//                                        case 3:{
//                                                break;
//                                        }
//                                }
//                        }
//                }
//        }

//        public void revisarErrorExprMatematica(Nodo nodo, ElementoTS funcion){
//                System.out.println("Size: " + nodo.getHijos().size());
//                if(nodo.getHijos().size() == 3){

//                }
//        }
          


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root ::= encabezado 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("root");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo) hijo1);

        parser.padre = (Nodo) nodo;

        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= declaraciones_principales cuerpo_main declaraciones_principales RETURN NUM PUNTOCOMA CURLYDER declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque principal, bloque = 0

                    //NODO PADRE
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("encabezado");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    //TERMINALES
                    //AGREGAR NO TERMINALES
                    //nodo.addHijos(nProcedure);
                    //nodo.addHijos(nid);
                    nodo.addHijos((Nodo)hijo1);
                    //nodo.addHijos(nIS);
                    nodo.addHijos((Nodo)hijo2);
                    nodo.addHijos((Nodo)hijo3);
                    nodo.addHijos((Nodo)hijo4);


                //     System.out.println("Size del arreglo global: " + elementosStandby.size());
                //     //RECORRER ESE ARREGLO EN BUSQUEDA DE VARIABLES QUE NO SE ENCONTRARON. 

                //         revisarArregloStanby_Global();
                    
                //         if(elementosEncontrado.size() > 0){ //imprimir los que encontro
                //                 for(ElementoTS elem : elementosEncontrado){
                //                         System.out.println("ID: "  + elem.getID() + ", Ambito: " + elem.getAmbito());
                //                 }
                //                         elementosEncontrado.clear();
                //         }
                
                //         if(elementosNoEncontrado.size() > 0){ //imrpimir los que no encontro
                //         //error
                //                 for(ElementoTS elem : elementosNoEncontrado){
                //                         System.out.println("No se encontro el ID declarado: "  + elem.getID() + " en el Ambito: " + elem.getAmbito());
                //                 }

                //                 elementosNoEncontrado.clear();
                //         }
                    

                    

                    RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_main ::= listaProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("cuerpo_main");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    nodo.addHijos((Nodo)hijo1);

                    RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_principales ::= inicioProgram declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                nodo.addHijos((Nodo)hijo1); 
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones_principales ::= declaracionesVAR declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor(" : ");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;
        
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones_principales ::= inicioFunction declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor("FUNCTION");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones_principales ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaProposiciones ::= proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijito1 = ((Nodo)hijo1);
                nodo.setValor(hijito1.getValor());

                for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                }

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaProposiciones ::= listaProposiciones proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaProposiciones");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                
                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaIdentificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaIdentificadores ::= listaIdentificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES
                
                Nodo nid = new Nodo();	
                nid.setEtiqueta("ID");	
                nid.setValor(t2.toString());	
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();	
                        nid2.setEtiqueta("ID");	
                        nid2.setValor(hijo.getValor());	
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }

                
                nodo.addHijos(nid);

                RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaIdentificadores ::= listaIdentificadores COMA tipovar IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES
                
                Nodo nid = new Nodo();	
                nid.setEtiqueta("ID");	
                nid.setValor(t2.toString());	
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();	
                        nid2.setEtiqueta("ID");	
                        nid2.setValor(hijo.getValor());	
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }

                
                nodo.addHijos(nid);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesVAR ::= tipovar listaIdentificadores PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque en 0

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING": 
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                //System.out.println("Esto es: " + hijo.getValor()); 

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global"); 
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }   
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                                
                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global"); 
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);  
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }
                                                
                                                        
                                                
                                                }
                                }
                                break;
                  
                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesVAR ::= tipovar listaIdentificadores asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

           //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING": 
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global"); 
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }   
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                                
                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global"); 
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);  
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }
                                                
                                                        
                                                
                                                }
                                }
                                break;
                  
                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones CURLYDER ELSE CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;         
           

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipomain ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("INT");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipomain ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipovar ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipovar ::= CHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("CHAR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipovar ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovar ::= ASTERISCO INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("APUNTADOR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovar ::= ASTERISCO CHAR 
            {
              Object RESULT =null;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("APUNTADOR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_rel_completos ::= EQUAL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;
    
                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_rel_completos ::= OPREL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_condicional ::= OPCONDICIONALES 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nAND = new Nodo();
                nAND.setEtiqueta("OPCONDICIONAL");
                nAND.setValor(t1.toString());
                nAND.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion op_condicional expresion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion_parentesis 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
               
        //        for(int i = 0; i < hijo.getHijos().size() ; i++){
        //                 nodo.addHijos(hijo.getHijos().get(i));
        //         }
                nodo.addHijos(hijo);

                RESULT = nodo; 
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= condicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_parentesis ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_parentesis");
                
                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                
                nodo.addHijos(hijo);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_parentesis",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= IDENTIFICADOR op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nNUM = new Nodo();
                nNUM.setEtiqueta("INTEGER");
                nNUM.setValor(t2.toString());
                nNUM.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nNUM);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= IDENTIFICADOR op_rel_completos CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("CHAR");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= NUM op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("INTEGER");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("INTEGER");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicion ::= CONSTCHAR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("CHAR");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= IDENTIFICADOR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);
                

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proposicion ::= condicionIF 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor("IF");

                nodo.setId(parser.cont);
                parser.cont++;

                // for(int i = 0; i < hijo.getHijos().size() ; i++){
                //         nodo.addHijos(hijo.getHijos().get(i));
                // }

                nodo.addHijos(hijo);


                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // proposicion ::= cicloWHILE 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("WHILE");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                //TERMINALES

                //AGREGAR NO TERMINALES                         

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // proposicion ::= cicloFOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("FOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // proposicion ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // proposicion ::= write PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                             
                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proposicion ::= read PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                             
                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // proposicion ::= asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // proposicion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cicloWHILE ::= WHILE PARIZQ condicion PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloWhile");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cicloFOR ::= FOR PARIZQ asignacionVAR PUNTOCOMA condicion PUNTOCOMA incrementando PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cicloFOR ::= FOR PARIZQ asignacionVAR PUNTOCOMA condicion PUNTOCOMA decrementando PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cicloFOR ::= FOR condicion QUESTIONMARK NUM DECISION NUM PUNTOCOMA proposicion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // incrementando ::= IDENTIFICADOR INCREMENTADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "++");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementando",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decrementando ::= IDENTIFICADOR DECREMENTADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "--");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementando",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacionVAR ::= IDENTIFICADOR EQUAL expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor("=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                //comprobacion de tipos
                //revisar que T1 sea el mismo tipo de expresion_matematica
                String tipo = returnTipo(t1.toString());
                // String tipo1 = returnAmbitoFuncion(t1.toString());
                // if(tipo.equals("Error")){

                //         //retorna error si no la encontro, entonces subir el valor para comprobar si existe en 
                //         //la gramatica de FUNCTION.
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         element.setAmbito("Global");
                //         elementosStandby.add(element);

                        
                        
                // }else{
                //         if(hijo.getError()){ //si expr_mat es un error
                //                 System.out.println("Error: "  + hijo.getMensaje());
                //                 hijo.setValor("Error de Tipos.");
                //         }else{ //si todo esta bien, revisar si son iguales.
                //                 if(tipo.equals(hijo.getValor()) ||
                //                 (tipo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //                 }else{
                //                         System.out.println("Error: " + "El tipo de " + 
                //                         t1.toString()  + " es diferente que el valor asignado. Se esperaba " + tipo);
                //                 }
                //         }
                // }
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1); 
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacionVAR ::= IDENTIFICADOR DOT IDENTIFICADOR ASIGNACION expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor(":=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                Nodo hijo = ((Nodo)hijo1);


                //ahora a revisar si ese id.id realmente existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());

                // String tipoAtributo = ""; //es el tipo del atributo id.x (tipo de x)

                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);
                        
                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 tipoAtributo = returnTipoVariableRecord(elemento, t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record 
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //                 tipoAtributo = "Error";
                //         }

                // }

                //comprobacion de otros tipos

                
                // if(hijo.getError()){ //si expr_mat es un error
                //         System.out.println("Error: "  + hijo.getMensaje());
                //         hijo.setValor("Error de Tipos.");
                // } else{ //si todo esta bien, revisar si son iguales.
                //         if(tipoAtributo.equals(hijo.getValor()) ||
                //         (tipoAtributo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //         } else{
                //                         System.out.println("Error: " + "El tipo de " + 
                //                         t2.toString()  + " es diferente que el valor asignado. Se esperaba " + tipoAtributo + " y se encontro un " + hijo.getValor());
                //         }
                // }
                
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                nodo.addHijos((Nodo)hijo1); 
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_matematica ::= termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //por ejemplo 2x+a, el termino es 2x y a Y los factores serian "2 y x"

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                nodo.addHijos((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                if(hijo.getError()){ //subir error y mensaje 
                        nodo.setError(true);
                        hijo.setValor("Error de tipos.");
                        nodo.setMensaje(hijo.getMensaje());
                        CheckNodes.add(nodo);     
                }
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_matematica ::= OPSUM termino 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //en que caso se usa esto?

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo1);
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_matematica ::= expresion_matematica OPSUM termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                Nodo hijoMAT = ((Nodo)hijo1);
                Nodo hijoTER = ((Nodo)hijo2);

                // if(!(hijoMAT.getValor().equals(hijoTER.getValor())) ){ //si los valores no son iguales, hay inconsistencia de tipos
                //         nodo.setError(true);
                //         if(hijoMAT.getError() || hijoTER.getError()){ //revisar si alguno de los hijos tiene errores
                //                 nodo.setMensaje(hijoMAT.getMensaje());  //asignar el error de la izquierda
                //                 nodo.setValor("Error de Tipos");

                //                 // CheckNodes.add(nodo);

                //                 // // //comprobacion de ambito y de tipos:
                //                 // // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         } 
                //         else{ //si todo esta bien, asignar error de inconsistencia a nodo padre
                //                 nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //         "Se esta operando un tipo " + hijoMAT.getValor() + " y un tipo " + hijoTER.getValor());
                //                 nodo.setValor("Error de Tipos.");

                //                 // //comprobacion de ambito y de tipos:
                //                 // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         }
                        
                // } else{ //setear el valor si todo esta bien
                //         nodo.setValor(hijoMAT.getValor());
                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo2);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // termino ::= factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //este

                Nodo nodo = new Nodo();         
                nodo.setEtiqueta("termino");
                
                Nodo hijo = ((Nodo)hijo1);

                // if(hijo.getEtiqueta().equals("expresion_matematica")){
                //         nodo.setValor(hijo.getValor());
                // } else{
                //         nodo.setValor(hijo.getEtiqueta());
                // }

                // if(hijo.getError()){ //quitar valor y subir mensaje
                //         nodo.setMensaje(hijo.getMensaje());
                //         hijo.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(hijo);
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= termino OPMULT factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("termino");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo opmult = new Nodo();
                opmult.setEtiqueta("OPMULT");
                opmult.setValor(t1.toString());
                opmult.setId(parser.cont);
                parser.cont++;

                // Nodo hijoTER = ((Nodo)hijo1);
                // Nodo hijoFAC = ((Nodo)hijo2);

                // if(hijoFAC.getEtiqueta().equals("expresion_matematica")){
                //         if(!(hijoTER.getValor().equals(hijoFAC.getValor())) ){
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 } 
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // } else{
                //         if(!(hijoTER.getValor().equals(hijoFAC.getEtiqueta())) ){
                               
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 } 
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)opmult);
                nodo.addHijos((Nodo)hijo2);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                //buscar en TS ese Identificador y retornar tipo
                // String tipo = returnTipo(t1.toString());
 
                // if(tipo.equals("Error")){  

                //         //no lo encontro globalmente, ahora revisar en la funcion
                        
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         elementosStandby.add(element);

                //         nodo.setEtiqueta("Error");
                // }else{
                //         if(tipo == "INTEGER"){
                //                 tipo = "NUM";
                //         }
                //         nodo.setEtiqueta(tipo);
                //         nodo.setValor(t1.toString());
                // }

                nodo.addHijos(nid);
                
                RESULT = nodo;
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= IDENTIFICADOR DOT IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                //buscar si esa variable record existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());



                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);
                        
                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 String tipo2 = returnTipoVariableRecord(elemento, t2.toString());
                //                 nodo.setEtiqueta(tipo2);
                //                 nodo.setValor(t1.toString() + "." + t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record 
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //         }

                // }


                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("llamada_procedure_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nod = ((Nodo)hijo1);

                for(Nodo node : nod.getHijos()){
                        nodo.addHijos(node);
                }

                // nodo.addHijos((Nodo)hijo1);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INTEGER");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= CONSTSTRING 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STRING");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CHAR");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= OPBOOL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPBOOL");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= PARIZQ expresion_matematica PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                

                Nodo hijito1 = ((Nodo)hijo1);

                nodo.setValor(hijito1.getValor());
                
                // if(hijito1.getError()){
                //         nodo.setError(true);
                //         hijito1.setValor("Error de tipos.");
                // }
                
                nodo.setId(parser.cont);
                parser.cont++;


                nodo.addHijos(hijito1);

                // for(int i = 0; i < hijito1.getHijos().size(); i++){
                //        nodo.addHijos(hijito1.getHijos().get(i));
                // }
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inicioProgram ::= tipomain MAIN PARIZQ PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioProgram");
              nodo.setId(parser.cont);
              //nodo.setValor(t1.toString());
              parser.cont++;

              Nodo tipo = ((Nodo)hijo1); 

              //TERMINALES
              nodo.addHijos(tipo); 
              //nodo.setValor(tipo.getValor()); 

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inicioProgram ::= tipomain MAIN PARIZQ listaIdentificadores PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("NombreProgram");
              nodo.setValor(t2.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              nodo.addHijos((Nodo)hijo1); 
              RESULT = nodo;
                     

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpoProposiciones ::= BEGIN listaProposiciones END PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoProposiciones");
              nodo.setValor("listaProposiciones");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo hijo = ((Nodo)hijo1);


              if(hijo.getHijos().size() > 2){
                        for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                        }
              } else{
                      nodo.setEtiqueta(hijo.getEtiqueta());
                      nodo.setValor(hijo.getValor());
                      for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                      }
              }
              
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProposiciones",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicioFunction ::= FUNCTION IDENTIFICADOR OPDECLARACION tipovar PUNTOCOMA cuerpoprocedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //Si encuentra esto, es un error.
              //No pueden haber funciones con cero parametros:

              //se agrega al arreglo para que el comprobador de tipos/ambito trate esta funcion como un procedure.
              
              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                                break;
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              System.out.println("La funcion " +  t2.toString() + " necesita parametros declarados.");

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //este segundo permite la declaracion de funciones 
                 
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0; 


                try{
                        tam = hijo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString()); 
                                
                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }                               
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString()); 
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }     
                                }
                        }
                        
                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva
                                                
                                } 
                }
    

                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;          
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              //nodo.addHijos((Nodo)hijo3);
              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER CURLYIZQ declaracionesVARAdentroFunctionProcedure listaProposiciones RETURN IDENTIFICADOR PUNTOCOMA CURLYDER 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0; 


                try{
                        tam = hijo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString()); 
                                
                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }                               
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString()); 
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }     
                                }
                        }
                        
                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva
                                                
                                } 
                }
    

                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;          
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              nodo.addHijos((Nodo)hijo4);
              RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionesVAR_procedure_funcion ::= tipovar listaIdentificadores 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR_pro");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();
                
                int size = hijo.getHijos().size();

                if(hijo.getValor() != null){
                        if(size == 0){ //si es solo unico, solo un ID
                                ElementoTS elemento = new ElementoTS();
                                elemento.setID(hijo.getValor());
                                System.out.println("ID del elemento: " + elemento.getID()); 
                                elemento.setTipo(tipo);
                                elemento.setAmbito(""); 
                                        if(BuscaTipoFuncion(elemento)){
                                                ArregloFunciones.add(elemento);  
                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                        } else {  //error, ya existe ese simbolo
                                                System.out.println("Ya existe ese elemento con ese id, tipo y ambito");
                                        }                                
                        } 

                } else{ //es null cuando son varios
                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                
                                        ElementoTS elemento = new ElementoTS();
                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                        elemento.setTipo(tipo);
                                        elemento.setAmbito(""); 
                                                if(BuscaTipoFuncion(elemento)){
                                                        ArregloFunciones.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                } else {  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo() + " y con el ambito: " + elemento.getAmbito());
                                                }
                        }
                }

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionesVAR_procedure_funcion ::= listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracionesVAR_procedure_funcion ::= 
            {
              Object RESULT =null;
		
        
                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamada_procedure_funcion ::= IDENTIFICADOR PARIZQ lista_parametros PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("llamada_procedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t1.toString());
              nid.setId(parser.cont);
              parser.cont+=1;//id, parizq, parder

              nodo.addHijos(nid); 

              Nodo hijito1 = ((Nodo)hijo1);

              for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                        
                      }
              //nodo.setValor("(" + hijito1.getValor() + ")");

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_procedure_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_parametros ::= factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("lista_parametros");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

                // Nodo nid = new Nodo();
                // nid.setEtiqueta("NUM");
                // nid.setValor(t1.toString());
                // nid.setId(parser.cont);
                // parser.cont+=1;

                Nodo node1 = ((Nodo)hijo1);

                Nodo node = ((Nodo)hijo2);


                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));
                        
                }

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_parametros ::= COMA factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("lista_parametros");
                nodo.setId(parser.cont);
                parser.cont++;


                Nodo node1 = ((Nodo)hijo1);
                Nodo node = ((Nodo)hijo2);

                

                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));
                        
                }

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_parametros ::= 
            {
              Object RESULT =null;
		
                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpoprocedure_funcion ::= declaracionesVARAdentroFunctionProcedure cuerpoProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoprocedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo node = ((Nodo)hijo1);

              if(node != null){
                nodo.addHijos((Nodo)hijo1);

              }

              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoprocedure_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionesVARAdentroFunctionProcedure ::= tipovar listaIdentificadores PUNTOCOMA declaracionesVARAdentroFunctionProcedure 
            {
              Object RESULT =null;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("declaracionesVARAdentroFunctionProcedure");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo)hijo1);
        nodo.addHijos((Nodo)hijo2);
        nodo.addHijos((Nodo)hijo3);

              RESULT = nodo;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracionesVARAdentroFunctionProcedure ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // read ::= READ PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nid);

              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // read ::= READ PARIZQ IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              Nodo nid2 = new Nodo();
              nid2.setEtiqueta("ID");
              nid2.setValor(t4.toString());
              nid2.setId(parser.cont);
              parser.cont+=1;


              nodo.addHijos(nid);
              nodo.addHijos(nid2);

              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // write ::= WRITE PARIZQ CONSTSTRING COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t5.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nid);

              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // write ::= WRITE PARIZQ CONSTSTRING COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nCONSTCHAR = new Nodo();
              nCONSTCHAR.setEtiqueta("CONSTCHAR");
              nCONSTCHAR.setValor(t5.toString());
              nCONSTCHAR.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTCHAR);

              RESULT = nodo;         
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // write ::= WRITE PARIZQ CONSTSTRING COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont++;//string

              Nodo nCONSTSTRING2 = new Nodo();
              nCONSTSTRING2.setEtiqueta("CONSTSTRING");
              nCONSTSTRING2.setValor(t5.toString());
              nCONSTSTRING2.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTSTRING2);

              RESULT = nodo;            
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // write ::= WRITE PARIZQ CONSTSTRING COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // write ::= WRITE PARIZQ CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;                     
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // write ::= WRITE PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;                     
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // write ::= WRITE PARIZQ IDENTIFICADOR COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // write ::= WRITE PARIZQ IDENTIFICADOR COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // write ::= WRITE PARIZQ IDENTIFICADOR COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTCHAR");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // write ::= WRITE PARIZQ IDENTIFICADOR COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTSTRING");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // write ::= WRITE PARIZQ IDENTIFICADOR COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // write ::= WRITE PARIZQ CONSTSTRING COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // write ::= WRITE PARIZQ PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor("write");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              
              RESULT = nodo;      

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
