
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\006\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\002\000\002\035\003\000" +
    "\002\035\004\000\002\041\003\000\002\041\005\000\002" +
    "\041\006\000\002\032\005\000\002\032\006\000\002\012" +
    "\011\000\002\012\015\000\002\023\003\000\002\023\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\043\003\000\002\043\003\000\002\042\003\000\002" +
    "\044\005\000\002\044\003\000\002\044\003\000\002\045" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\015\011" +
    "\000\002\016\015\000\002\016\015\000\002\016\012\000" +
    "\002\030\004\000\002\031\004\000\002\024\005\000\002" +
    "\024\007\000\002\027\003\000\002\027\004\000\002\027" +
    "\005\000\002\025\003\000\002\025\005\000\002\026\003" +
    "\000\002\026\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\004\007\000\002\004\010\000\002\037" +
    "\006\000\002\010\010\000\002\010\010\000\002\010\016" +
    "\000\002\033\004\000\002\033\007\000\002\033\010\000" +
    "\002\033\006\000\002\033\002\000\002\046\007\000\002" +
    "\047\004\000\002\047\005\000\002\047\002\000\002\011" +
    "\004\000\002\005\006\000\002\005\002\000\002\021\006" +
    "\000\002\021\010\000\002\020\010\000\002\020\010\000" +
    "\002\020\010\000\002\020\010\000\002\020\006\000\002" +
    "\020\006\000\002\020\010\000\002\020\010\000\002\020" +
    "\010\000\002\020\010\000\002\020\012\000\002\020\012" +
    "\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\030\003\ufffa\006\015\011\ufffa\012\ufffa\015" +
    "\ufffa\020\004\021\007\025\017\047\ufffa\050\ufffa\074\ufffa" +
    "\001\002\000\006\014\ufff0\074\uffee\001\002\000\020\003" +
    "\056\011\052\012\044\015\051\047\046\050\064\074\060" +
    "\001\002\000\004\014\344\001\002\000\006\014\uffef\074" +
    "\uffec\001\002\000\004\074\310\001\002\000\034\002\ufffa" +
    "\003\ufffa\006\015\011\ufffa\012\ufffa\013\ufffa\015\ufffa\020" +
    "\004\021\007\025\017\047\ufffa\050\ufffa\074\ufffa\001\002" +
    "\000\034\002\ufffa\003\ufffa\006\015\011\ufffa\012\ufffa\013" +
    "\ufffa\015\ufffa\020\004\021\007\025\017\047\ufffa\050\ufffa" +
    "\074\ufffa\001\002\000\004\002\304\001\002\000\004\002" +
    "\000\001\002\000\004\074\021\001\002\000\034\002\ufffa" +
    "\003\ufffa\006\015\011\ufffa\012\ufffa\013\ufffa\015\ufffa\020" +
    "\004\021\007\025\017\047\ufffa\050\ufffa\074\ufffa\001\002" +
    "\000\010\060\uffed\062\uffed\074\uffed\001\002\000\024\002" +
    "\ufffb\003\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\047\ufffb" +
    "\050\ufffb\074\ufffb\001\002\000\004\035\022\001\002\000" +
    "\010\020\025\021\024\025\017\001\002\000\004\060\026" +
    "\001\002\000\010\060\uffec\062\uffec\074\uffec\001\002\000" +
    "\010\060\uffee\062\uffee\074\uffee\001\002\000\012\004\uffaf" +
    "\020\025\021\024\025\017\001\002\000\004\004\043\001" +
    "\002\000\004\074\033\001\002\000\034\002\uffbd\003\uffbd" +
    "\006\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\020\uffbd\021" +
    "\uffbd\025\uffbd\047\uffbd\050\uffbd\074\uffbd\001\002\000\006" +
    "\057\034\060\035\001\002\000\012\035\ufff7\057\ufff7\060" +
    "\ufff7\062\ufff7\001\002\000\012\020\025\021\024\025\017" +
    "\074\037\001\002\000\030\003\uffaf\004\uffaf\011\uffaf\012" +
    "\uffaf\015\uffaf\020\025\021\024\025\017\047\uffaf\050\uffaf" +
    "\074\uffaf\001\002\000\022\003\uffb0\004\uffb0\011\uffb0\012" +
    "\uffb0\015\uffb0\047\uffb0\050\uffb0\074\uffb0\001\002\000\014" +
    "\035\ufff6\057\ufff6\060\ufff6\062\ufff6\074\ufff6\001\002\000" +
    "\004\074\041\001\002\000\014\035\ufff5\057\ufff5\060\ufff5" +
    "\062\ufff5\074\ufff5\001\002\000\034\002\uffb1\003\uffb1\006" +
    "\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\020\uffb1\021\uffb1" +
    "\025\uffb1\047\uffb1\050\uffb1\074\uffb1\001\002\000\020\003" +
    "\056\011\052\012\044\015\051\047\046\050\064\074\060" +
    "\001\002\000\004\063\276\001\002\000\036\003\uffdf\005" +
    "\uffdf\006\uffdf\011\uffdf\012\uffdf\013\uffdf\015\uffdf\020\uffdf" +
    "\021\uffdf\025\uffdf\047\uffdf\050\uffdf\067\uffdf\074\uffdf\001" +
    "\002\000\004\063\270\001\002\000\036\003\uffde\005\uffde" +
    "\006\uffde\011\uffde\012\uffde\013\uffde\015\uffde\020\uffde\021" +
    "\uffde\025\uffde\047\uffde\050\uffde\067\uffde\074\uffde\001\002" +
    "\000\036\003\uffdd\005\uffdd\006\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\015\uffdd\020\uffdd\021\uffdd\025\uffdd\047\uffdd\050\uffdd" +
    "\067\uffdd\074\uffdd\001\002\000\004\063\246\001\002\000" +
    "\004\063\210\001\002\000\004\060\207\001\002\000\036" +
    "\003\ufff9\005\ufff9\006\ufff9\011\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\020\ufff9\021\ufff9\025\ufff9\047\ufff9\050\ufff9\067\ufff9" +
    "\074\ufff9\001\002\000\022\003\056\005\205\011\052\012" +
    "\044\015\051\047\046\050\064\074\060\001\002\000\004" +
    "\060\204\001\002\000\004\060\203\001\002\000\014\042" +
    "\114\056\115\063\133\072\171\073\172\001\002\000\004" +
    "\060\202\001\002\000\004\060\201\001\002\000\036\003" +
    "\uffdc\005\uffdc\006\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc" +
    "\020\uffdc\021\uffdc\025\uffdc\047\uffdc\050\uffdc\067\uffdc\074" +
    "\uffdc\001\002\000\012\063\070\074\071\075\067\077\072" +
    "\001\002\000\004\060\066\001\002\000\036\003\uffd9\005" +
    "\uffd9\006\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\020\uffd9" +
    "\021\uffd9\025\uffd9\047\uffd9\050\uffd9\067\uffd9\074\uffd9\001" +
    "\002\000\006\042\103\043\102\001\002\000\004\074\113" +
    "\001\002\000\006\042\103\043\102\001\002\000\006\042" +
    "\103\043\102\001\002\000\004\070\074\001\002\000\004" +
    "\075\075\001\002\000\004\071\076\001\002\000\004\075" +
    "\077\001\002\000\004\060\100\001\002\000\020\003\056" +
    "\011\052\012\044\015\051\047\046\050\064\074\060\001" +
    "\002\000\036\003\uffd2\005\uffd2\006\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\015\uffd2\020\uffd2\021\uffd2\025\uffd2\047\uffd2\050" +
    "\uffd2\067\uffd2\074\uffd2\001\002\000\010\074\uffea\075\uffea" +
    "\077\uffea\001\002\000\010\074\uffeb\075\uffeb\077\uffeb\001" +
    "\002\000\004\074\105\001\002\000\012\046\uffe1\060\uffe1" +
    "\062\uffe1\070\uffe1\001\002\000\010\074\110\075\107\077" +
    "\111\001\002\000\012\046\uffe4\060\uffe4\062\uffe4\070\uffe4" +
    "\001\002\000\012\046\uffe0\060\uffe0\062\uffe0\070\uffe0\001" +
    "\002\000\012\046\uffe3\060\uffe3\062\uffe3\070\uffe3\001\002" +
    "\000\004\060\156\001\002\000\006\042\114\056\115\001" +
    "\002\000\020\033\124\044\123\063\125\074\132\075\120" +
    "\077\122\100\130\001\002\000\004\074\116\001\002\000" +
    "\004\034\117\001\002\000\020\033\124\044\123\063\125" +
    "\074\132\075\120\077\122\100\130\001\002\000\030\033" +
    "\uffc5\044\uffc5\045\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5" +
    "\074\uffc5\075\uffc5\077\uffc5\100\uffc5\001\002\000\012\044" +
    "\uffcd\045\150\060\uffcd\062\uffcd\001\002\000\030\033\uffc3" +
    "\044\uffc3\045\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\074" +
    "\uffc3\075\uffc3\077\uffc3\100\uffc3\001\002\000\016\033\124" +
    "\063\125\074\132\075\120\077\122\100\130\001\002\000" +
    "\030\033\uffc2\044\uffc2\045\uffc2\057\uffc2\060\uffc2\062\uffc2" +
    "\063\uffc2\074\uffc2\075\uffc2\077\uffc2\100\uffc2\001\002\000" +
    "\020\033\124\044\123\063\125\074\132\075\120\077\122" +
    "\100\130\001\002\000\006\044\146\060\uffce\001\002\000" +
    "\012\044\uffca\045\uffca\060\uffca\062\uffca\001\002\000\030" +
    "\033\uffc4\044\uffc4\045\uffc4\057\uffc4\060\uffc4\062\uffc4\063" +
    "\uffc4\074\uffc4\075\uffc4\077\uffc4\100\uffc4\001\002\000\030" +
    "\033\uffc6\044\uffc6\045\uffc6\057\uffc6\060\uffc6\062\uffc6\063" +
    "\uffc6\074\uffc6\075\uffc6\077\uffc6\100\uffc6\001\002\000\032" +
    "\033\uffc8\044\uffc8\045\uffc8\056\134\057\uffc8\060\uffc8\062" +
    "\uffc8\063\133\074\uffc8\075\uffc8\077\uffc8\100\uffc8\001\002" +
    "\000\022\033\124\057\136\062\uffb2\063\125\074\132\075" +
    "\120\077\122\100\130\001\002\000\004\074\135\001\002" +
    "\000\030\033\uffc7\044\uffc7\045\uffc7\057\uffc7\060\uffc7\062" +
    "\uffc7\063\uffc7\074\uffc7\075\uffc7\077\uffc7\100\uffc7\001\002" +
    "\000\016\033\124\063\125\074\132\075\120\077\122\100" +
    "\130\001\002\000\022\033\124\057\136\062\uffb2\063\125" +
    "\074\132\075\120\077\122\100\130\001\002\000\004\062" +
    "\141\001\002\000\004\060\142\001\002\000\062\003\uffb5" +
    "\005\uffb5\006\uffb5\011\uffb5\012\uffb5\013\uffb5\015\uffb5\020" +
    "\uffb5\021\uffb5\025\uffb5\033\uffb5\044\uffb5\045\uffb5\047\uffb5" +
    "\050\uffb5\057\uffb5\060\uffb5\062\uffb5\063\uffb5\067\uffb5\074" +
    "\uffb5\075\uffb5\077\uffb5\100\uffb5\001\002\000\004\062\uffb4" +
    "\001\002\000\022\033\124\057\136\062\uffb2\063\125\074" +
    "\132\075\120\077\122\100\130\001\002\000\004\062\uffb3" +
    "\001\002\000\016\033\124\063\125\074\132\075\120\077" +
    "\122\100\130\001\002\000\012\044\uffcb\045\150\060\uffcb" +
    "\062\uffcb\001\002\000\016\033\124\063\125\074\132\075" +
    "\120\077\122\100\130\001\002\000\012\044\uffc9\045\uffc9" +
    "\060\uffc9\062\uffc9\001\002\000\006\044\146\062\153\001" +
    "\002\000\030\033\uffc1\044\uffc1\045\uffc1\057\uffc1\060\uffc1" +
    "\062\uffc1\063\uffc1\074\uffc1\075\uffc1\077\uffc1\100\uffc1\001" +
    "\002\000\012\044\uffcc\045\150\060\uffcc\062\uffcc\001\002" +
    "\000\006\044\146\060\uffcf\001\002\000\010\074\071\075" +
    "\067\077\072\001\002\000\004\060\160\001\002\000\004" +
    "\074\162\001\002\000\004\062\173\001\002\000\006\072" +
    "\171\073\172\001\002\000\004\062\164\001\002\000\004" +
    "\066\165\001\002\000\020\003\056\011\052\012\044\015" +
    "\051\047\046\050\064\074\060\001\002\000\022\003\056" +
    "\011\052\012\044\015\051\047\046\050\064\067\167\074" +
    "\060\001\002\000\036\003\uffd4\005\uffd4\006\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\015\uffd4\020\uffd4\021\uffd4\025\uffd4\047" +
    "\uffd4\050\uffd4\067\uffd4\074\uffd4\001\002\000\036\003\ufff8" +
    "\005\ufff8\006\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\020" +
    "\ufff8\021\ufff8\025\ufff8\047\ufff8\050\ufff8\067\ufff8\074\ufff8" +
    "\001\002\000\006\060\uffd1\062\uffd1\001\002\000\006\060" +
    "\uffd0\062\uffd0\001\002\000\004\066\174\001\002\000\020" +
    "\003\056\011\052\012\044\015\051\047\046\050\064\074" +
    "\060\001\002\000\022\003\056\011\052\012\044\015\051" +
    "\047\046\050\064\067\176\074\060\001\002\000\036\003" +
    "\uffd3\005\uffd3\006\uffd3\011\uffd3\012\uffd3\013\uffd3\015\uffd3" +
    "\020\uffd3\021\uffd3\025\uffd3\047\uffd3\050\uffd3\067\uffd3\074" +
    "\uffd3\001\002\000\004\075\200\001\002\000\012\046\uffe2" +
    "\060\uffe2\062\uffe2\070\uffe2\001\002\000\036\003\uffdb\005" +
    "\uffdb\006\uffdb\011\uffdb\012\uffdb\013\uffdb\015\uffdb\020\uffdb" +
    "\021\uffdb\025\uffdb\047\uffdb\050\uffdb\067\uffdb\074\uffdb\001" +
    "\002\000\036\003\uffd8\005\uffd8\006\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\015\uffd8\020\uffd8\021\uffd8\025\uffd8\047\uffd8\050" +
    "\uffd8\067\uffd8\074\uffd8\001\002\000\036\003\uffda\005\uffda" +
    "\006\uffda\011\uffda\012\uffda\013\uffda\015\uffda\020\uffda\021" +
    "\uffda\025\uffda\047\uffda\050\uffda\067\uffda\074\uffda\001\002" +
    "\000\036\003\uffd6\005\uffd6\006\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\015\uffd6\020\uffd6\021\uffd6\025\uffd6\047\uffd6\050\uffd6" +
    "\067\uffd6\074\uffd6\001\002\000\004\060\206\001\002\000" +
    "\034\002\uffbe\003\uffbe\006\uffbe\011\uffbe\012\uffbe\013\uffbe" +
    "\015\uffbe\020\uffbe\021\uffbe\025\uffbe\047\uffbe\050\uffbe\074" +
    "\uffbe\001\002\000\036\003\uffd7\005\uffd7\006\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\015\uffd7\020\uffd7\021\uffd7\025\uffd7\047" +
    "\uffd7\050\uffd7\067\uffd7\074\uffd7\001\002\000\010\062\212" +
    "\074\213\100\211\001\002\000\006\057\231\062\232\001" +
    "\002\000\004\060\uffa0\001\002\000\006\057\214\062\215" +
    "\001\002\000\012\074\220\075\216\077\221\100\217\001" +
    "\002\000\004\060\uffa7\001\002\000\004\062\230\001\002" +
    "\000\004\062\227\001\002\000\006\056\224\062\223\001" +
    "\002\000\004\062\222\001\002\000\004\060\uffa4\001\002" +
    "\000\004\060\uffa6\001\002\000\004\074\225\001\002\000" +
    "\004\062\226\001\002\000\004\060\uffa2\001\002\000\004" +
    "\060\uffa3\001\002\000\004\060\uffa5\001\002\000\012\074" +
    "\235\075\233\077\236\100\234\001\002\000\004\060\uffa8" +
    "\001\002\000\004\062\245\001\002\000\004\062\244\001" +
    "\002\000\006\056\241\062\240\001\002\000\004\062\237" +
    "\001\002\000\004\060\uffab\001\002\000\004\060\uffac\001" +
    "\002\000\004\074\242\001\002\000\004\062\243\001\002" +
    "\000\004\060\uffa1\001\002\000\004\060\uffaa\001\002\000" +
    "\004\060\uffa9\001\002\000\012\063\250\074\071\075\067" +
    "\077\072\001\002\000\006\046\uffe7\062\uffe7\001\002\000" +
    "\012\063\250\074\071\075\067\077\072\001\002\000\006" +
    "\046\uffe6\062\uffe6\001\002\000\006\046\255\062\254\001" +
    "\002\000\012\063\250\074\071\075\067\077\072\001\002" +
    "\000\004\066\256\001\002\000\012\063\uffe9\074\uffe9\075" +
    "\uffe9\077\uffe9\001\002\000\020\003\056\011\052\012\044" +
    "\015\051\047\046\050\064\074\060\001\002\000\022\003" +
    "\056\011\052\012\044\015\051\047\046\050\064\067\260" +
    "\074\060\001\002\000\040\003\ufff2\005\ufff2\006\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\015\ufff2\016\261\020\ufff2\021\ufff2" +
    "\025\ufff2\047\ufff2\050\ufff2\067\ufff2\074\ufff2\001\002\000" +
    "\004\066\262\001\002\000\020\003\056\011\052\012\044" +
    "\015\051\047\046\050\064\074\060\001\002\000\022\003" +
    "\056\011\052\012\044\015\051\047\046\050\064\067\264" +
    "\074\060\001\002\000\036\003\ufff1\005\ufff1\006\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\015\ufff1\020\ufff1\021\ufff1\025\ufff1" +
    "\047\ufff1\050\ufff1\067\ufff1\074\ufff1\001\002\000\006\046" +
    "\255\062\uffe8\001\002\000\006\046\255\062\267\001\002" +
    "\000\006\046\uffe5\062\uffe5\001\002\000\010\074\071\075" +
    "\067\077\072\001\002\000\004\062\272\001\002\000\004" +
    "\066\273\001\002\000\020\003\056\011\052\012\044\015" +
    "\051\047\046\050\064\074\060\001\002\000\022\003\056" +
    "\011\052\012\044\015\051\047\046\050\064\067\275\074" +
    "\060\001\002\000\036\003\uffd5\005\uffd5\006\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\015\uffd5\020\uffd5\021\uffd5\025\uffd5\047" +
    "\uffd5\050\uffd5\067\uffd5\074\uffd5\001\002\000\004\074\277" +
    "\001\002\000\006\056\301\062\300\001\002\000\004\060" +
    "\uffae\001\002\000\004\074\302\001\002\000\004\062\303" +
    "\001\002\000\004\060\uffad\001\002\000\004\002\001\001" +
    "\002\000\024\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd" +
    "\015\ufffd\047\ufffd\050\ufffd\074\ufffd\001\002\000\024\002" +
    "\ufffc\003\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\047\ufffc" +
    "\050\ufffc\074\ufffc\001\002\000\010\057\034\060\342\074" +
    "\113\001\002\000\012\057\ufff7\060\ufff7\063\311\074\ufff7" +
    "\001\002\000\016\020\025\021\024\023\312\025\017\062" +
    "\uffb6\074\033\001\002\000\004\074\033\001\002\000\004" +
    "\062\323\001\002\000\006\035\317\057\034\001\002\000" +
    "\004\074\033\001\002\000\006\057\034\062\uffba\001\002" +
    "\000\010\020\025\021\024\025\017\001\002\000\004\060" +
    "\321\001\002\000\016\020\025\021\024\023\312\025\017" +
    "\062\uffb6\074\033\001\002\000\004\062\uffb9\001\002\000" +
    "\006\060\325\066\324\001\002\000\026\003\uffaf\011\uffaf" +
    "\012\uffaf\015\uffaf\020\025\021\024\025\017\047\uffaf\050" +
    "\uffaf\074\uffaf\001\002\000\034\002\uffbc\003\uffbc\006\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\015\uffbc\020\uffbc\021\uffbc\025" +
    "\uffbc\047\uffbc\050\uffbc\074\uffbc\001\002\000\020\003\056" +
    "\011\052\012\044\015\051\047\046\050\064\074\060\001" +
    "\002\000\022\003\056\011\052\012\044\013\330\015\051" +
    "\047\046\050\064\074\060\001\002\000\004\074\331\001" +
    "\002\000\004\060\332\001\002\000\004\067\333\001\002" +
    "\000\034\002\uffbb\003\uffbb\006\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\015\uffbb\020\uffbb\021\uffbb\025\uffbb\047\uffbb\050\uffbb" +
    "\074\uffbb\001\002\000\006\035\335\057\034\001\002\000" +
    "\010\020\025\021\024\025\017\001\002\000\006\060\337" +
    "\062\uffb7\001\002\000\016\020\025\021\024\023\312\025" +
    "\017\062\uffb6\074\033\001\002\000\004\062\uffb8\001\002" +
    "\000\004\060\343\001\002\000\034\002\ufff4\003\ufff4\006" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\020\ufff4\021\ufff4" +
    "\025\ufff4\047\ufff4\050\ufff4\074\ufff4\001\002\000\034\002" +
    "\ufff3\003\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3" +
    "\020\ufff3\021\ufff3\025\ufff3\047\ufff3\050\ufff3\074\ufff3\001" +
    "\002\000\004\063\345\001\002\000\006\062\347\074\033" +
    "\001\002\000\006\057\034\062\351\001\002\000\004\066" +
    "\350\001\002\000\034\002\uffc0\003\uffc0\006\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\015\uffc0\020\uffc0\021\uffc0\025\uffc0\047" +
    "\uffc0\050\uffc0\074\uffc0\001\002\000\004\066\352\001\002" +
    "\000\034\002\uffbf\003\uffbf\006\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\015\uffbf\020\uffbf\021\uffbf\025\uffbf\047\uffbf\050\uffbf" +
    "\074\uffbf\001\002\000\032\003\056\006\ufffe\011\052\012" +
    "\044\013\ufffe\015\051\020\ufffe\021\ufffe\025\ufffe\047\046" +
    "\050\064\074\060\001\002\000\014\006\015\013\ufffa\020" +
    "\004\021\007\025\017\001\002\000\004\013\356\001\002" +
    "\000\004\075\357\001\002\000\004\060\360\001\002\000" +
    "\004\067\361\001\002\000\014\002\ufffa\006\015\020\004" +
    "\021\007\025\017\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\360\000\022\002\012\003\013\004\011\010\015\022" +
    "\007\023\005\032\010\034\004\001\001\000\002\001\001" +
    "\000\032\006\353\012\044\014\053\015\046\016\047\020" +
    "\061\021\056\024\064\030\060\031\052\035\352\046\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\306\001\001\000\016\004\011\010\015\022\007\023\005" +
    "\032\010\034\305\001\001\000\016\004\011\010\015\022" +
    "\007\023\005\032\010\034\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\011\010" +
    "\015\022\007\023\005\032\010\034\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\026\011\030\022\027\001\001\000" +
    "\004\037\041\001\001\000\004\041\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\037\001\001\000\006\005\035\022\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\044\014\053\015\046" +
    "\016\047\020\061\021\056\024\064\030\060\031\052\035" +
    "\054\046\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\012\044\014\167\015\046\016\047\020" +
    "\061\021\056\024\064\030\060\031\052\046\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\176\001\001\000\004\024\111\001\001\000\004" +
    "\043\105\001\001\000\004\043\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\012\044\014\100\015\046\016" +
    "\047\020\061\021\056\024\064\030\060\031\052\046\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\120\026\126" +
    "\027\154\046\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\120\026\126\027\125\046\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\153\026\126\046\130\001\001\000\002\001\001" +
    "\000\012\025\120\026\126\027\151\046\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\136\046\130\047" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\143\046\130\001\001\000\010\026\136\046\130\047" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\026\136\046\130\047" +
    "\144\001\001\000\002\001\001\000\010\025\146\026\126" +
    "\046\130\001\001\000\002\001\001\000\006\026\150\046" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\156\001\001\000\002\001\001\000\006\030\162\031\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\044\014\053\015\046" +
    "\016\047\020\061\021\056\024\064\030\060\031\052\035" +
    "\165\046\062\001\001\000\026\012\044\014\167\015\046" +
    "\016\047\020\061\021\056\024\064\030\060\031\052\046" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\012" +
    "\044\014\053\015\046\016\047\020\061\021\056\024\064" +
    "\030\060\031\052\035\174\046\062\001\001\000\026\012" +
    "\044\014\167\015\046\016\047\020\061\021\056\024\064" +
    "\030\060\031\052\046\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\250\044\251\045\246\001\001\000\002\001\001" +
    "\000\010\013\250\044\265\045\246\001\001\000\002\001" +
    "\001\000\004\042\252\001\001\000\010\013\250\044\264" +
    "\045\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\044\014\053\015\046\016\047\020\061\021\056" +
    "\024\064\030\060\031\052\035\256\046\062\001\001\000" +
    "\026\012\044\014\167\015\046\016\047\020\061\021\056" +
    "\024\064\030\060\031\052\046\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\012\044\014\053\015\046" +
    "\016\047\020\061\021\056\024\064\030\060\031\052\035" +
    "\262\046\062\001\001\000\026\012\044\014\167\015\046" +
    "\016\047\020\061\021\056\024\064\030\060\031\052\046" +
    "\062\001\001\000\002\001\001\000\004\042\252\001\001" +
    "\000\004\042\252\001\001\000\002\001\001\000\004\013" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\012\044\014\053\015\046\016\047\020\061\021\056\024" +
    "\064\030\060\031\052\035\273\046\062\001\001\000\026" +
    "\012\044\014\167\015\046\016\047\020\061\021\056\024" +
    "\064\030\060\031\052\046\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\340\001\001\000\002\001\001\000\010\022\314\033\312" +
    "\041\313\001\001\000\004\041\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\315\001\001\000\002" +
    "\001\001\000\004\022\317\001\001\000\002\001\001\000" +
    "\010\022\314\033\321\041\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\325\022\027\001\001\000" +
    "\002\001\001\000\030\012\044\014\053\015\046\016\047" +
    "\020\061\021\056\024\064\030\060\031\052\035\326\046" +
    "\062\001\001\000\026\012\044\014\167\015\046\016\047" +
    "\020\061\021\056\024\064\030\060\031\052\046\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\335\001" +
    "\001\000\002\001\001\000\010\022\314\033\337\041\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\044" +
    "\014\167\015\046\016\047\020\061\021\056\024\064\030" +
    "\060\031\052\046\062\001\001\000\016\004\011\010\015" +
    "\022\007\023\005\032\010\034\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\011\010\015\022\007\023\005\032\010\034" +
    "\361\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        public static Nodo padre;
        public int cont  = 0;
        public String ambitoActual = "%Global"; 

        //manejo de ambitos
        ArrayList<ElementoTS> elementosNoEncontrado = new ArrayList<ElementoTS>();
        ArrayList<ElementoTS> elementosEncontrado = new ArrayList<ElementoTS>();
        ArrayList<Nodo> CheckNodes = new ArrayList<Nodo>();

        public void buscarEnStandby(ElementoTS funcion){
                        for(ElementoTS elemStandby : elementosStandby){
                                boolean found = false;
                                for(ElementoTS elemFuncion : funcion.getParametros()){
                                        if( elemStandby.getID().equals(elemFuncion.getID()) ){
                                                found = true;
                                        } 
                                }
                                if(found){
                                       
                                                elemStandby.setAmbito(funcion.getAmbito());
                                                elementosEncontrado.add(elemStandby);
                                        
                                        
                                } else{
                                        
                                       
                                               elementosNoEncontrado.add(elemStandby); 
                                        
                                }

                        }
        }

                

        //deteccion y recuperacion de errores
        public static ArrayList<String> ErroresSintacticos = new ArrayList<String>(); 

        public static ArrayList<ElementoTS> ArregloSimbolos = new ArrayList<ElementoTS>(); 
        public static ArrayList<ElementoTS> ArregloFunciones = new ArrayList<ElementoTS>(); //arreglo para funciones

        public static ArrayList<ElementoTS> elementosStandby = new ArrayList<ElementoTS>();

        public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        report_expected_token_ids(); 
        //System.out.println(ErroresSintacticos); 
        expected_token_ids(); 
        }

        /*public void unrecovered_syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        }*/

        //gen deberia retornar un string o una lista? Depende del contexto en el que se use 

        public static boolean BuscaTipo(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean buscarExistenciaID(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID())) {
                                return true;
                        }
                }
                return false;
        }
        

           public static boolean BuscaTipoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }
     
        public static boolean BuscaAmbito(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getAmbito().equals(elemento.getAmbito())){
                                return true;
                        }
                }
                return false;
        }

        public static boolean BuscaAmbitoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(elemento.getAmbito()))){
                                return true;
                        }
                }
                return false;
        }

        public static String returnTipo(String id){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnTipoFuncion(String id){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getID().equals(id))) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnAmbitoFuncion(String ambito){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(ambito))) {
                                return element.getAmbito();
                        }
                }
                return "Error";
        }

        public static ElementoTS returnElementoTS(String ID, String tipo){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(ID) && 
                                element.getTipo().equals(tipo)) {
                                return element;
                        }
                }
                return null;
        }

        public static String returnTipoRecord(String id){
                String retorno = "";
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {


                                switch(element.getTipo()){
                                        case "STRING": 
                                        case "INTEGER":
                                        case "REAL":
                                        case "BOOLEAN":
                                        case "RECORD":
                                                break;
                                        default:
                                                retorno = element.getTipo();
                                                break;
                                }
                                break;
                        }
                }
                if(retorno.equals("")){
                        return "Error";
                } else{
                        return retorno;
                }
        }

        public static void printRecord(ElementoTS record){
                for(ElementoTS element : record.getRecordVars()) {
                        System.out.println("ID: "  +  element.getID() + ", Tipo: " + element.getTipo() + ", Ambito: " + element.getAmbito());
                }
        }

        public static boolean checkRecordVar(ElementoTS record, ElementoTS elemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean checkRecordVarConID(ElementoTS record, String IDElemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(IDElemento)) {
                                return false;
                        }
                }
                return true;
        }

        public static String returnTipoVariableRecord(ElementoTS record, String id){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static ElementoTS recursivaRecord(ElementoTS tipoRecord, Nodo nodo){


                if(nodo.getHijos().get(2).getValor() == "vacio"){ //fin de recursion
                        //agregar los ids que puedan faltar (mismo codigo de abajo)
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }
                                        
                                }

                                
                                
                        }

                        return tipoRecord;
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }
                                        
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));
                                
                                
                        }
                }

        }

        public static ElementoTS convertirVariableARecord(ElementoTS elemento, String ID){
                //primero buscar el tipo record
                ElementoTS record  = new ElementoTS();
                for(ElementoTS element : ArregloSimbolos){
                        if(element.getID().equals(ID) && element.getTipo().equals("RECORD")){
                                record = element;
                                break;
                        }
                }

                //convertir el elemento mandado a Record
                elemento.setRecordVars(record.getRecordVars());

                return elemento;
        }

        public static ArrayList<ElementoTS> recorrerDeclaracionesFuncion(ArrayList<ElementoTS> arreglo, Nodo nodo, String ambito){

                int tam = 0; 

                try{
                        tam = nodo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam == 0){ 
                        /*llego al fondo de la  recursion, osea no existe un tercer nodo en el padre, entonces
                        significa que es el final de la recursion. */
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){ 
                                //en caso que solo sea un ID que se esta declarando
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                return arreglo;
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }
                                        
                                }

                                
                        }

                        return arreglo;
                
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //revisar si el nodo de la mas izquierda tiene NULL o no
                                //si tiene NULL significa que tiene una lista de IDs.
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                        
                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }
                                        
                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);
                                
                        }
                }
        }

       public static boolean revisarArreglo(ElementoTS element, ArrayList<ElementoTS> arreglo){
               //esta funcion simplemente revisa que el arreglo mandado contenga un elemento mandado
               //si el arreglo esta vacio, regresar verdadero para que el elemento se agregue
               //si no, recorrer en busca del elemento en el arreglo. es falso cuando si hay un match

               if(arreglo.size()  == 0){
                       return true;
               } else{
                    for(ElementoTS elem : arreglo){
                        if(element.getID().equals(elem.getID())){ 
                                return false;
                                                        
                        }
                    }  
                    return true; 
               }
       }
       
       

       public void revisarArregloStanby_Global(){ //al final revisa que variables extras quedan que no se encontraron
                elementosNoEncontrado.clear();
                elementosEncontrado.clear();

                for(ElementoTS elementoStanby : elementosStandby){

                        boolean found =  false;
                        for(ElementoTS elementoTablaSimbolo : ArregloSimbolos){
                                if( elementoStanby.getID().equals(elementoTablaSimbolo.getID()) ){
                                        found = true;
                                } 
                        }

                        if(found){
                                        elementosEncontrado.add(elementoStanby);
                        } else{
                                        elementosNoEncontrado.add(elementoStanby);
                        }
                }
               
       }

//        public void addErrores(Nodo node){
//                for(Nodo nodoFOR: node.getHijos()){
//                        addErrores(nodoFOR);
//                        if(nodoFOR.getEtiqueta().equals("expresion_matematica") && 
//                        (nodoFOR.getValor().equals("Error") || nodoFOR.getValor().equals("Error de Tipos.")) ){
//                                int size = nodoFOR.getHijos().size();

//                                switch(size){
//                                        case 1:{
//                                                Nodo nodoTermino = nodoFOR.getHijos().get(0);
//                                                Nodo hijoTermino = nodoTermino.getHijos().get(0);
//                                                Nodo hijoFinal = hijoTermino.getHijos().get(0);

//                                                if(hijoTermino.getEtiqueta().equals("expresion_matematica")){
//                                                        addErrores(hijoFinal);
//                                                } else{
//                                                        CheckNodes.add(nodoFOR);
//                                                        //hay que revisar que ese elmento existe en algun lado.

//                                                }
                                               


//                                                break;
//                                        } 
//                                        case 3:{
//                                                break;
//                                        }
//                                }
//                        }
//                }
//        }

//        public void revisarErrorExprMatematica(Nodo nodo, ElementoTS funcion){
//                System.out.println("Size: " + nodo.getHijos().size());
//                if(nodo.getHijos().size() == 3){

//                }
//        }
          


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= root EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // root ::= encabezado 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("root");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo) hijo1);

        parser.padre = (Nodo) nodo;

        RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("root",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= declaraciones_principales cuerpo_main declaraciones_principales RETURN NUM PUNTOCOMA CURLYDER declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque principal, bloque = 0

                    //NODO PADRE
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("encabezado");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    //TERMINALES
                    //AGREGAR NO TERMINALES
                    //nodo.addHijos(nProcedure);
                    //nodo.addHijos(nid);
                    nodo.addHijos((Nodo)hijo1);
                    //nodo.addHijos(nIS);
                    nodo.addHijos((Nodo)hijo2);
                    nodo.addHijos((Nodo)hijo3);
                    nodo.addHijos((Nodo)hijo4);


                //     System.out.println("Size del arreglo global: " + elementosStandby.size());
                //     //RECORRER ESE ARREGLO EN BUSQUEDA DE VARIABLES QUE NO SE ENCONTRARON. 

                //         revisarArregloStanby_Global();
                    
                //         if(elementosEncontrado.size() > 0){ //imprimir los que encontro
                //                 for(ElementoTS elem : elementosEncontrado){
                //                         System.out.println("ID: "  + elem.getID() + ", Ambito: " + elem.getAmbito());
                //                 }
                //                         elementosEncontrado.clear();
                //         }
                
                //         if(elementosNoEncontrado.size() > 0){ //imrpimir los que no encontro
                //         //error
                //                 for(ElementoTS elem : elementosNoEncontrado){
                //                         System.out.println("No se encontro el ID declarado: "  + elem.getID() + " en el Ambito: " + elem.getAmbito());
                //                 }

                //                 elementosNoEncontrado.clear();
                //         }
                    

                    

                    RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo_main ::= listaProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("cuerpo_main");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    nodo.addHijos((Nodo)hijo1);

                    RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo_main",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_principales ::= inicioProgram declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                nodo.addHijos((Nodo)hijo1); 
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones_principales ::= declaracionesVAR declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor(" : ");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;
        
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones_principales ::= inicioFunction declaraciones_principales 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor("FUNCTION");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;  
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones_principales ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones_principales",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // listaProposiciones ::= proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijito1 = ((Nodo)hijo1);
                nodo.setValor(hijito1.getValor());

                for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                }

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listaProposiciones ::= listaProposiciones proposicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaProposiciones");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                
                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaProposiciones",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaIdentificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaIdentificadores ::= listaIdentificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES
                
                Nodo nid = new Nodo();	
                nid.setEtiqueta("ID");	
                nid.setValor(t2.toString());	
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();	
                        nid2.setEtiqueta("ID");	
                        nid2.setValor(hijo.getValor());	
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }

                
                nodo.addHijos(nid);

                RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaIdentificadores ::= listaIdentificadores COMA tipovar IDENTIFICADOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES
                
                Nodo nid = new Nodo();	
                nid.setEtiqueta("ID");	
                nid.setValor(t2.toString());	
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();	
                        nid2.setEtiqueta("ID");	
                        nid2.setValor(hijo.getValor());	
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }

                
                nodo.addHijos(nid);

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaIdentificadores",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionesVAR ::= tipovar listaIdentificadores PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //bloque en 0

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING": 
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                //System.out.println("Esto es: " + hijo.getValor()); 

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global"); 
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }   
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                                
                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global"); 
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);  
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }
                                                
                                                        
                                                
                                                }
                                }
                                break;
                  
                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionesVAR ::= tipovar listaIdentificadores asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

           //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING": 
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global"); 
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }   
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                                
                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global"); 
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);  
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }
                                                
                                                        
                                                
                                                }
                                }
                                break;
                  
                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condicionIF ::= IF PARIZQ expresion PARDER CURLYIZQ listaProposiciones CURLYDER ELSE CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
         
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF-ELSE"); 
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;         
           

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionIF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipomain ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("INT");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipomain ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipomain",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipovar ::= INT 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipovar ::= CHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

            //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("CHAR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipovar ::= VOID 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipovar",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // op_rel_completos ::= EQUAL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;
    
                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // op_rel_completos ::= OPREL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_rel_completos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_condicional ::= OPCONDICIONALES 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nAND = new Nodo();
                nAND.setEtiqueta("OPCONDICIONAL");
                nAND.setValor(t1.toString());
                nAND.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_condicional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion op_condicional expresion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion_parentesis 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
               
        //        for(int i = 0; i < hijo.getHijos().size() ; i++){
        //                 nodo.addHijos(hijo.getHijos().get(i));
        //         }
                nodo.addHijos(hijo);

                RESULT = nodo; 
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= condicion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_parentesis ::= PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_parentesis");
                
                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                
                nodo.addHijos(hijo);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_parentesis",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condicion ::= IDENTIFICADOR op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nNUM = new Nodo();
                nNUM.setEtiqueta("INTEGER");
                nNUM.setValor(t2.toString());
                nNUM.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nNUM);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condicion ::= IDENTIFICADOR op_rel_completos CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("CHAR");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // condicion ::= NUM op_rel_completos NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("INTEGER");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("INTEGER");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // condicion ::= CONSTCHAR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("CHAR");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= IDENTIFICADOR op_rel_completos IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);
                

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // proposicion ::= condicionIF 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor("IF");

                nodo.setId(parser.cont);
                parser.cont++;

                // for(int i = 0; i < hijo.getHijos().size() ; i++){
                //         nodo.addHijos(hijo.getHijos().get(i));
                // }

                nodo.addHijos(hijo);


                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // proposicion ::= cicloWHILE 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("WHILE");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                //TERMINALES

                //AGREGAR NO TERMINALES                         

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // proposicion ::= cicloFOR 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("FOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // proposicion ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("LLAMADA"); 
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // proposicion ::= write PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                             
                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // proposicion ::= read PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                             
                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // proposicion ::= asignacionVAR PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // proposicion ::= incrementando PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("INCREMENTADOR");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // proposicion ::= decrementando PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("DECREMENTADOR");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // proposicion ::= error PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proposicion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cicloWHILE ::= WHILE PARIZQ condicion PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloWhile");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cicloFOR ::= FOR PARIZQ asignacionVAR PUNTOCOMA condicion PUNTOCOMA incrementando PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cicloFOR ::= FOR PARIZQ asignacionVAR PUNTOCOMA condicion PUNTOCOMA decrementando PARDER CURLYIZQ listaProposiciones CURLYDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cicloFOR ::= FOR condicion QUESTIONMARK NUM DECISION NUM PUNTOCOMA proposicion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // incrementando ::= IDENTIFICADOR INCREMENTADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "++");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("incrementando",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // decrementando ::= IDENTIFICADOR DECREMENTADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "--");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decrementando",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacionVAR ::= IDENTIFICADOR EQUAL expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor("=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                //comprobacion de tipos
                //revisar que T1 sea el mismo tipo de expresion_matematica
                String tipo = returnTipo(t1.toString());
                // String tipo1 = returnAmbitoFuncion(t1.toString());
                // if(tipo.equals("Error")){

                //         //retorna error si no la encontro, entonces subir el valor para comprobar si existe en 
                //         //la gramatica de FUNCTION.
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         element.setAmbito("Global");
                //         elementosStandby.add(element);

                        
                        
                // }else{
                //         if(hijo.getError()){ //si expr_mat es un error
                //                 System.out.println("Error: "  + hijo.getMensaje());
                //                 hijo.setValor("Error de Tipos.");
                //         }else{ //si todo esta bien, revisar si son iguales.
                //                 if(tipo.equals(hijo.getValor()) ||
                //                 (tipo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //                 }else{
                //                         System.out.println("Error: " + "El tipo de " + 
                //                         t1.toString()  + " es diferente que el valor asignado. Se esperaba " + tipo);
                //                 }
                //         }
                // }
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1); 
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacionVAR ::= IDENTIFICADOR DOT IDENTIFICADOR ASIGNACION expresion_matematica 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor(":=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                Nodo hijo = ((Nodo)hijo1);


                //ahora a revisar si ese id.id realmente existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());

                // String tipoAtributo = ""; //es el tipo del atributo id.x (tipo de x)

                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);
                        
                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 tipoAtributo = returnTipoVariableRecord(elemento, t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record 
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //                 tipoAtributo = "Error";
                //         }

                // }

                //comprobacion de otros tipos

                
                // if(hijo.getError()){ //si expr_mat es un error
                //         System.out.println("Error: "  + hijo.getMensaje());
                //         hijo.setValor("Error de Tipos.");
                // } else{ //si todo esta bien, revisar si son iguales.
                //         if(tipoAtributo.equals(hijo.getValor()) ||
                //         (tipoAtributo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //         } else{
                //                         System.out.println("Error: " + "El tipo de " + 
                //                         t2.toString()  + " es diferente que el valor asignado. Se esperaba " + tipoAtributo + " y se encontro un " + hijo.getValor());
                //         }
                // }
                
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                nodo.addHijos((Nodo)hijo1); 
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionVAR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion_matematica ::= termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //por ejemplo 2x+a, el termino es 2x y a Y los factores serian "2 y x"

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                nodo.addHijos((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                if(hijo.getError()){ //subir error y mensaje 
                        nodo.setError(true);
                        hijo.setValor("Error de tipos.");
                        nodo.setMensaje(hijo.getMensaje());
                        CheckNodes.add(nodo);     
                }
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion_matematica ::= OPSUM termino 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //en que caso se usa esto?

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo1);
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion_matematica ::= expresion_matematica OPSUM termino 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                Nodo hijoMAT = ((Nodo)hijo1);
                Nodo hijoTER = ((Nodo)hijo2);

                // if(!(hijoMAT.getValor().equals(hijoTER.getValor())) ){ //si los valores no son iguales, hay inconsistencia de tipos
                //         nodo.setError(true);
                //         if(hijoMAT.getError() || hijoTER.getError()){ //revisar si alguno de los hijos tiene errores
                //                 nodo.setMensaje(hijoMAT.getMensaje());  //asignar el error de la izquierda
                //                 nodo.setValor("Error de Tipos");

                //                 // CheckNodes.add(nodo);

                //                 // // //comprobacion de ambito y de tipos:
                //                 // // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         } 
                //         else{ //si todo esta bien, asignar error de inconsistencia a nodo padre
                //                 nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //         "Se esta operando un tipo " + hijoMAT.getValor() + " y un tipo " + hijoTER.getValor());
                //                 nodo.setValor("Error de Tipos.");

                //                 // //comprobacion de ambito y de tipos:
                //                 // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         }
                        
                // } else{ //setear el valor si todo esta bien
                //         nodo.setValor(hijoMAT.getValor());
                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo2);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_matematica",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // termino ::= factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 //este

                Nodo nodo = new Nodo();         
                nodo.setEtiqueta("termino");
                
                Nodo hijo = ((Nodo)hijo1);

                // if(hijo.getEtiqueta().equals("expresion_matematica")){
                //         nodo.setValor(hijo.getValor());
                // } else{
                //         nodo.setValor(hijo.getEtiqueta());
                // }

                // if(hijo.getError()){ //quitar valor y subir mensaje
                //         nodo.setMensaje(hijo.getMensaje());
                //         hijo.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(hijo);
                
                RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= termino OPMULT factor 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("termino");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo opmult = new Nodo();
                opmult.setEtiqueta("OPMULT");
                opmult.setValor(t1.toString());
                opmult.setId(parser.cont);
                parser.cont++;

                // Nodo hijoTER = ((Nodo)hijo1);
                // Nodo hijoFAC = ((Nodo)hijo2);

                // if(hijoFAC.getEtiqueta().equals("expresion_matematica")){
                //         if(!(hijoTER.getValor().equals(hijoFAC.getValor())) ){
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 } 
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // } else{
                //         if(!(hijoTER.getValor().equals(hijoFAC.getEtiqueta())) ){
                               
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 } 
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)opmult);
                nodo.addHijos((Nodo)hijo2);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                //buscar en TS ese Identificador y retornar tipo
                // String tipo = returnTipo(t1.toString());
 
                // if(tipo.equals("Error")){  

                //         //no lo encontro globalmente, ahora revisar en la funcion
                        
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         elementosStandby.add(element);

                //         nodo.setEtiqueta("Error");
                // }else{
                //         if(tipo == "INTEGER"){
                //                 tipo = "NUM";
                //         }
                //         nodo.setEtiqueta(tipo);
                //         nodo.setValor(t1.toString());
                // }

                nodo.addHijos(nid);
                
                RESULT = nodo;
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= IDENTIFICADOR DOT IDENTIFICADOR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                //buscar si esa variable record existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());



                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);
                        
                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 String tipo2 = returnTipoVariableRecord(elemento, t2.toString());
                //                 nodo.setEtiqueta(tipo2);
                //                 nodo.setValor(t1.toString() + "." + t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record 
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //         }

                // }


                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= llamada_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("llamada_procedure_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nod = ((Nodo)hijo1);

                for(Nodo node : nod.getHijos()){
                        nodo.addHijos(node);
                }

                // nodo.addHijos((Nodo)hijo1);
                
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= NUM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INTEGER");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= CONSTSTRING 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STRING");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= CONSTCHAR 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CHAR");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= OPBOOL 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPBOOL");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= PARIZQ expresion_matematica PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                

                Nodo hijito1 = ((Nodo)hijo1);

                nodo.setValor(hijito1.getValor());
                
                // if(hijito1.getError()){
                //         nodo.setError(true);
                //         hijito1.setValor("Error de tipos.");
                // }
                
                nodo.setId(parser.cont);
                parser.cont++;


                nodo.addHijos(hijito1);

                // for(int i = 0; i < hijito1.getHijos().size(); i++){
                //        nodo.addHijos(hijito1.getHijos().get(i));
                // }
                RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // inicioProgram ::= tipomain MAIN PARIZQ PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioProgram");
              nodo.setId(parser.cont);
              //nodo.setValor(t1.toString());
              parser.cont++;

              Nodo tipo = ((Nodo)hijo1); 

              //TERMINALES
              nodo.addHijos(tipo); 
              //nodo.setValor(tipo.getValor()); 

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // inicioProgram ::= tipomain MAIN PARIZQ listaIdentificadores PARDER CURLYIZQ 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("NombreProgram");
              nodo.setValor(t2.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              nodo.addHijos((Nodo)hijo1); 
              RESULT = nodo;
                     

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioProgram",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpoProposiciones ::= BEGIN listaProposiciones END PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoProposiciones");
              nodo.setValor("listaProposiciones");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo hijo = ((Nodo)hijo1);


              if(hijo.getHijos().size() > 2){
                        for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                        }
              } else{
                      nodo.setEtiqueta(hijo.getEtiqueta());
                      nodo.setValor(hijo.getValor());
                      for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                      }
              }
              
              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoProposiciones",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // inicioFunction ::= FUNCTION IDENTIFICADOR OPDECLARACION tipovar PUNTOCOMA cuerpoprocedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //Si encuentra esto, es un error.
              //No pueden haber funciones con cero parametros:

              //se agrega al arreglo para que el comprobador de tipos/ambito trate esta funcion como un procedure.
              
              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                                break;
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              System.out.println("La funcion " +  t2.toString() + " necesita parametros declarados.");

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);

              RESULT = nodo;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //este segundo permite la declaracion de funciones 
                 
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0; 


                try{
                        tam = hijo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString()); 
                                
                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }                               
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString()); 
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }     
                                }
                        }
                        
                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva
                                                
                                } 
                }
    

                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;          
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              //nodo.addHijos((Nodo)hijo3);
              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // inicioFunction ::= tipovar IDENTIFICADOR PARIZQ declaracionesVAR_procedure_funcion PARDER CURLYIZQ declaracionesVARAdentroFunctionProcedure listaProposiciones RETURN IDENTIFICADOR PUNTOCOMA CURLYDER 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t7 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t9 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0; 


                try{
                        tam = hijo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString()); 
                                
                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }                               
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString()); 
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }     
                                }
                        }
                        
                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva
                                                
                                } 
                }
    

                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;          
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              nodo.addHijos((Nodo)hijo4);
              RESULT = nodo; 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioFunction",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // declaracionesVAR_procedure_funcion ::= tipovar listaIdentificadores 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR_pro");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();
                
                int size = hijo.getHijos().size();

                if(hijo.getValor() != null){
                        if(size == 0){ //si es solo unico, solo un ID
                                ElementoTS elemento = new ElementoTS();
                                elemento.setID(hijo.getValor());
                                System.out.println("ID del elemento: " + elemento.getID()); 
                                elemento.setTipo(tipo);
                                elemento.setAmbito(""); 
                                        if(BuscaTipoFuncion(elemento)){
                                                ArregloFunciones.add(elemento);  
                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                        } else {  //error, ya existe ese simbolo
                                                System.out.println("Ya existe ese elemento con ese id, tipo y ambito");
                                        }                                
                        } 

                } else{ //es null cuando son varios
                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                
                                        ElementoTS elemento = new ElementoTS();
                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                        elemento.setTipo(tipo);
                                        elemento.setAmbito(""); 
                                                if(BuscaTipoFuncion(elemento)){
                                                        ArregloFunciones.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                } else {  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo() + " y con el ambito: " + elemento.getAmbito());
                                                }
                        }
                }

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;



              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaracionesVAR_procedure_funcion ::= listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar PUNTOCOMA declaracionesVAR_procedure_funcion 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // declaracionesVAR_procedure_funcion ::= VAR listaIdentificadores OPDECLARACION tipovar 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // declaracionesVAR_procedure_funcion ::= 
            {
              Object RESULT =null;
		
        
                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVAR_procedure_funcion",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // llamada_procedure_funcion ::= IDENTIFICADOR PARIZQ lista_parametros PARDER PUNTOCOMA 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("llamada_procedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t1.toString());
              nid.setId(parser.cont);
              parser.cont+=1;//id, parizq, parder

              nodo.addHijos(nid); 

              Nodo hijito1 = ((Nodo)hijo1);

              for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                        
                      }
              //nodo.setValor("(" + hijito1.getValor() + ")");

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_procedure_funcion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_parametros ::= factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("lista_parametros");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

                // Nodo nid = new Nodo();
                // nid.setEtiqueta("NUM");
                // nid.setValor(t1.toString());
                // nid.setId(parser.cont);
                // parser.cont+=1;

                Nodo node1 = ((Nodo)hijo1);

                Nodo node = ((Nodo)hijo2);


                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));
                        
                }

              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lista_parametros ::= COMA factor lista_parametros 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("lista_parametros");
                nodo.setId(parser.cont);
                parser.cont++;


                Nodo node1 = ((Nodo)hijo1);
                Nodo node = ((Nodo)hijo2);

                

                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));
                        
                }

                RESULT = nodo;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lista_parametros ::= 
            {
              Object RESULT =null;
		
                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
                

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpoprocedure_funcion ::= declaracionesVARAdentroFunctionProcedure cuerpoProposiciones 
            {
              Object RESULT =null;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoprocedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo node = ((Nodo)hijo1);

              if(node != null){
                nodo.addHijos((Nodo)hijo1);

              }

              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoprocedure_funcion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // declaracionesVARAdentroFunctionProcedure ::= tipovar listaIdentificadores PUNTOCOMA declaracionesVARAdentroFunctionProcedure 
            {
              Object RESULT =null;
		int hijo2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijo2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijo2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int hijo1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hijo1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object hijo1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hijo3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hijo3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hijo3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("declaracionesVARAdentroFunctionProcedure");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo)hijo1);
        nodo.addHijos((Nodo)hijo2);
        nodo.addHijos((Nodo)hijo3);

              RESULT = nodo;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // declaracionesVARAdentroFunctionProcedure ::= 
            {
              Object RESULT =null;
		

                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesVARAdentroFunctionProcedure",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // read ::= READ PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nid);

              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // read ::= READ PARIZQ IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              Nodo nid2 = new Nodo();
              nid2.setEtiqueta("ID");
              nid2.setValor(t4.toString());
              nid2.setId(parser.cont);
              parser.cont+=1;


              nodo.addHijos(nid);
              nodo.addHijos(nid2);

              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // write ::= WRITE PARIZQ CONSTSTRING COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t5.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nid);

              RESULT = nodo; 


              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // write ::= WRITE PARIZQ CONSTSTRING COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nCONSTCHAR = new Nodo();
              nCONSTCHAR.setEtiqueta("CONSTCHAR");
              nCONSTCHAR.setValor(t5.toString());
              nCONSTCHAR.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTCHAR);

              RESULT = nodo;         
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // write ::= WRITE PARIZQ CONSTSTRING COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont++;//string

              Nodo nCONSTSTRING2 = new Nodo();
              nCONSTSTRING2.setEtiqueta("CONSTSTRING");
              nCONSTSTRING2.setValor(t5.toString());
              nCONSTSTRING2.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTSTRING2);

              RESULT = nodo;            
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // write ::= WRITE PARIZQ CONSTSTRING COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // write ::= WRITE PARIZQ CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;                     
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // write ::= WRITE PARIZQ IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;                     
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // write ::= WRITE PARIZQ IDENTIFICADOR COMA IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // write ::= WRITE PARIZQ IDENTIFICADOR COMA NUM PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // write ::= WRITE PARIZQ IDENTIFICADOR COMA CONSTCHAR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTCHAR");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // write ::= WRITE PARIZQ IDENTIFICADOR COMA CONSTSTRING PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTSTRING");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // write ::= WRITE PARIZQ IDENTIFICADOR COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // write ::= WRITE PARIZQ CONSTSTRING COMA IDENTIFICADOR DOT IDENTIFICADOR PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int t4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int t4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int t5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int t6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t7 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;             
        

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // write ::= WRITE PARIZQ PARDER 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor("write");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              
              RESULT = nodo;      

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
