import java_cup.runtime.*;
import java.util.ArrayList; 


parser code 
{:

        public static Nodo padre;
        public int cont  = 0;
        public String ambitoActual = "%Global"; 

        //manejo de ambitos
        ArrayList<ElementoTS> elementosNoEncontrado = new ArrayList<ElementoTS>();
        ArrayList<ElementoTS> elementosEncontrado = new ArrayList<ElementoTS>();
        ArrayList<Nodo> CheckNodes = new ArrayList<Nodo>();

        public void buscarEnStandby(ElementoTS funcion){
                        for(ElementoTS elemStandby : elementosStandby){
                                boolean found = false;
                                for(ElementoTS elemFuncion : funcion.getParametros()){
                                        if( elemStandby.getID().equals(elemFuncion.getID()) ){
                                                found = true;
                                        } 
                                }
                                if(found){
                                       
                                                elemStandby.setAmbito(funcion.getAmbito());
                                                elementosEncontrado.add(elemStandby);
                                        
                                        
                                } else{
                                        
                                       
                                               elementosNoEncontrado.add(elemStandby); 
                                        
                                }

                        }
        }

                

        //deteccion y recuperacion de errores
        public static ArrayList<String> ErroresSintacticos = new ArrayList<String>(); 

        public static ArrayList<ElementoTS> ArregloSimbolos = new ArrayList<ElementoTS>(); 
        public static ArrayList<ElementoTS> ArregloFunciones = new ArrayList<ElementoTS>(); //arreglo para funciones

        public static ArrayList<ElementoTS> elementosStandby = new ArrayList<ElementoTS>();

        public void syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        report_expected_token_ids(); 
        //System.out.println(ErroresSintacticos); 
        expected_token_ids(); 
        }

        /*public void unrecovered_syntax_error (Symbol s) {
        System.out.println("Error de sintaxis: No se esperaba el siguiente token: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        ErroresSintacticos.add("Error No Recuperable de sintaxis: \""+ s.value + "\" Linea: " + (s.right+1) + " Columna: " + (s.left+1));
        }*/

        //gen deberia retornar un string o una lista? Depende del contexto en el que se use 

        public static boolean BuscaTipo(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean buscarExistenciaID(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(elemento.getID())) {
                                return true;
                        }
                }
                return false;
        }
        

           public static boolean BuscaTipoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }
     
        public static boolean BuscaAmbito(ElementoTS elemento){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getAmbito().equals(elemento.getAmbito())){
                                return true;
                        }
                }
                return false;
        }

        public static boolean BuscaAmbitoFuncion(ElementoTS elemento){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(elemento.getAmbito()))){
                                return true;
                        }
                }
                return false;
        }

        public static String returnTipo(String id){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnTipoFuncion(String id){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getID().equals(id))) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static String returnAmbitoFuncion(String ambito){
                for(ElementoTS element : ArregloFunciones) {
                        if(!(element.getAmbito().equals(ambito))) {
                                return element.getAmbito();
                        }
                }
                return "Error";
        }

        public static ElementoTS returnElementoTS(String ID, String tipo){
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(ID) && 
                                element.getTipo().equals(tipo)) {
                                return element;
                        }
                }
                return null;
        }

        public static String returnTipoRecord(String id){
                String retorno = "";
                for(ElementoTS element : ArregloSimbolos) {
                        if(element.getID().equals(id)) {


                                switch(element.getTipo()){
                                        case "STRING": 
                                        case "INTEGER":
                                        case "REAL":
                                        case "BOOLEAN":
                                        case "RECORD":
                                                break;
                                        default:
                                                retorno = element.getTipo();
                                                break;
                                }
                                break;
                        }
                }
                if(retorno.equals("")){
                        return "Error";
                } else{
                        return retorno;
                }
        }

        public static void printRecord(ElementoTS record){
                for(ElementoTS element : record.getRecordVars()) {
                        System.out.println("ID: "  +  element.getID() + ", Tipo: " + element.getTipo() + ", Ambito: " + element.getAmbito());
                }
        }

        public static boolean checkRecordVar(ElementoTS record, ElementoTS elemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(elemento.getID()) && 
                                element.getTipo().equals(elemento.getTipo())) {
                                return false;
                        }
                }
                return true;
        }

        public static boolean checkRecordVarConID(ElementoTS record, String IDElemento){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(IDElemento)) {
                                return false;
                        }
                }
                return true;
        }

        public static String returnTipoVariableRecord(ElementoTS record, String id){
                for(ElementoTS element : record.getRecordVars()) {
                        if(element.getID().equals(id)) {
                                return element.getTipo();
                        }
                }
                return "Error";
        }

        public static ElementoTS recursivaRecord(ElementoTS tipoRecord, Nodo nodo){


                if(nodo.getHijos().get(2).getValor() == "vacio"){ //fin de recursion
                        //agregar los ids que puedan faltar (mismo codigo de abajo)
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }
                                        
                                }

                                
                                
                        }

                        return tipoRecord;
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(tipoRecord.getID());

                                if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();
                                for(int i = 0 ; i < size; i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(tipoRecord.getID());
                                        if(checkRecordVar(tipoRecord, id)){ //si el id no existe en el record
                                                tipoRecord.addRecordVar(id);
                                        } else{ //ya existe un id con ese tipo
                                                System.out.println("Ya existe un ID: " + id.getID() + " en Record: " + tipoRecord.getID());
                                                //error
                                        }
                                        
                                }

                                return recursivaRecord(tipoRecord, nodo.getHijos().get(2));
                                
                                
                        }
                }

        }

        public static ElementoTS convertirVariableARecord(ElementoTS elemento, String ID){
                //primero buscar el tipo record
                ElementoTS record  = new ElementoTS();
                for(ElementoTS element : ArregloSimbolos){
                        if(element.getID().equals(ID) && element.getTipo().equals("RECORD")){
                                record = element;
                                break;
                        }
                }

                //convertir el elemento mandado a Record
                elemento.setRecordVars(record.getRecordVars());

                return elemento;
        }

        public static ArrayList<ElementoTS> recorrerDeclaracionesFuncion(ArrayList<ElementoTS> arreglo, Nodo nodo, String ambito){

                int tam = 0; 

                try{
                        tam = nodo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam == 0){ 
                        /*llego al fondo de la  recursion, osea no existe un tercer nodo en el padre, entonces
                        significa que es el final de la recursion. */
                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();

                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){ 
                                //en caso que solo sea un ID que se esta declarando
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                return arreglo;
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }
                                        
                                }

                                
                        }

                        return arreglo;
                
                } else{ //si no ha terminado la recursion

                        ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
                        hijosDeclarVar = nodo.getHijos();
                        int size = hijosDeclarVar.size();

                        if(nodo.getHijos().get(0).getValor()  != null){
                                //revisar si el nodo de la mas izquierda tiene NULL o no
                                //si tiene NULL significa que tiene una lista de IDs.
                                //si es una declaracion simple, ex: "test : string"
                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(ambito);

                                int sizeArreglo = arreglo.size();

                                boolean busqueda = revisarArreglo(id, arreglo);

                                if(busqueda){
                                        arreglo.add(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                }
                                        
                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);
                                
                        } else{
                                //si el nodo a la mas izquierda es una listaIdentificadores
                                //recorrer los hijos de ListaIdentificadores

                                int sizeArreglo = arreglo.size();
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(int i = 0 ; i < nodo.getHijos().get(0).getHijos().size(); i++){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(hijosDeclarVar.get(0).getHijos().get(i).getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(ambito);

                                        boolean busqueda = revisarArreglo(id, arreglo);

                                        if(busqueda){
                                                arreglo.add(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + ambito);
                                                //error
                                        }
                                        
                                }

                                return recorrerDeclaracionesFuncion(arreglo, nodo.getHijos().get(2), ambito);
                                
                        }
                }
        }

       public static boolean revisarArreglo(ElementoTS element, ArrayList<ElementoTS> arreglo){
               //esta funcion simplemente revisa que el arreglo mandado contenga un elemento mandado
               //si el arreglo esta vacio, regresar verdadero para que el elemento se agregue
               //si no, recorrer en busca del elemento en el arreglo. es falso cuando si hay un match

               if(arreglo.size()  == 0){
                       return true;
               } else{
                    for(ElementoTS elem : arreglo){
                        if(element.getID().equals(elem.getID())){ 
                                return false;
                                                        
                        }
                    }  
                    return true; 
               }
       }
       
       

       public void revisarArregloStanby_Global(){ //al final revisa que variables extras quedan que no se encontraron
                elementosNoEncontrado.clear();
                elementosEncontrado.clear();

                for(ElementoTS elementoStanby : elementosStandby){

                        boolean found =  false;
                        for(ElementoTS elementoTablaSimbolo : ArregloSimbolos){
                                if( elementoStanby.getID().equals(elementoTablaSimbolo.getID()) ){
                                        found = true;
                                } 
                        }

                        if(found){
                                        elementosEncontrado.add(elementoStanby);
                        } else{
                                        elementosNoEncontrado.add(elementoStanby);
                        }
                }
               
       }

//        public void addErrores(Nodo node){
//                for(Nodo nodoFOR: node.getHijos()){
//                        addErrores(nodoFOR);
//                        if(nodoFOR.getEtiqueta().equals("expresion_matematica") && 
//                        (nodoFOR.getValor().equals("Error") || nodoFOR.getValor().equals("Error de Tipos.")) ){
//                                int size = nodoFOR.getHijos().size();

//                                switch(size){
//                                        case 1:{
//                                                Nodo nodoTermino = nodoFOR.getHijos().get(0);
//                                                Nodo hijoTermino = nodoTermino.getHijos().get(0);
//                                                Nodo hijoFinal = hijoTermino.getHijos().get(0);

//                                                if(hijoTermino.getEtiqueta().equals("expresion_matematica")){
//                                                        addErrores(hijoFinal);
//                                                } else{
//                                                        CheckNodes.add(nodoFOR);
//                                                        //hay que revisar que ese elmento existe en algun lado.

//                                                }
                                               


//                                                break;
//                                        } 
//                                        case 3:{
//                                                break;
//                                        }
//                                }
//                        }
//                }
//        }

//        public void revisarErrorExprMatematica(Nodo nodo, ElementoTS funcion){
//                System.out.println("Size: " + nodo.getHijos().size());
//                if(nodo.getHijos().size() == 3){

//                }
//        }
          
:}

//CUERPO
terminal BEGIN, END, FUNCTION, PROCEDURE, PROGRAM, WRITE, READ, RETURN, MAIN;

//DECISIONES
terminal IF, ELSE, THEN; 

//TYPES
terminal INT, VOID, BOOL;   

//DEFINICIONES VARIABLES
terminal VAR, FLOAT, CHAR, INTEGER, TYPE, RECORD, STRING1;
terminal BOOLEAN, OPBOOL;
terminal ASIGNACION, OPDECLARACION;

//OPERADORES
terminal AND, XOR, OR, NOT, EQUAL, OPREL, OPSUM, OPMULT, OPCONDICIONALES;

//CICLOS
terminal WHILE, FOR, REPEAT, DO, TO, UNTIL, DOWNTO;

//SIMBOLOS
terminal DOT, COMA, PUNTOCOMA, CHARESPECIAL;
terminal PARDER, PARIZQ, BRACKETIZQ, BRACKETDER, CURLYIZQ, CURLYDER;
terminal QUESTIONMARK, DECISION, INCREMENTADOR, DECREMENTADOR; 

//MANEJO STRINGS, CHARS, IDS
terminal String IDENTIFICADOR;
terminal String NUM;
terminal String NUMREAL;
terminal String CONSTCHAR, CONSTSTRING;

//NO TERMINALES (gramaticas)

non terminal root;
non terminal encabezado;
non terminal inicioProgram; 

non terminal declaracionesVARAdentroFunctionProcedure;

non terminal cuerpo_main;

non terminal inicioProcedure;
non terminal inicioFunction;
non terminal cuerpoprocedure_funcion; 

non terminal condicionIF; 

non terminal condicion;
non terminal proposicion; 

non terminal cicloWHILE;
non terminal cicloFOR;
non terminal cicloREPEAT;

non terminal write; 
non terminal read;

non terminal tipovar;
non terminal tipomain; 
non terminal asignacionVAR;

//manejo de operaciones matematicas
non terminal termino;
non terminal factor;
non terminal expresion_matematica;
non terminal incrementando; 
non terminal decrementando; 

non terminal declaracionesVAR;
non terminal declaracionesVAR_procedure_funcion;
non terminal declaraciones_principales;

non terminal listaProposiciones; 
non terminal declaraciones;
non terminal cuerpoProposiciones;
non terminal cuerpoProposiciones_sinpuntocoma;
non terminal listaIdentificadores;

non terminal op_condicional;
non terminal op_rel_completos;

non terminal expresion;
non terminal expresion_parentesis;

non terminal llamada_procedure_funcion;
non terminal lista_parametros;
non terminal lista_parametros_num;
non terminal lista_parametros_id;

non terminal marca;

//PRECEDENCIAS 

precedence left ELSE;
precedence left EQUAL;
precedence left OPREL;
precedence left OPCONDICIONALES;
precedence left OPSUM;
precedence left OPMULT;
precedence left PARIZQ;
precedence left QUESTIONMARK; 
precedence left DECISION; 
precedence left INCREMENTADOR; 
precedence left DECREMENTADOR; 


//Gramaticas

//comienzo
start with root;

root ::= encabezado:hijo1 {:

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("root");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo) hijo1);

        parser.padre = (Nodo) nodo;

        RESULT = nodo;
        :};

encabezado  ::= declaraciones_principales:hijo1 cuerpo_main:hijo2 declaraciones_principales:hijo3 RETURN:t2 NUM:t3 PUNTOCOMA:t4 CURLYDER:t5 declaraciones_principales:hijo4 {: //bloque principal, bloque = 0

                    //NODO PADRE
                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("encabezado");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    //TERMINALES
                    //AGREGAR NO TERMINALES
                    //nodo.addHijos(nProcedure);
                    //nodo.addHijos(nid);
                    nodo.addHijos((Nodo)hijo1);
                    //nodo.addHijos(nIS);
                    nodo.addHijos((Nodo)hijo2);
                    nodo.addHijos((Nodo)hijo3);
                    nodo.addHijos((Nodo)hijo4);


                //     System.out.println("Size del arreglo global: " + elementosStandby.size());
                //     //RECORRER ESE ARREGLO EN BUSQUEDA DE VARIABLES QUE NO SE ENCONTRARON. 

                //         revisarArregloStanby_Global();
                    
                //         if(elementosEncontrado.size() > 0){ //imprimir los que encontro
                //                 for(ElementoTS elem : elementosEncontrado){
                //                         System.out.println("ID: "  + elem.getID() + ", Ambito: " + elem.getAmbito());
                //                 }
                //                         elementosEncontrado.clear();
                //         }
                
                //         if(elementosNoEncontrado.size() > 0){ //imrpimir los que no encontro
                //         //error
                //                 for(ElementoTS elem : elementosNoEncontrado){
                //                         System.out.println("No se encontro el ID declarado: "  + elem.getID() + " en el Ambito: " + elem.getAmbito());
                //                 }

                //                 elementosNoEncontrado.clear();
                //         }
                    

                    

                    RESULT = nodo;


:};

cuerpo_main ::= listaProposiciones:hijo1 {:

                    Nodo nodo = new Nodo();
                    nodo.setEtiqueta("cuerpo_main");
                    nodo.setId(parser.cont);
                    parser.cont++;

                    nodo.addHijos((Nodo)hijo1);

                    RESULT = nodo;

:};

declaraciones_principales ::=  inicioProgram:hijo1 declaraciones_principales:hijo2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES

                nodo.addHijos((Nodo)hijo1); 
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

        :}
                |  declaracionesVAR:hijo1 declaraciones_principales:hijo2 {:
        
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor(" : ");

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;
        
        
        :}
                        |  inicioFunction:hijo1 declaraciones_principales:hijo2 {:
                        
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaraciones_principales");
                nodo.setValor("FUNCTION");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;  
        :}

                        | {:

                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        :}; //fin declaraciones_principales

listaProposiciones ::= proposicion:hijo1 {:
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijito1 = ((Nodo)hijo1);
                nodo.setValor(hijito1.getValor());

                for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                }

                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                
                RESULT = nodo;
:}

| listaProposiciones:hijo1 proposicion:hijo2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaProposiciones");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                
                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;
:}; //fin de listaProposiciones 

listaIdentificadores ::= IDENTIFICADOR:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;

:} 
| listaIdentificadores:hijo1 COMA:t1 IDENTIFICADOR:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES
                
                Nodo nid = new Nodo();	
                nid.setEtiqueta("ID");	
                nid.setValor(t2.toString());	
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();	
                        nid2.setEtiqueta("ID");	
                        nid2.setValor(hijo.getValor());	
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }

                
                nodo.addHijos(nid);

                RESULT = nodo;


:}
        | listaIdentificadores:hijo1 COMA:t1 tipovar:hijo2 IDENTIFICADOR:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("listaIdentificadores");
                // Nodo hijito1 = ((Nodo)hijo1);
                // nodo.setValor(hijito1.getValor() + ", "  + t2.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES
                
                Nodo nid = new Nodo();	
                nid.setEtiqueta("ID");	
                nid.setValor(t2.toString());	
                nid.setId(parser.cont);
                parser.cont++;//id

                //AGREGAR NO TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                if(hijo.getValor() != null){
                        Nodo nid2 = new Nodo();	
                        nid2.setEtiqueta("ID");	
                        nid2.setValor(hijo.getValor());	
                        nid2.setId(parser.cont);

                        nodo.addHijos(nid2);
                }

                
                nodo.addHijos(nid);

                RESULT = nodo;
:};

//declaracion de variables
declaracionesVAR ::= tipovar:hijo1 listaIdentificadores:hijo2 PUNTOCOMA:t2 {: //bloque en 0

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING": 
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                //System.out.println("Esto es: " + hijo.getValor()); 

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global"); 
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }   
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                                
                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global"); 
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);  
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }
                                                
                                                        
                                                
                                                }
                                }
                                break;
                  
                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

:}

        | tipovar:hijo1 listaIdentificadores:hijo2 asignacionVAR:hijo3 PUNTOCOMA:t2 {:

           //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("declaracionVAR");
                nodo.setValor(":");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                // //agregar id(s) a tabla de simbolos

                Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();

                //revisar si ese tipo de record existe en TS

                switch(tipo){
                        case "STRING": 
                        case "INTEGER":
                        case "CHAR":
                        case "REAL":
                        case "BOOLEAN":
                        case "RECORD": //si son tipos normales
                                int size = hijo.getHijos().size();

                                if(hijo.getValor() != null){
                                        if(size == 0){ //si es solo unico, solo un ID
                                                ElementoTS elemento = new ElementoTS();
                                                elemento.setID(hijo.getValor());
                                                elemento.setTipo(tipo);
                                                elemento.setAmbito("%Global"); 
                                                if( !(buscarExistenciaID(elemento) )){
                                                        ArregloSimbolos.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);

                                                } else{  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                }
                                        }   
                                } else{ //es null cuando son varios
                                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                                
                                                        ElementoTS elemento = new ElementoTS();
                                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                                        elemento.setTipo(tipo);
                                                        elemento.setAmbito("%Global"); 
                                                        if(  !(buscarExistenciaID(elemento)  )) {
                                                                ArregloSimbolos.add(elemento);  
                                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                        } else{  //error, ya existe ese simbolo
                                                                System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo()  + ", Ambito: " + ambitoActual);
                                                        }
                                                
                                                        
                                                
                                                }
                                }
                                break;
                  
                }

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);

                RESULT = nodo;

:};

condicionIF ::= IF:t1 PARIZQ:t2 expresion:hijo1 PARDER:t3 CURLYIZQ:t4 listaProposiciones:hijo2 CURLYDER:t5 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;
:}

         | IF:t1 PARIZQ:t2 expresion:hijo1 PARDER:t3 CURLYIZQ:t4 listaProposiciones:hijo2 CURLYDER:t5 
           ELSE:t7 CURLYIZQ:t8 listaProposiciones:hijo3 CURLYDER:t9 {:
         
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicionIF");
                nodo.setValor("IF-ELSE"); 
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                RESULT = nodo;         
           
:};

//define el tipo de main 
tipomain ::= INT:t1 {:

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("INT");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;
:}
        |  VOID:t1 {:

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipomain");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;
:};

//define el tipo de las variables declaradas
tipovar ::= INT:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("INTEGER");
                nodo.setId(parser.cont);
                parser.cont++;
        
                RESULT = nodo;

:} 

         | CHAR:t1 {:

            //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("CHAR");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 
:}
        | VOID:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("tipovar");
                nodo.setValor("VOID");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo; 

:};


op_rel_completos ::= EQUAL:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;
    
                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 
:}      

         | OPREL:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_rel_completos");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 

:};

op_condicional ::= OPCONDICIONALES:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("op_condicional");
                nodo.setValor("vacio"); 
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nAND = new Nodo();
                nAND.setEtiqueta("OPCONDICIONAL");
                nAND.setValor(t1.toString());
                nAND.setId(parser.cont);
                parser.cont++;

                if(nodo.getValor().equals("vacio")){
                        nodo.setValor(t1.toString()); 
                }

                RESULT = nodo; 
:};


//expresiones para condiciones de if
expresion ::= expresion:hijo1 op_condicional:hijo2 expresion:hijo3 {:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);

                RESULT = nodo; 
:}

         | expresion_parentesis:hijo1 {:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
               
        //        for(int i = 0; i < hijo.getHijos().size() ; i++){
        //                 nodo.addHijos(hijo.getHijos().get(i));
        //         }
                nodo.addHijos(hijo);

                RESULT = nodo; 
        
:}
         | condicion:hijo1 {:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 
:};

expresion_parentesis ::= PARIZQ:t1 expresion:hijo1 PARDER:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_parentesis");
                
                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                
                nodo.addHijos(hijo);

                RESULT = nodo; 
:};

condicion ::= IDENTIFICADOR:t1 op_rel_completos:hijo1 NUM:t2 {:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nNUM = new Nodo();
                nNUM.setEtiqueta("INTEGER");
                nNUM.setValor(t2.toString());
                nNUM.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nNUM);

                RESULT = nodo; 
:}

         | IDENTIFICADOR:t1 op_rel_completos:hijo1 CONSTCHAR:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("CHAR");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 
:} | NUM:t1 op_rel_completos:hijo1 NUM:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("INTEGER");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("INTEGER");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 
:}
| CONSTCHAR:t1 op_rel_completos:hijo1 IDENTIFICADOR:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("CHAR");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);

                RESULT = nodo; 
:}

         | IDENTIFICADOR:t1 op_rel_completos:hijo1 IDENTIFICADOR:t2 {:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("condicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nodo2 = new Nodo();
                nodo2.setEtiqueta("ID");
                nodo2.setValor(t2.toString());
                nodo2.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos(nodo2);
                

                RESULT = nodo; 
:};

proposicion ::= condicionIF:hijo1 {:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor("IF");

                nodo.setId(parser.cont);
                parser.cont++;

                // for(int i = 0; i < hijo.getHijos().size() ; i++){
                //         nodo.addHijos(hijo.getHijos().get(i));
                // }

                nodo.addHijos(hijo);


                RESULT = nodo; 
:}

         | cicloWHILE:hijo1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("WHILE");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                //TERMINALES

                //AGREGAR NO TERMINALES                         

                RESULT = nodo; 
:}

         | cicloFOR:hijo1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setValor("FOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);

                for(int i = 0; i < hijo.getHijos().size() ; i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 
:}

         | llamada_procedure_funcion:hijo1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);

                RESULT = nodo; 
:}
         | write:hijo1 PUNTOCOMA:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                             
                RESULT = nodo; 
:}         
         | read:hijo1 PUNTOCOMA:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo hijo = ((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                for(int i = 0 ; i < hijo.getHijos().size(); i++){
                        nodo.addHijos(hijo.getHijos().get(i));
                }
                             
                RESULT = nodo; 
:}

         | asignacionVAR:hijo1 PUNTOCOMA:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");

                Nodo hijo = ((Nodo)hijo1);

                nodo.setValor(hijo.getValor());
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                for(int i = 0 ; i < hijo.getHijos().size() ; i++){ //pasar los hijos para arriba
                        nodo.addHijos(hijo.getHijos().get(i));
                }

                RESULT = nodo; 
:}
            | error:hijo1 PUNTOCOMA:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("proposicion");
                nodo.setId(parser.cont);
                parser.cont++;


                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                RESULT = nodo;
:};

cicloWHILE ::= WHILE:t1 PARIZQ:t2 condicion:hijo1 PARDER:t3 CURLYIZQ:t4 listaProposiciones:hijo2 CURLYDER:t5 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloWhile");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;

:}; 

cicloFOR ::= FOR:t1 PARIZQ:t2 asignacionVAR:hijo1 PUNTOCOMA:t3 condicion:hijo2 PUNTOCOMA:t4 incrementando:hijo3 PARDER:t5 
             CURLYIZQ:t6 listaProposiciones:hijo4 CURLYDER:t7 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;
:}

        | FOR:t1 PARIZQ:t2 asignacionVAR:hijo1 PUNTOCOMA:t3 condicion:hijo2 PUNTOCOMA:t4 decrementando:hijo3 PARDER:t5 
          CURLYIZQ:t6 listaProposiciones:hijo4 CURLYDER:t7{:

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                nodo.addHijos((Nodo)hijo3);
                nodo.addHijos((Nodo)hijo4);
                RESULT = nodo;

:}

         | FOR:t1 condicion:hijo1 QUESTIONMARK:t4 NUM:t5 DECISION:t6 NUM:t7 PUNTOCOMA:t8 
           proposicion:hijo2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("cicloFOR");
                nodo.setId(parser.cont);
                parser.cont++;

                //AGREGAR NO TERMINALES
                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)hijo2);
                RESULT = nodo;
                
:};

incrementando ::= IDENTIFICADOR:t1 INCREMENTADOR:t2 {: 

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "++");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;
:};

decrementando ::= IDENTIFICADOR:t1 DECREMENTADOR:t2 {: 

                 //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("ID");
                nodo.setValor(t1.toString() + "--");
                nodo.setId(parser.cont);
                parser.cont++;


                RESULT = nodo;
:};

asignacionVAR ::= IDENTIFICADOR:t1 EQUAL:t2 expresion_matematica:hijo1{:
                
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor("=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                //comprobacion de tipos
                //revisar que T1 sea el mismo tipo de expresion_matematica
                String tipo = returnTipo(t1.toString());
                // String tipo1 = returnAmbitoFuncion(t1.toString());
                // if(tipo.equals("Error")){

                //         //retorna error si no la encontro, entonces subir el valor para comprobar si existe en 
                //         //la gramatica de FUNCTION.
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         element.setAmbito("Global");
                //         elementosStandby.add(element);

                        
                        
                // }else{
                //         if(hijo.getError()){ //si expr_mat es un error
                //                 System.out.println("Error: "  + hijo.getMensaje());
                //                 hijo.setValor("Error de Tipos.");
                //         }else{ //si todo esta bien, revisar si son iguales.
                //                 if(tipo.equals(hijo.getValor()) ||
                //                 (tipo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //                 }else{
                //                         System.out.println("Error: " + "El tipo de " + 
                //                         t1.toString()  + " es diferente que el valor asignado. Se esperaba " + tipo);
                //                 }
                //         }
                // }
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos((Nodo)hijo1); 
                
                RESULT = nodo;

:} | IDENTIFICADOR:t1 DOT:t4 IDENTIFICADOR:t2 ASIGNACION:t3 expresion_matematica:hijo1 {:
                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("asignacionVAR");
                nodo.setValor(":=");
                nodo.setId(parser.cont);
                parser.cont++;

                //TERMINALES

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                Nodo hijo = ((Nodo)hijo1);


                //ahora a revisar si ese id.id realmente existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());

                // String tipoAtributo = ""; //es el tipo del atributo id.x (tipo de x)

                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);
                        
                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 tipoAtributo = returnTipoVariableRecord(elemento, t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record 
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //                 tipoAtributo = "Error";
                //         }

                // }

                //comprobacion de otros tipos

                
                // if(hijo.getError()){ //si expr_mat es un error
                //         System.out.println("Error: "  + hijo.getMensaje());
                //         hijo.setValor("Error de Tipos.");
                // } else{ //si todo esta bien, revisar si son iguales.
                //         if(tipoAtributo.equals(hijo.getValor()) ||
                //         (tipoAtributo.equals("INTEGER") && hijo.getValor().equals("NUM"))){
                //                         //cheque
                //         } else{
                //                         System.out.println("Error: " + "El tipo de " + 
                //                         t2.toString()  + " es diferente que el valor asignado. Se esperaba " + tipoAtributo + " y se encontro un " + hijo.getValor());
                //         }
                // }
                
                //si expr_mat es tipo error, tirar error en esta produccion.

                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                nodo.addHijos((Nodo)hijo1); 
                
                RESULT = nodo;
:}; 

expresion_matematica ::= termino:hijo1 {: //por ejemplo 2x+a, el termino es 2x y a Y los factores serian "2 y x"

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo hijo = ((Nodo)hijo1);

                nodo.addHijos((Nodo)hijo1);
                nodo.setValor(hijo.getValor());

                if(hijo.getError()){ //subir error y mensaje 
                        nodo.setError(true);
                        hijo.setValor("Error de tipos.");
                        nodo.setMensaje(hijo.getMensaje());
                        CheckNodes.add(nodo);     
                }
                
                RESULT = nodo;

:} | OPSUM:t1 termino:hijo1 {: //en que caso se usa esto?

                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo1);
                
                RESULT = nodo;

:} | expresion_matematica:hijo1 OPSUM:t1 termino:hijo2 {:

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("expresion_matematica");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo sum = new Nodo();
                sum.setEtiqueta("OPSUM");
                sum.setValor(t1.toString());
                sum.setId(parser.cont);
                parser.cont++;

                Nodo hijoMAT = ((Nodo)hijo1);
                Nodo hijoTER = ((Nodo)hijo2);

                // if(!(hijoMAT.getValor().equals(hijoTER.getValor())) ){ //si los valores no son iguales, hay inconsistencia de tipos
                //         nodo.setError(true);
                //         if(hijoMAT.getError() || hijoTER.getError()){ //revisar si alguno de los hijos tiene errores
                //                 nodo.setMensaje(hijoMAT.getMensaje());  //asignar el error de la izquierda
                //                 nodo.setValor("Error de Tipos");

                //                 // CheckNodes.add(nodo);

                //                 // // //comprobacion de ambito y de tipos:
                //                 // // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         } 
                //         else{ //si todo esta bien, asignar error de inconsistencia a nodo padre
                //                 nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //         "Se esta operando un tipo " + hijoMAT.getValor() + " y un tipo " + hijoTER.getValor());
                //                 nodo.setValor("Error de Tipos.");

                //                 // //comprobacion de ambito y de tipos:
                //                 // //subir valor a checknodes para revisarlo mas arriba en funcion

                //                 CheckNodes.add(nodo);
                //         }
                        
                // } else{ //setear el valor si todo esta bien
                //         nodo.setValor(hijoMAT.getValor());
                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)sum);
                nodo.addHijos((Nodo)hijo2);
                
                RESULT = nodo;
:};

termino ::= factor:hijo1 {: //este

                Nodo nodo = new Nodo();         
                nodo.setEtiqueta("termino");
                
                Nodo hijo = ((Nodo)hijo1);

                // if(hijo.getEtiqueta().equals("expresion_matematica")){
                //         nodo.setValor(hijo.getValor());
                // } else{
                //         nodo.setValor(hijo.getEtiqueta());
                // }

                // if(hijo.getError()){ //quitar valor y subir mensaje
                //         nodo.setMensaje(hijo.getMensaje());
                //         hijo.setValor("Error de tipos.");
                // }

                nodo.setId(parser.cont);
                parser.cont++;

                nodo.addHijos(hijo);
                
                RESULT = nodo;

:} | termino:hijo1 OPMULT:t1 factor:hijo2 {: 

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("termino");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo opmult = new Nodo();
                opmult.setEtiqueta("OPMULT");
                opmult.setValor(t1.toString());
                opmult.setId(parser.cont);
                parser.cont++;

                // Nodo hijoTER = ((Nodo)hijo1);
                // Nodo hijoFAC = ((Nodo)hijo2);

                // if(hijoFAC.getEtiqueta().equals("expresion_matematica")){
                //         if(!(hijoTER.getValor().equals(hijoFAC.getValor())) ){
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 } 
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // } else{
                //         if(!(hijoTER.getValor().equals(hijoFAC.getEtiqueta())) ){
                               
                //                 nodo.setError(true);
                //                 if(hijoTER.getError() || hijoFAC.getError()){
                //                         nodo.setMensaje(hijoTER.getMensaje());
                //                         nodo.setValor("Error de Tipos");
                //                 } 
                //                  else{
                //                         nodo.setMensaje("Tipos diferentes en expresion matematica. " +
                //                 "Se esta operando un tipo " + hijoTER.getValor() + " y un tipo " + hijoFAC.getEtiqueta());
                //                         nodo.setValor("Error de Tipos.");
                //                 }
                //         } else{
                //                 nodo.setValor("NUM");
                //         }

                // }

                nodo.addHijos((Nodo)hijo1);
                nodo.addHijos((Nodo)opmult);
                nodo.addHijos((Nodo)hijo2);
                
                RESULT = nodo;
:};

factor ::= IDENTIFICADOR:t1 {:

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                //buscar en TS ese Identificador y retornar tipo
                // String tipo = returnTipo(t1.toString());
 
                // if(tipo.equals("Error")){  

                //         //no lo encontro globalmente, ahora revisar en la funcion
                        
                //         ElementoTS element = new ElementoTS();
                //         element.setID(t1.toString());
                //         elementosStandby.add(element);

                //         nodo.setEtiqueta("Error");
                // }else{
                //         if(tipo == "INTEGER"){
                //                 tipo = "NUM";
                //         }
                //         nodo.setEtiqueta(tipo);
                //         nodo.setValor(t1.toString());
                // }

                nodo.addHijos(nid);
                
                RESULT = nodo;
                
:} | IDENTIFICADOR:t1 DOT:t3 IDENTIFICADOR:t2 {:

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("factor");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nid = new Nodo();
                nid.setEtiqueta("ID");
                nid.setValor(t1.toString());
                nid.setId(parser.cont);
                parser.cont++;

                Nodo nid2 = new Nodo();
                nid2.setEtiqueta("ID");
                nid2.setValor(t2.toString());
                nid2.setId(parser.cont);
                parser.cont++;


                //buscar si esa variable record existe

                // ElementoTS elemento = new ElementoTS();
                // String tipo = returnTipoRecord(t1.toString());



                // if(tipo.equals("Error")){

                // } else{
                //        elemento = returnElementoTS(t1.toString(), tipo);
                        
                // }

                // if(BuscaTipo(elemento)){ //regresa falso si lo encuentra
                //         //no encontro ese id
                //         System.out.println("No existe una variable record con ese ID: " + t1.toString());
                //         //error
                // } else{ //si encontro el record

                //         //ahora revisar si el otro identificador existe declarado en record

                //         if( !(checkRecordVarConID(elemento, t2.toString())) ){ //retorna falso si lo encontro
                //                 String tipo2 = returnTipoVariableRecord(elemento, t2.toString());
                //                 nodo.setEtiqueta(tipo2);
                //                 nodo.setValor(t1.toString() + "." + t2.toString());
                //         } else{
                //                 //no existe ese atributo en el record 
                //                 //error
                //                 System.out.println("No existe un atributo: " + t2.toString() + " en un record con ese ID: " + t1.toString());
                //                 nodo.setEtiqueta("Error");
                //         }

                // }


                nodo.addHijos(nid);
                nodo.addHijos(nid2);
                
                RESULT = nodo;
:} | llamada_procedure_funcion:hijo1 {:

                Nodo nodo = new Nodo(); 
                nodo.setEtiqueta("llamada_procedure_funcion");
                nodo.setId(parser.cont);
                parser.cont++;

                Nodo nod = ((Nodo)hijo1);

                for(Nodo node : nod.getHijos()){
                        nodo.addHijos(node);
                }

                // nodo.addHijos((Nodo)hijo1);
                
                RESULT = nodo;
:} | NUM:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("INTEGER");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
:} | CONSTSTRING:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("STRING");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
:}  | CONSTCHAR:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("CHAR");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
:} | OPBOOL:t1 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("OPBOOL");
                nodo.setValor(t1.toString());
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
:} | PARIZQ:t1 expresion_matematica:hijo1 PARDER:t2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("expresion_matematica");
                

                Nodo hijito1 = ((Nodo)hijo1);

                nodo.setValor(hijito1.getValor());
                
                // if(hijito1.getError()){
                //         nodo.setError(true);
                //         hijito1.setValor("Error de tipos.");
                // }
                
                nodo.setId(parser.cont);
                parser.cont++;


                nodo.addHijos(hijito1);

                // for(int i = 0; i < hijito1.getHijos().size(); i++){
                //        nodo.addHijos(hijito1.getHijos().get(i));
                // }
                RESULT = nodo;
:};

//inicio de programa con o sin parametros 
inicioProgram ::= tipomain:hijo1 MAIN:t1 PARIZQ:t2 PARDER:t3 CURLYIZQ:t4 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioProgram");
              nodo.setId(parser.cont);
              //nodo.setValor(t1.toString());
              parser.cont++;

              Nodo tipo = ((Nodo)hijo1); 

              //TERMINALES
              nodo.addHijos(tipo); 
              //nodo.setValor(tipo.getValor()); 

              RESULT = nodo;

:}
                | tipomain:hijo1 MAIN:t1 PARIZQ:t2 listaIdentificadores:hijo2 PARDER:t3 CURLYIZQ:t4 {:
                
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("NombreProgram");
              nodo.setValor(t2.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              nodo.addHijos((Nodo)hijo1); 
              RESULT = nodo;
                     
:};  


//esta gramatica aguanta varias proposiciones adentro de un begin/end
cuerpoProposiciones ::= BEGIN:t1 listaProposiciones:hijo1 END:t2 PUNTOCOMA:t3 {:
              
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoProposiciones");
              nodo.setValor("listaProposiciones");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo hijo = ((Nodo)hijo1);


              if(hijo.getHijos().size() > 2){
                        for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                        }
              } else{
                      nodo.setEtiqueta(hijo.getEtiqueta());
                      nodo.setValor(hijo.getValor());
                      for(int i = 0; i < hijo.getHijos().size() ; i++){
                                nodo.addHijos(hijo.getHijos().get(i));
                      }
              }
              
              RESULT = nodo;

:};

inicioFunction ::= FUNCTION:t1 IDENTIFICADOR:t2 OPDECLARACION:t3 tipovar:hijo1 PUNTOCOMA:t4 cuerpoprocedure_funcion:hijo2 {:
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //Si encuentra esto, es un error.
              //No pueden haber funciones con cero parametros:

              //se agrega al arreglo para que el comprobador de tipos/ambito trate esta funcion como un procedure.
              
              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                                break;
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              System.out.println("La funcion " +  t2.toString() + " necesita parametros declarados.");

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);

              RESULT = nodo;

:} 
        | tipovar:hijo1 IDENTIFICADOR:t2 PARIZQ:t3 declaracionesVAR_procedure_funcion:hijo2 PARDER:t4 
          PUNTOCOMA:t6 {:

              //este segundo permite la declaracion de funciones 
                 
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0; 


                try{
                        tam = hijo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString()); 
                                
                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }                               
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString()); 
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }     
                                }
                        }
                        
                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva
                                                
                                } 
                }
    

                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;          
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              //nodo.addHijos((Nodo)hijo3);
              RESULT = nodo; 

:}

        | tipovar:hijo1 IDENTIFICADOR:t2 PARIZQ:t3 declaracionesVAR_procedure_funcion:hijo2 PARDER:t4 
          CURLYIZQ:t5 declaracionesVARAdentroFunctionProcedure:hijo3 listaProposiciones:hijo4 
          RETURN:t6 IDENTIFICADOR:t7 PUNTOCOMA:t8 CURLYDER:t9 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("inicioFunction");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t2.toString());
              nid.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              //recorrer hijos de hijo1 y bloques
              Nodo hijo = ((Nodo)hijo2);
              ArrayList<Nodo> hijosDeclarVar = new  ArrayList<Nodo>();
              hijosDeclarVar = hijo.getHijos();

              ElementoTS funcion = new ElementoTS();
              funcion.setID(t2.toString());

              Nodo tipoVar = ((Nodo)hijo1);
              funcion.setTipo(tipoVar.getValor());

              funcion.setAmbito(t2.toString()); 

              ambitoActual = t2.toString();

                ArrayList<ElementoTS> variablesDeclaracionFuncion = new ArrayList<ElementoTS>();

                //boolean sonVarios = false;

                int tam = 0; 


                try{
                        tam = hijo.getHijos().get(2).getHijos().size(); 
                        //esto es el size del arreglo de hijos del TERCER nodo
                } catch(Exception e){
                        
                }

                if(tam  == 0){
                        if(hijosDeclarVar.get(0).getValor()  != null){
                                //si es una declaracion simple, ex: "test : string"


                                ElementoTS id = new ElementoTS();
                                id.setID(hijosDeclarVar.get(0).getValor());
                                id.setTipo(hijosDeclarVar.get(1).getValor());
                                id.setAmbito(t2.toString()); 
                                
                                boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                if(busqueda){
                                        funcion.addParametro(id);
                                        // System.out.println("Se agrego: " + id.getID());
                                } else{
                                        System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                //error
                                }                               
                        } else if(hijosDeclarVar.get(0).getValor() == null){
                                //si el nodo a la mas izquierda es una listaIdentificadores

                                //recorrer los hijos de ListaIdentificadores
                                String tipo = hijosDeclarVar.get(1).getValor();

                                for(Nodo nodo1 : hijosDeclarVar.get(0).getHijos()){
                                        ElementoTS id = new ElementoTS();
                                        id.setID(nodo1.getValor());
                                        id.setTipo(tipo);
                                        id.setAmbito(t2.toString()); 
                                        boolean busqueda = revisarArreglo(id, variablesDeclaracionFuncion);

                                        if(busqueda){
                                                funcion.addParametro(id);
                                                // System.out.println("Se agrego: " + id.getID());
                                        } else{
                                                System.out.println("Ya existe un ID: " + id.getID() + " en la Funcion: " + t2.toString());
                                                        //error
                                        }     
                                }
                        }
                        
                } else{
                                if(hijosDeclarVar.get(2).getValor() != "vacio"){  //usar recursiva
                                        //si son varias lineas de declaracion
                                        variablesDeclaracionFuncion = recorrerDeclaracionesFuncion(variablesDeclaracionFuncion, ((Nodo)hijo1), t2.toString());
                                        //sonVarios = true;
                                        funcion.setParametros(variablesDeclaracionFuncion);//agregar todas las variables de la recursiva
                                                
                                } 
                }
    

                //verificar que no se puedan agregar funciones del mismo tipo

                boolean lomismo = false;

                for(ElementoTS elem : ArregloFunciones){
                        
                        if(funcion.getID().equals(elem.getID())){
                               lomismo = true;
                               break;          
                        }
                }
                

                if(lomismo){
                        //error
                        System.out.println("Ya existe una funcion con el nombre " + funcion.getID());
                } else{
                        
                //cuando este todo bien
                        ArregloFunciones.add(funcion);
                }

              nodo.addHijos(nid);
              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              nodo.addHijos((Nodo)hijo4);
              RESULT = nodo; 
:};

//estos son los parametros de la funcion como tal 
declaracionesVAR_procedure_funcion ::= tipovar:hijo1 listaIdentificadores:hijo2 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR_pro");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              Nodo hijo = ((Nodo)hijo2);

                Nodo tipovariable = ((Nodo)hijo1);
                String tipo = tipovariable.getValor();
                
                int size = hijo.getHijos().size();

                if(hijo.getValor() != null){
                        if(size == 0){ //si es solo unico, solo un ID
                                ElementoTS elemento = new ElementoTS();
                                elemento.setID(hijo.getValor());
                                System.out.println("ID del elemento: " + elemento.getID()); 
                                elemento.setTipo(tipo);
                                elemento.setAmbito(""); 
                                        if(BuscaTipoFuncion(elemento)){
                                                ArregloFunciones.add(elemento);  
                                                //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                        } else {  //error, ya existe ese simbolo
                                                System.out.println("Ya existe ese elemento con ese id, tipo y ambito");
                                        }                                
                        } 

                } else{ //es null cuando son varios
                        for(int i = 0; i < size ; i++){ //agregar todos los hijos al arreglo
                                
                                        ElementoTS elemento = new ElementoTS();
                                        elemento.setID(hijo.getHijos().get(i).getValor());
                                        elemento.setTipo(tipo);
                                        elemento.setAmbito(""); 
                                                if(BuscaTipoFuncion(elemento)){
                                                        ArregloFunciones.add(elemento);  
                                                        //System.out.println("ID agregado: " + elemento.getID() + ", Tipo: " + elemento.getTipo() + ", Ambito: " + elemento.getAmbito());

                                                } else {  //error, ya existe ese simbolo
                                                        System.out.println("Ya existe una variable " + elemento.getID() + " con el tipo de: " + elemento.getTipo() + " y con el ambito: " + elemento.getAmbito());
                                                }
                        }
                }

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;


:}
        | listaIdentificadores:hijo1 OPDECLARACION:t1 tipovar:hijo2 PUNTOCOMA:t2 declaracionesVAR_procedure_funcion:hijo3 {:
        
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;
:}
        | VAR:t1 listaIdentificadores:hijo1 OPDECLARACION:t2 tipovar:hijo2 PUNTOCOMA:t3 declaracionesVAR_procedure_funcion:hijo3 {:
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              nodo.setId(parser.cont);
              parser.cont++;

              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              nodo.addHijos((Nodo)hijo3);
              RESULT = nodo;
        
:}
        | VAR:t1 listaIdentificadores:hijo1 OPDECLARACION:t2 tipovar:hijo2 {:
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("declaracionesVAR");
              nodo.setValor(" : ");
              parser.cont++;


              nodo.addHijos((Nodo)hijo1);
              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;
:}
        | {:
        
                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        
        :};



llamada_procedure_funcion ::= IDENTIFICADOR:t1 PARIZQ:t2 lista_parametros:hijo1 PARDER:t3 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("llamada_procedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t1.toString());
              nid.setId(parser.cont);
              parser.cont+=1;//id, parizq, parder

              nodo.addHijos(nid); 

              Nodo hijito1 = ((Nodo)hijo1);

              for(int i = 0; i < hijito1.getHijos().size() ; i++){
                        nodo.addHijos(hijito1.getHijos().get(i));
                        
                      }
              //nodo.setValor("(" + hijito1.getValor() + ")");

              RESULT = nodo;
:}; //fin llamada_procedure_funcion

lista_parametros ::=  factor:hijo1 lista_parametros:hijo2 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("lista_parametros");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

                // Nodo nid = new Nodo();
                // nid.setEtiqueta("NUM");
                // nid.setValor(t1.toString());
                // nid.setId(parser.cont);
                // parser.cont+=1;

                Nodo node1 = ((Nodo)hijo1);

                Nodo node = ((Nodo)hijo2);


                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));
                        
                }

              RESULT = nodo;
:}
        
        | COMA factor:hijo1 lista_parametros:hijo2 {:

                //NODO PADRE
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("lista_parametros");
                nodo.setId(parser.cont);
                parser.cont++;


                Nodo node1 = ((Nodo)hijo1);
                Nodo node = ((Nodo)hijo2);

                

                nodo.addHijos(node1);

                for(int i = 0; i < node.getHijos().size() ; i++){
                        nodo.addHijos(node.getHijos().get(i));
                        
                }

                RESULT = nodo;

        :}

                | {:
                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
                
:}; //fin lista_parametros

cuerpoprocedure_funcion ::= declaracionesVARAdentroFunctionProcedure:hijo1 cuerpoProposiciones:hijo2 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("cuerpoprocedure_funcion");
              nodo.setId(parser.cont);
              parser.cont++;

              Nodo node = ((Nodo)hijo1);

              if(node != null){
                nodo.addHijos((Nodo)hijo1);

              }

              nodo.addHijos((Nodo)hijo2);
              RESULT = nodo;
:}; 

//declaracion de las variables adentro de una funcion
declaracionesVARAdentroFunctionProcedure ::= tipovar:hijo2 listaIdentificadores:hijo1 PUNTOCOMA:t3 declaracionesVARAdentroFunctionProcedure:hijo3 {:

        Nodo nodo = new Nodo();
        nodo.setEtiqueta("declaracionesVARAdentroFunctionProcedure");
        nodo.setId(parser.cont);
        parser.cont++;

        nodo.addHijos((Nodo)hijo1);
        nodo.addHijos((Nodo)hijo2);
        nodo.addHijos((Nodo)hijo3);

              RESULT = nodo;
 :}

        | {:

                //NODO PADRE  
                Nodo nodo = new Nodo();
                nodo.setEtiqueta("vacio");
                nodo.setValor("vacio");
                nodo.setId(parser.cont);
                parser.cont++;

                RESULT = nodo;
        :};

//read seria scanf
read ::= READ:t1 PARIZQ:t2 IDENTIFICADOR:t3 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nid);

              RESULT = nodo; 

:} |
READ:t1 PARIZQ:t2 IDENTIFICADOR:t3 DOT IDENTIFICADOR:t4 PARDER:t5 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("read");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t3.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              Nodo nid2 = new Nodo();
              nid2.setEtiqueta("ID");
              nid2.setValor(t4.toString());
              nid2.setId(parser.cont);
              parser.cont+=1;


              nodo.addHijos(nid);
              nodo.addHijos(nid2);

              RESULT = nodo; 

:}; 

//write seria printf
write ::= WRITE:t1 PARIZQ:t2 CONSTSTRING:t3 COMA:t4 IDENTIFICADOR:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES

              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nid = new Nodo();
              nid.setEtiqueta("ID");
              nid.setValor(t5.toString());
              nid.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nid);

              RESULT = nodo; 

:} 
        | WRITE:t1 PARIZQ:t2 CONSTSTRING:t3 COMA:t4 CONSTCHAR:t5 PARDER:t6 {:
              
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nCONSTCHAR = new Nodo();
              nCONSTCHAR.setEtiqueta("CONSTCHAR");
              nCONSTCHAR.setValor(t5.toString());
              nCONSTCHAR.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTCHAR);

              RESULT = nodo;         
        
:} 
        | WRITE:t1 PARIZQ:t2 CONSTSTRING:t3 COMA:t4 CONSTSTRING:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont++;//string

              Nodo nCONSTSTRING2 = new Nodo();
              nCONSTSTRING2.setEtiqueta("CONSTSTRING");
              nCONSTSTRING2.setValor(t5.toString());
              nCONSTSTRING2.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nCONSTSTRING2);

              RESULT = nodo;            
        
:}
        | WRITE:t1 PARIZQ:t2 CONSTSTRING:t3 COMA:t4 NUM:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        
:}
        | WRITE:t1 PARIZQ:t2 CONSTSTRING:t3 PARDER:t4 {:
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;                     
        
:}  | WRITE:t1 PARIZQ:t2 IDENTIFICADOR:t3 PARDER:t4 {:
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              parser.cont+=2;
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);

              RESULT = nodo;                     
        
:} | WRITE:t1 PARIZQ:t2 IDENTIFICADOR:t3 COMA:t4 IDENTIFICADOR:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        
:}| WRITE:t1 PARIZQ:t2 IDENTIFICADOR:t3 COMA:t4 NUM:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("NUM");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        
:}| WRITE:t1 PARIZQ:t2 IDENTIFICADOR:t3 COMA:t4 CONSTCHAR:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTCHAR");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        
:}
| WRITE:t1 PARIZQ:t2 IDENTIFICADOR:t3 COMA:t4 CONSTSTRING:t5 PARDER:t6 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("CONSTSTRING");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);

              RESULT = nodo;             
        
:}
| WRITE:t1 PARIZQ:t2 IDENTIFICADOR:t3 COMA:t4 IDENTIFICADOR:t5 DOT IDENTIFICADOR:t6 PARDER:t7 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("ID");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;             
        
:}
| WRITE:t1 PARIZQ:t2 CONSTSTRING:t3 COMA:t4 IDENTIFICADOR:t5 DOT IDENTIFICADOR:t6 PARDER:t7 {:

              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor(t1.toString());
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              Nodo nCONSTSTRING = new Nodo();
              nCONSTSTRING.setEtiqueta("CONSTSTRING");
              nCONSTSTRING.setValor(t3.toString());
              nCONSTSTRING.setId(parser.cont);
              parser.cont+=1;

              Nodo nNUM = new Nodo();
              nNUM.setEtiqueta("ID");
              nNUM.setValor(t5.toString());
              nNUM.setId(parser.cont);
              parser.cont+=1;

                Nodo nNUMs = new Nodo();
              nNUMs.setEtiqueta("ID");
              nNUMs.setValor(t6.toString());
              nNUMs.setId(parser.cont);
              parser.cont+=1;

              nodo.addHijos(nCONSTSTRING);
              nodo.addHijos(nNUM);
              nodo.addHijos(nNUMs);

              RESULT = nodo;             
        
:}
        | WRITE:t1 PARIZQ:t2 PARDER:t3 {:
        
              //NODO PADRE
              Nodo nodo = new Nodo();
              nodo.setEtiqueta("write");
              nodo.setValor("write");
              nodo.setId(parser.cont);
              parser.cont++;

              //TERMINALES
              
              RESULT = nodo;      
:};